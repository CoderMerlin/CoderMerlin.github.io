{"meta":{"title":"Coder编程","subtitle":"","description":"","author":"Coder编程","url":"http://yoursite.com","root":"/"},"pages":[{"title":"关于","date":"2020-01-19T12:26:43.242Z","updated":"2020-01-14T13:59:17.080Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":""},{"title":"所有分类","date":"2020-05-11T12:49:50.025Z","updated":"2020-05-11T12:49:50.025Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"","date":"2020-01-19T12:26:43.243Z","updated":"2017-07-04T01:51:55.000Z","comments":true,"path":"iloveyouhn/config.json","permalink":"http://yoursite.com/iloveyouhn/config.json","excerpt":"","text":"{\"name\":\"loveyue4\",\"version\":1}"},{"title":"","date":"2020-01-19T12:26:43.244Z","updated":"2020-01-18T06:57:04.789Z","comments":true,"path":"iloveyouhn/index.html","permalink":"http://yoursite.com/iloveyouhn/index.html","excerpt":"","text":"我喜欢你 body { text-align: center; margin: 0px; padding: 0px; font-size: 25px; color: #FFF; font-family: \"微软雅黑\"; background: #f3961c; } div { text-align: left; } .tittle { width: 100%; background: #f3961c; top: 0px; height: 100%; z-index: 0; position: absolute; position: fixed !important; display: none; cursor: default; } .big { font-family: \"微软雅黑\"; color: #FFF; font-size: 35px; } .tishi { position: absolute; position: fixed !important; z-index: 99; bottom: 10px; width: 100%; text-align: center; } .tishiContent { border: 1px solid #FFF; font-size: 18px; padding: 5px; cursor: pointer; border-radius: 5px; } // if(localStorage[\"index\"]==\"1\"){ // window.location=\"index2.html\"; // } $(document).ready(function(e) { $(document).scrollTop(300); /*移动滚动条到最下方*/ timer=setInterval(\"$.change()\",6000); t=1; $(\"#t-\"+t).fadeIn(); $(document).click( function(){ /*如果用户点击了，就取消自动播放*/ clearInterval(timer); $.change(); } ); /*切换*/ $.change=function(){ t++; if(t"},{"title":"","date":"2020-01-19T12:26:43.248Z","updated":"2020-01-18T10:44:54.760Z","comments":true,"path":"iloveyouhn/two.html","permalink":"http://yoursite.com/iloveyouhn/two.html","excerpt":"","text":"I LOVE YOU @font-face { font-family: digit; src: url('digital-7_mono.ttf') format(\"truetype\"); } 娜： 当你第一次看到这段话的时候 也是我鼓起勇气正式向你表白的那天 很多不同的表白方式，不知在我脑海里模拟了多少遍 以这样的方式向你告白 可能更适合我现在的自己（程序员 (..•˘_˘•..) ） 有很多话想对你说，却不知从何说起~ 算了，不管了。说到哪算到哪了 你还记得我与你第一次相识在哪吗？ QQ老乡群，那次我们都要去参加代考，然后加了好友 哈哈，好奇怪，我们竟然以这样的方式相识 初次见你，普普通通的女孩，却又显得格外特别 是温柔？是文雅大方？是自持？是独立？是努力？还是其他？ 我不知道，至此心里却又默默有了你的影子 往后有机会我总会跟你聊几句 你还记得我第一次送你U盘上刻的字吗 明明是想跟你告白，却怂的不敢承认 正如你说的，你会与每个人都保持距离 那时候我也能感觉到，所以我们保持着友情，不再向前一步 毕业后，我以为我们像其他朋友一样，消失在彼此的对话框里 却意外的与你向我借钱断断续续的有着联系 上次得知你还没找男朋友，我却又暗自高兴 我讨厌之前大学那么怂的自己 我幻想过无数个跟你在一起的场景 跟你结婚，跟你生孩子，跟你一起养我们的孩子，跟你白头到老 我不想将来回忆没跟你说我心里的话会后悔 我真的喜欢你！ 我真的喜欢你！ 我真的喜欢你！ 情话是我学的，爱你是真的! 娜,我爱你！ Love u forever and ever. -- 迈 var offsetX = $(\"#loveHeart\").width() / 2; var offsetY = $(\"#loveHeart\").height() / 2 - 55; var together = new Date(); together.setFullYear(2014, 9, 24); together.setMinutes(0); together.setSeconds(0); together.setMilliseconds(0); if (!document.createElement('canvas').getContext) { var msg = document.createElement(\"div\"); msg.id = \"errorMsg\"; msg.innerHTML = \"Your browser doesn't support HTML5!Recommend use Chrome 14+/IE 9+/Firefox 7+/Safari 4+\"; document.body.appendChild(msg); $(\"#code\").css(\"display\", \"none\") $(\"#copyright\").css(\"position\", \"absolute\"); $(\"#copyright\").css(\"bottom\", \"10px\"); document.execCommand(\"stop\"); } else { setTimeout(function () { startHeartAnimation(); }, 5000); timeElapse(together); setInterval(function () { timeElapse(together); }, 500); //adjustCodePosition(); $(\"#code\").typewriter(); } L2Dwidget.init({\"model\":{\"jsonPath\":\"/live2dw/assets/haruto.model.json\"},\"display\":{\"position\":\"right\",\"width\":150,\"height\":300},\"mobile\":{\"show\":false},\"log\":false,\"pluginJsPath\":\"lib/\",\"pluginModelPath\":\"assets/\",\"pluginRootPath\":\"live2dw/\",\"tagMode\":false});"},{"title":"我的朋友们","date":"2020-05-11T13:04:34.163Z","updated":"2020-05-11T13:04:34.163Z","comments":true,"path":"friends/index.html","permalink":"http://yoursite.com/friends/index.html","excerpt":"","text":"互换友链规则：博客名、头像链接、博客链接、标签(最多3个)"},{"title":"所有标签","date":"2020-05-11T12:29:45.896Z","updated":"2020-05-11T12:29:45.896Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""},{"title":"","date":"2020-08-05T15:25:08.276Z","updated":"2020-08-05T15:25:08.276Z","comments":true,"path":"my-resume/index.html","permalink":"http://yoursite.com/my-resume/index.html","excerpt":"","text":"Resume Theme for Hexo English | 简体中文 Getting StartedPlease directly download the source code of this site and refer to the source code for rewriting. Site Source code: https://github.com/xaoxuu/resume-docs Theme source code: https://github.com/xaoxuu/hexo-theme-resume EducationXX University X College X Course X Major X Graduation Work Experience2000 ~ Present: Company XX Mainly responsible for XXX 1900 ~ 2000: Company XX Mainly responsible for XXX 1800 ~ 1900: company XX Mainly responsible for XXX Featured Projects 心率管家 C养老 C-Life养老 LinkSmart HitFit 飞亚达腕能助手 Project A2000/01 ~ 2019/01: Developed by XX company, team project, maintenance so far啦啦啦 Project B1900/01 ~ 2000/01: Developed by XX company啦啦啦 Project C1800/01 ~ 1900/01: Developed by XX company啦啦啦 Open Source ContributionsVolantis2017 ~ Present, a wonderful blog theme for Hexo 4.2 完全自由的模块化、易于定制化设计 移动端优化 源码：https://github.com/xaoxuu/hexo-theme-volantis 官网：https://volantis.js.org/ ProHUD2019/08 ~ present, HUD library with easy customization and simple interface 使用Swift5编写。 包含顶部通知横幅、弹窗、底部操作表三种使用场景的UI控件。 易于配置UI从而满足公司各业务线的UI要求，接口调用简单明了。 源码：https://github.com/xaoxuu/ProHUD Contact目前状态为：在职，考虑换工作，100年内可到岗。 your email 1xxxxxxxxxx Theme Config12345678910111213141516171819cdn: # These base libraries cannot be deleted jquery: https://cdn.jsdelivr.net/npm/jquery@3.4.1/dist/jquery.min.js vue: https://cdn.jsdelivr.net/npm/vue@2.5.21/dist/vue.min.js # When these CDN resources are deleted, local resources are loaded. common: https://cdn.jsdelivr.net/gh/xaoxuu/hexo-theme-resume@1.0.0/source/js/common.js escape: https://cdn.jsdelivr.net/gh/xaoxuu/hexo-theme-resume@1.0.0/source/js/css.escape.js smooth_scroll: https://cdn.jsdelivr.net/gh/xaoxuu/hexo-theme-resume@1.0.0/source/js/smooth-scroll.min.js css: https://cdn.jsdelivr.net/gh/xaoxuu/hexo-theme-resume@1.0.0/source/css/style.min.css # Optional plug-in: image zoom fancybox: css: https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@3.5.7/dist/jquery.fancybox.min.css js: https://cdn.jsdelivr.net/gh/fancyapps/fancybox@3.5.7/dist/jquery.fancybox.min.js# robots meta tagrobots: noindex,nofollow# the footer of your sitecopyright: '[Copyright © 2017-2020 Mr. X](https://xaoxuu.com)'"},{"title":"","date":"2020-01-19T12:26:43.257Z","updated":"2020-01-14T14:01:16.353Z","comments":true,"path":"mylist/index.html","permalink":"http://yoursite.com/mylist/index.html","excerpt":"","text":""},{"title":"","date":"2020-01-19T12:26:43.251Z","updated":"2017-07-04T01:51:55.000Z","comments":true,"path":"iloveyouhn/jscss/default.css","permalink":"http://yoursite.com/iloveyouhn/jscss/default.css","excerpt":"","text":"/*Download by http://www.codefans.net*/ body{margin:0;padding:0;background:#ffe;font-size:12px;overflow:auto}#mainDiv{width:100%;height:100%}#loveHeart{float:left;width:670px;height:625px}#garden{width:100%;height:100%}#elapseClock{text-align:right;font-size:18px;margin-top:10px;margin-bottom:10px}#words{font-family:\"sans-serif\";width:505px;font-size:24px;color:#666}#messages{display:none}#elapseClock .digit{font-family:\"digit\";font-size:36px}#loveu{padding:5px;font-size:22px;margin-top:80px;margin-right:120px;text-align:right;display:none}#loveu .signature{margin-top:10px;font-size:20px;font-style:italic}#code{float:left;width:440px;height:400px;color:#333;font-family:\"Consolas\",\"Monaco\",\"Bitstream Vera Sans Mono\",\"Courier New\",\"sans-serif\";font-size:12px}#code .string{color:#2a36ff}#code .keyword{color:#7f0055;font-weight:bold}#code .placeholder{margin-left:15px}#code .space{margin-left:7px}#code .comments{color:#3f7f5f}#copyright{ margin-top: 10px; text-align: center; width: 100%; color: #666; position: fixed; z-index: 55; bottom: 0px; } body { color: #FFF; padding: 10px; background: #FFF url(http://static.tieba.baidu.com/tb/cms/frs/bg/bg_105_wrap2.jpg) no-repeat fixed top center; margin-left: 0px; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; }#errorMsg{width:100%;text-align:center;font-size:24px;position:absolute;top:100px;left:0}#copyright a{color:#666}"},{"title":"","date":"2020-01-19T12:26:43.251Z","updated":"2017-07-04T01:51:55.000Z","comments":true,"path":"iloveyouhn/jscss/functions.js","permalink":"http://yoursite.com/iloveyouhn/jscss/functions.js","excerpt":"","text":"/*Download by http://www.codefans.net*/ var $window=$(window),gardenCtx,gardenCanvas,$garden,garden;var clientWidth=$(window).width();var clientHeight=$(window).height();$(function(){$loveHeart=$(\"#loveHeart\");var a=$loveHeart.width()/2;var b=$loveHeart.height()/2-55;$garden=$(\"#garden\");gardenCanvas=$garden[0];gardenCanvas.width=$(\"#loveHeart\").width();gardenCanvas.height=$(\"#loveHeart\").height();gardenCtx=gardenCanvas.getContext(\"2d\");gardenCtx.globalCompositeOperation=\"lighter\";garden=new Garden(gardenCtx,gardenCanvas);$(\"#content\").css(\"width\",$loveHeart.width()+$(\"#code\").width());$(\"#content\").css(\"height\",Math.max($loveHeart.height(),$(\"#code\").height()));$(\"#content\").css(\"margin-top\",Math.max(($window.height()-$(\"#content\").height())/2,10));$(\"#content\").css(\"margin-left\",Math.max(($window.width()-$(\"#content\").width())/2,10));setInterval(function(){garden.render()},Garden.options.growSpeed)});$(window).resize(function(){var b=$(window).width();var a=$(window).height();if(b!=clientWidth&&a!=clientHeight){location.replace(location)}});function getHeartPoint(c){var b=c/Math.PI;var a=19.5*(16*Math.pow(Math.sin(b),3));var d=-20*(13*Math.cos(b)-5*Math.cos(2*b)-2*Math.cos(3*b)-Math.cos(4*b));return new Array(offsetX+a,offsetY+d)}function startHeartAnimation(){var c=50;var d=10;var b=new Array();var a=setInterval(function(){var h=getHeartPoint(d);var e=true;for(var f=0;f=c.length){clearInterval(e)}},75)});return this}})(jQuery);function timeElapse(c){var e=Date();var f=(Date.parse(e)-Date.parse(c))/1000;var g=Math.floor(f/(3600*24));f=f%(3600*24);var b=Math.floor(f/3600);if(b"},{"title":"","date":"2020-01-19T12:26:43.252Z","updated":"2017-07-04T01:51:55.000Z","comments":true,"path":"iloveyouhn/jscss/garden.js","permalink":"http://yoursite.com/iloveyouhn/jscss/garden.js","excerpt":"","text":"/*Download by http://www.codefans.net*/ function Vector(a,b){this.x=a;this.y=b}Vector.prototype={rotate:function(b){var a=this.x;var c=this.y;this.x=Math.cos(b)*a-Math.sin(b)*c;this.y=Math.sin(b)*a+Math.cos(b)*c;return this},mult:function(a){this.x*=a;this.y*=a;return this},clone:function(){return new Vector(this.x,this.y)},length:function(){return Math.sqrt(this.x*this.x+this.y*this.y)},subtract:function(a){this.x-=a.x;this.y-=a.y;return this},set:function(a,b){this.x=a;this.y=b;return this}};function Petal(a,f,b,e,c,d){this.stretchA=a;this.stretchB=f;this.startAngle=b;this.angle=e;this.bloom=d;this.growFactor=c;this.r=1;this.isfinished=false}Petal.prototype={draw:function(){var a=this.bloom.garden.ctx;var e,d,c,b;e=new Vector(0,this.r).rotate(Garden.degrad(this.startAngle));d=e.clone().rotate(Garden.degrad(this.angle));c=e.clone().mult(this.stretchA);b=d.clone().mult(this.stretchB);a.strokeStyle=this.bloom.c;a.beginPath();a.moveTo(e.x,e.y);a.bezierCurveTo(c.x,c.y,b.x,b.y,d.x,d.y);a.stroke()},render:function(){if(this.r"},{"title":"","date":"2020-01-19T12:26:43.252Z","updated":"2017-07-04T01:51:55.000Z","comments":true,"path":"iloveyouhn/jscss/jquery-1.7.1.min.js","permalink":"http://yoursite.com/iloveyouhn/jscss/jquery-1.7.1.min.js","excerpt":"","text":"天气真好啊~ 首页 互联网事 信息技术 产品设计 交互体验 移动开发 所有随笔 历史今日 微言微语 相册 好人会激怒人的理性，而坏人则会引发人的想象力。 //定义hi.css var htcss=\"http://www.duocoo.com/hi/hi.css\"; //定义歌曲数组 var CrazyMusic=[ \"http://www.duocoo.com/content/templates/BYMT/hi/music/xiaopingguo.mp3\", \"http://www.duocoo.com/content/templates/BYMT/hi/music/NOBODY.mp3\", \"http://www.duocoo.com/content/templates/BYMT/hi/music/jnStyle.mp3\", \"http://www.duocoo.com/content/templates/BYMT/hi/music/Arale.mp3\" ]; //监听到ESC或鼠标双击动作，将停止所有效果 function KeyMonitor() { if (event.keyCode == 27) {stopCrazy()}; } $(document).bind(\"dblclick\",stopCrazy); $(document).bind(\"onkeydown \",KeyMonitor); 请允许我做一个悲伤的表情 您访问的页面不小心被系统酱玩(bù)丢(cún)了(zài)！ The requested URL was not found on the server. 如果您是手动输入，请检查您的输入是否正确，然后再F5一次！ If you entered the URL manually please check your spelling and try again. 错误 404 (url::HTTP://WWW.DUOCOO.COM/INDEX.PHP)：就是找不到鸟你来咬我啊 &copy; 2012-2014 All Rights Reserved Powered by emlog Theme by BYMT jQuery(function() { jQuery(\".thumbnail img,.context p img\").lazyload({ placeholder:\"http://www.duocoo.com/content/templates/BYMT/images/image-pending.gif\", effect:\"fadeIn\" }); }); prettyPrint(); var jiathis_config = {data_track_clickback:'true'};"},{"title":"","date":"2020-01-19T12:26:43.254Z","updated":"2020-01-18T06:13:34.899Z","comments":true,"path":"iloveyouhn/twojscss/default.css","permalink":"http://yoursite.com/iloveyouhn/twojscss/default.css","excerpt":"","text":"body{margin:0;padding:0;background:#ffe;font-size:12px;overflow:auto}#mainDiv{width:100%;height:100%}#loveHeart{float:left;width:670px;height:625px}#garden{width:100%;height:100%}#elapseClock{text-align:right;font-size:18px;margin-top:10px;margin-bottom:10px}#words{font-family:\"sans-serif\";width:500px;font-size:24px;color:#666}#messages{display:none}#elapseClock .digit{font-family:\"digit\";font-size:36px}#loveu{padding:5px;font-size:22px;margin-top:80px;margin-right:120px;text-align:right;display:none}#loveu .signature{margin-top:10px;font-size:20px;font-style:italic}#clickSound{display:none}#code{float:left;width:440px;height:400px;color:#333;font-family:\"Consolas\",\"Monaco\",\"Bitstream Vera Sans Mono\",\"Courier New\",\"sans-serif\";font-size:15px;line-height:1.5}#code .string{color:#2a36ff}#code .keyword{color:#7f0055;font-weight:bold}#code .placeholder{margin-left:15px}#code .space{margin-left:17px}#code .myspance{color: #f51a04;}#code .comments{color:#0a0a0a}#code .twocomments{ font-size: 25px; color: #cc2818; } #copyright{margin-top:10px;text-align:center;width:100%;color:#666}#errorMsg{width:100%;text-align:center;font-size:24px;position:absolute;top:100px;left:0}#copyright a{color:#666}"},{"title":"","date":"2020-01-19T12:26:43.254Z","updated":"2017-07-04T01:51:55.000Z","comments":true,"path":"iloveyouhn/jscss/tao.js","permalink":"http://yoursite.com/iloveyouhn/jscss/tao.js","excerpt":"","text":"// JavaScript Document var object = new Array(); nbfm = 60; var xm = 0; var ym = 9999; var nx = 0; var ny = 0; function movbulb(){ with (this) { if(ec < 20){ if(Math.abs(x0 - xm) < 100 && Math.abs(y0 - ym) < 100){ xx = (xm - x0) / 8; yy = (ym - y0) / 8; ec++; } } xx *= 0.99; yy *= 0.99; x0 = Math.round(x0 + Math.cos(y0 / 15) * p) + xx; y0+= yy - v; if(y0 < -h * 2 || x0 < -w * 2 || x0 > nx + w * 2){ y0 = ny + N + h * 2; x0 = nx/2-100 + Math.random() * 100; ec = 0; } obj.style.top = y0 - h; obj.style.left = x0 - w; } } function CObj(N,img,w,h){ this.obj = document.createElement(\"img\"); this.obj.src = img.src; this.obj.style.position = \"fixed\"; this.obj.style.left = -1000; document.body.appendChild(this.obj); this.N = N; this.x0 = 0; this.y0 = -1000; this.v = 1 + Math.round((80 / h) * Math.random()); this.p = 1 + Math.round((w / 8) * Math.random()); this.xx = 0; this.yy = 0; this.ec = 0; this.w = w; this.h = h; this.movbulb = movbulb; } function resize(){ nx = document.body.offsetWidth; ny = document.body.offsetHeight; } onresize = resize; document.onmousemove = function(e){ if (window.event) e = window.event; xm = document.body.scrollLeft+(e.x || e.clientX); ym = document.body.scrollTop+(e.y || e.clientY); } function run(){ for(i in object)object[i].movbulb(); setTimeout(run, 16); } onload = function() { PIC = document.getElementById(\"bubbles\").getElementsByTagName(\"img\"); resize(); for(nbf=0;nbf"},{"title":"","date":"2020-01-19T12:26:43.254Z","updated":"2017-07-04T01:51:55.000Z","comments":true,"path":"iloveyouhn/twojscss/default_dev.css","permalink":"http://yoursite.com/iloveyouhn/twojscss/default_dev.css","excerpt":"","text":"body { margin: 0; padding: 0; background: #FFFFEE; font-size: 12px; overflow: auto; } #mainDiv{ width: 100%; height: 100%; } #loveHeart { float: left; width:670px; height:625px; } #garden { width: 100%; height: 100%; } #elapseClock { text-align: right; font-size: 18px; margin-top: 10px; margin-bottom: 10px; } #words { font-family: \"sans-serif\"; width: 500px; font-size: 24px; color:#666; } #messages{ display: none; } #elapseClock .digit{ font-family: \"digit\"; font-size: 36px; } #loveu{ padding: 5px; font-size: 22px; margin-top: 80px; margin-right: 120px; text-align: right; display: none; } #loveu .signature{ margin-top: 10px; font-size: 20px; font-style: italic; } #clickSound{ display:none; } #code { float: left; width: 440px; height: 400px; color: #333; font-family: \"Consolas\", \"Monaco\", \"Bitstream Vera Sans Mono\", \"Courier New\", \"sans-serif\"; font-size: 15px; line-height: 1.5; } #code .string{ color: #2a36ff; } #code .keyword{ color: #7f0055; font-weight:bold; } #code .placeholder{ margin-left:15px; } #code .space{ margin-left:7px; } #code .comments{ color: #3f7f5f; } #copyright{ margin-top: 10px; text-align: center; width:100%; color:#666; } #errorMsg{ width: 100%; text-align: center; font-size: 24px; position: absolute; top: 100px; left:0px; } #copyright a{ color:#666; }"},{"title":"","date":"2020-01-19T12:26:43.255Z","updated":"2017-07-04T01:51:55.000Z","comments":true,"path":"iloveyouhn/twojscss/functions.js","permalink":"http://yoursite.com/iloveyouhn/twojscss/functions.js","excerpt":"","text":"var $window=$(window),gardenCtx,gardenCanvas,$garden,garden;var clientWidth=$(window).width();var clientHeight=$(window).height();$(function(){$loveHeart=$(\"#loveHeart\");var a=$loveHeart.width()/2;var b=$loveHeart.height()/2-55;$garden=$(\"#garden\");gardenCanvas=$garden[0];gardenCanvas.width=$(\"#loveHeart\").width();gardenCanvas.height=$(\"#loveHeart\").height();gardenCtx=gardenCanvas.getContext(\"2d\");gardenCtx.globalCompositeOperation=\"lighter\";garden=new Garden(gardenCtx,gardenCanvas);$(\"#content\").css(\"width\",$loveHeart.width()+$(\"#code\").width());$(\"#content\").css(\"height\",Math.max($loveHeart.height(),$(\"#code\").height()));$(\"#content\").css(\"margin-top\",Math.max(($window.height()-$(\"#content\").height())/2,10));$(\"#content\").css(\"margin-left\",Math.max(($window.width()-$(\"#content\").width())/2,10));setInterval(function(){garden.render()},Garden.options.growSpeed)});$(window).resize(function(){var b=$(window).width();var a=$(window).height();if(b!=clientWidth&&a!=clientHeight){location.replace(location)}});function getHeartPoint(c){var b=c/Math.PI;var a=19.5*(16*Math.pow(Math.sin(b),3));var d=-20*(13*Math.cos(b)-5*Math.cos(2*b)-2*Math.cos(3*b)-Math.cos(4*b));return new Array(offsetX+a,offsetY+d)}function startHeartAnimation(){var c=50;var d=10;var b=new Array();var a=setInterval(function(){var h=getHeartPoint(d);var e=true;for(var f=0;f=c.length){clearInterval(e)}},75)});return this}})(jQuery);function timeElapse(c){var e=Date();var f=(Date.parse(e)-Date.parse(c))/1000;var g=Math.floor(f/(3600*24));f=f%(3600*24);var b=Math.floor(f/3600);if(b"},{"title":"","date":"2020-01-19T12:26:43.255Z","updated":"2017-07-04T01:51:55.000Z","comments":true,"path":"iloveyouhn/twojscss/functions_dev.js","permalink":"http://yoursite.com/iloveyouhn/twojscss/functions_dev.js","excerpt":"","text":"// variables var $window = $(window), gardenCtx, gardenCanvas, $garden, garden; var clientWidth = $(window).width(); var clientHeight = $(window).height(); $(function () { // setup garden $loveHeart = $(\"#loveHeart\"); var offsetX = $loveHeart.width() / 2; var offsetY = $loveHeart.height() / 2 - 55; $garden = $(\"#garden\"); gardenCanvas = $garden[0]; gardenCanvas.width = $(\"#loveHeart\").width(); gardenCanvas.height = $(\"#loveHeart\").height() gardenCtx = gardenCanvas.getContext(\"2d\"); gardenCtx.globalCompositeOperation = \"lighter\"; garden = new Garden(gardenCtx, gardenCanvas); $(\"#content\").css(\"width\", $loveHeart.width() + $(\"#code\").width()); $(\"#content\").css(\"height\", Math.max($loveHeart.height(), $(\"#code\").height())); $(\"#content\").css(\"margin-top\", Math.max(($window.height() - $(\"#content\").height()) / 2, 10)); $(\"#content\").css(\"margin-left\", Math.max(($window.width() - $(\"#content\").width()) / 2, 10)); // renderLoop setInterval(function () { garden.render(); }, Garden.options.growSpeed); }); $(window).resize(function() { var newWidth = $(window).width(); var newHeight = $(window).height(); if (newWidth != clientWidth && newHeight != clientHeight) { location.replace(location); } }); function getHeartPoint(angle) { var t = angle / Math.PI; var x = 19.5 * (16 * Math.pow(Math.sin(t), 3)); var y = - 20 * (13 * Math.cos(t) - 5 * Math.cos(2 * t) - 2 * Math.cos(3 * t) - Math.cos(4 * t)); return new Array(offsetX + x, offsetY + y); } function startHeartAnimation() { var interval = 50; var angle = 10; var heart = new Array(); var animationTimer = setInterval(function () { var bloom = getHeartPoint(angle); var draw = true; for (var i = 0; i < heart.length; i++) { var p = heart[i]; var distance = Math.sqrt(Math.pow(p[0] - bloom[0], 2) + Math.pow(p[1] - bloom[1], 2)); if (distance < Garden.options.bloomRadius.max * 1.3) { draw = false; break; } } if (draw) { heart.push(bloom); garden.createRandomBloom(bloom[0], bloom[1]); } if (angle >= 30) { clearInterval(animationTimer); showMessages(); } else { angle += 0.2; } }, interval); } (function($) { $.fn.typewriter = function() { this.each(function() { var $ele = $(this), str = $ele.html(), progress = 0; $ele.html(''); var timer = setInterval(function() { var current = str.substr(progress, 1); if (current == '', progress) + 1; } else { progress++; } $ele.html(str.substring(0, progress) + (progress & 1 ? '_' : '')); if (progress >= str.length) { clearInterval(timer); } }, 75); }); return this; }; })(jQuery); function timeElapse(date){ var current = Date(); var seconds = (Date.parse(current) - Date.parse(date)) / 1000; var days = Math.floor(seconds / (3600 * 24)); seconds = seconds % (3600 * 24); var hours = Math.floor(seconds / 3600); if (hours < 10) { hours = \"0\" + hours; } seconds = seconds % 3600; var minutes = Math.floor(seconds / 60); if (minutes < 10) { minutes = \"0\" + minutes; } seconds = seconds % 60; if (seconds < 10) { seconds = \"0\" + seconds; } var result = \"\" + days + \" days \" + hours + \" hours \" + minutes + \" minutes \" + seconds + \" seconds\"; $(\"#elapseClock\").html(result); } function showMessages() { adjustWordsPosition(); $('#messages').fadeIn(5000, function() { showLoveU(); }); } function adjustWordsPosition() { $('#words').css(\"position\", \"absolute\"); $('#words').css(\"top\", $(\"#garden\").position().top + 195); $('#words').css(\"left\", $(\"#garden\").position().left + 70); } function adjustCodePosition() { $('#code').css(\"margin-top\", ($(\"#garden\").height() - $(\"#code\").height()) / 2); } function showLoveU() { $('#loveu').fadeIn(3000); }"},{"title":"","date":"2020-01-19T12:26:43.256Z","updated":"2017-07-04T01:51:55.000Z","comments":true,"path":"iloveyouhn/twojscss/garden.js","permalink":"http://yoursite.com/iloveyouhn/twojscss/garden.js","excerpt":"","text":"function Vector(a,b){this.x=a;this.y=b}Vector.prototype={rotate:function(b){var a=this.x;var c=this.y;this.x=Math.cos(b)*a-Math.sin(b)*c;this.y=Math.sin(b)*a+Math.cos(b)*c;return this},mult:function(a){this.x*=a;this.y*=a;return this},clone:function(){return new Vector(this.x,this.y)},length:function(){return Math.sqrt(this.x*this.x+this.y*this.y)},subtract:function(a){this.x-=a.x;this.y-=a.y;return this},set:function(a,b){this.x=a;this.y=b;return this}};function Petal(a,f,b,e,c,d){this.stretchA=a;this.stretchB=f;this.startAngle=b;this.angle=e;this.bloom=d;this.growFactor=c;this.r=1;this.isfinished=false}Petal.prototype={draw:function(){var a=this.bloom.garden.ctx;var e,d,c,b;e=new Vector(0,this.r).rotate(Garden.degrad(this.startAngle));d=e.clone().rotate(Garden.degrad(this.angle));c=e.clone().mult(this.stretchA);b=d.clone().mult(this.stretchB);a.strokeStyle=this.bloom.c;a.beginPath();a.moveTo(e.x,e.y);a.bezierCurveTo(c.x,c.y,b.x,b.y,d.x,d.y);a.stroke()},render:function(){if(this.r"},{"title":"","date":"2020-01-19T12:26:43.256Z","updated":"2017-07-04T01:51:55.000Z","comments":true,"path":"iloveyouhn/twojscss/garden_dev.js","permalink":"http://yoursite.com/iloveyouhn/twojscss/garden_dev.js","excerpt":"","text":"function Vector(x, y) { this.x = x; this.y = y; }; Vector.prototype = { rotate: function (theta) { var x = this.x; var y = this.y; this.x = Math.cos(theta) * x - Math.sin(theta) * y; this.y = Math.sin(theta) * x + Math.cos(theta) * y; return this; }, mult: function (f) { this.x *= f; this.y *= f; return this; }, clone: function () { return new Vector(this.x, this.y); }, length: function () { return Math.sqrt(this.x * this.x + this.y * this.y); }, subtract: function (v) { this.x -= v.x; this.y -= v.y; return this; }, set: function (x, y) { this.x = x; this.y = y; return this; } }; function Petal(stretchA, stretchB, startAngle, angle, growFactor, bloom) { this.stretchA = stretchA; this.stretchB = stretchB; this.startAngle = startAngle; this.angle = angle; this.bloom = bloom; this.growFactor = growFactor; this.r = 1; this.isfinished = false; //this.tanAngleA = Garden.random(-Garden.degrad(Garden.options.tanAngle), Garden.degrad(Garden.options.tanAngle)); //this.tanAngleB = Garden.random(-Garden.degrad(Garden.options.tanAngle), Garden.degrad(Garden.options.tanAngle)); } Petal.prototype = { draw: function () { var ctx = this.bloom.garden.ctx; var v1, v2, v3, v4; v1 = new Vector(0, this.r).rotate(Garden.degrad(this.startAngle)); v2 = v1.clone().rotate(Garden.degrad(this.angle)); v3 = v1.clone().mult(this.stretchA); //.rotate(this.tanAngleA); v4 = v2.clone().mult(this.stretchB); //.rotate(this.tanAngleB); ctx.strokeStyle = this.bloom.c; ctx.beginPath(); ctx.moveTo(v1.x, v1.y); ctx.bezierCurveTo(v3.x, v3.y, v4.x, v4.y, v2.x, v2.y); ctx.stroke(); }, render: function () { if (this.r"},{"title":"","date":"2020-01-19T12:26:43.252Z","updated":"2017-07-04T01:51:55.000Z","comments":true,"path":"iloveyouhn/jscss/jquery.js","permalink":"http://yoursite.com/iloveyouhn/jscss/jquery.js","excerpt":"","text":"/*! * jQuery JavaScript Library v1.4.2 * http://jquery.com/ * Download by http://www.codefans.net * Copyright 2010, John Resig * Dual licensed under the MIT or GPL Version 2 licenses. * http://jquery.org/license * * Includes Sizzle.js * http://sizzlejs.com/ * Copyright 2010, The Dojo Foundation * Released under the MIT, BSD, and GPL Licenses. * * Date: Sat Feb 13 22:33:48 2010 -0500 */ (function(A,w){function ma(){if(!c.isReady){try{s.documentElement.doScroll(\"left\")}catch(a){setTimeout(ma,1);return}c.ready()}}function Qa(a,b){b.src?c.ajax({url:b.src,async:false,dataType:\"script\"}):c.globalEval(b.text||b.textContent||b.innerHTML||\"\");b.parentNode&&b.parentNode.removeChild(b)}function X(a,b,d,f,e,j){var i=a.length;if(typeof b===\"object\"){for(var o in b)X(a,o,b[o],f,e,d);return a}if(d!==w){f=!j&&f&&c.isFunction(d);for(o=0;o"},{"title":"","date":"2020-01-19T12:26:43.253Z","updated":"2017-07-04T01:51:55.000Z","comments":true,"path":"iloveyouhn/jscss/jquery.min.js","permalink":"http://yoursite.com/iloveyouhn/jscss/jquery.min.js","excerpt":"","text":"/*! jQuery v1.9.1 | (c) 2005, 2012 jQuery Foundation, Inc. | jquery.org/license //@ sourceMappingURL=jquery.min.map */(function(e,t){var n,r,i=typeof t,o=e.document,a=e.location,s=e.jQuery,u=e.$,l={},c=[],p=\"1.9.1\",f=c.concat,d=c.push,h=c.slice,g=c.indexOf,m=l.toString,y=l.hasOwnProperty,v=p.trim,b=function(e,t){return new b.fn.init(e,t,r)},x=/[+-]?(?:\\d*\\.|)\\d+(?:[eE][+-]?\\d+|)/.source,w=/\\S+/g,T=/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g,N=/^(?:()[^>]*|#([\\w-]*))$/,C=/^(?:|)$/,k=/^[\\],:{}\\s]*$/,E=/(?:^|:|,)(?:\\s*\\[)+/g,S=/\\\\(?:[\"\\\\\\/bfnrt]|u[\\da-fA-F]{4})/g,A=/\"[^\"\\\\\\r\\n]*\"|true|false|null|-?(?:\\d+\\.|)\\d+(?:[eE][+-]?\\d+|)/g,j=/^-ms-/,D=/-([\\da-z])/gi,L=function(e,t){return t.toUpperCase()},H=function(e){(o.addEventListener||\"load\"===e.type||\"complete\"===o.readyState)&&(q(),b.ready())},q=function(){o.addEventListener?(o.removeEventListener(\"DOMContentLoaded\",H,!1),e.removeEventListener(\"load\",H,!1)):(o.detachEvent(\"onreadystatechange\",H),e.detachEvent(\"onload\",H))};b.fn=b.prototype={jquery:p,constructor:b,init:function(e,n,r){var i,a;if(!e)return this;if(\"string\"==typeof e){if(i=\"\"===e.charAt(e.length-1)&&e.length>=3?[null,e,null]:N.exec(e),!i||!i[1]&&n)return!n||n.jquery?(n||r).find(e):this.constructor(n).find(e);if(i[1]){if(n=n instanceof b?n[0]:n,b.merge(this,b.parseHTML(i[1],n&&n.nodeType?n.ownerDocument||n:o,!0)),C.test(i[1])&&b.isPlainObject(n))for(i in n)b.isFunction(this[i])?this[i](n[i]):this.attr(i,n[i]);return this}if(a=o.getElementById(i[2]),a&&a.parentNode){if(a.id!==i[2])return r.find(e);this.length=1,this[0]=a}return this.context=o,this.selector=e,this}return e.nodeType?(this.context=this[0]=e,this.length=1,this):b.isFunction(e)?r.ready(e):(e.selector!==t&&(this.selector=e.selector,this.context=e.context),b.makeArray(e,this))},selector:\"\",length:0,size:function(){return this.length},toArray:function(){return h.call(this)},get:function(e){return null==e?this.toArray():0>e?this[this.length+e]:this[e]},pushStack:function(e){var t=b.merge(this.constructor(),e);return t.prevObject=this,t.context=this.context,t},each:function(e,t){return b.each(this,e,t)},ready:function(e){return b.ready.promise().done(e),this},slice:function(){return this.pushStack(h.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,n=+e+(0>e?t:0);return this.pushStack(n>=0&&t>n?[this[n]]:[])},map:function(e){return this.pushStack(b.map(this,function(t,n){return e.call(t,n,t)}))},end:function(){return this.prevObject||this.constructor(null)},push:d,sort:[].sort,splice:[].splice},b.fn.init.prototype=b.fn,b.extend=b.fn.extend=function(){var e,n,r,i,o,a,s=arguments[0]||{},u=1,l=arguments.length,c=!1;for(\"boolean\"==typeof s&&(c=s,s=arguments[1]||{},u=2),\"object\"==typeof s||b.isFunction(s)||(s={}),l===u&&(s=this,--u);l>u;u++)if(null!=(o=arguments[u]))for(i in o)e=s[i],r=o[i],s!==r&&(c&&r&&(b.isPlainObject(r)||(n=b.isArray(r)))?(n?(n=!1,a=e&&b.isArray(e)?e:[]):a=e&&b.isPlainObject(e)?e:{},s[i]=b.extend(c,a,r)):r!==t&&(s[i]=r));return s},b.extend({noConflict:function(t){return e.$===b&&(e.$=u),t&&e.jQuery===b&&(e.jQuery=s),b},isReady:!1,readyWait:1,holdReady:function(e){e?b.readyWait++:b.ready(!0)},ready:function(e){if(e===!0?!--b.readyWait:!b.isReady){if(!o.body)return setTimeout(b.ready);b.isReady=!0,e!==!0&&--b.readyWait>0||(n.resolveWith(o,[b]),b.fn.trigger&&b(o).trigger(\"ready\").off(\"ready\"))}},isFunction:function(e){return\"function\"===b.type(e)},isArray:Array.isArray||function(e){return\"array\"===b.type(e)},isWindow:function(e){return null!=e&&e==e.window},isNumeric:function(e){return!isNaN(parseFloat(e))&&isFinite(e)},type:function(e){return null==e?e+\"\":\"object\"==typeof e||\"function\"==typeof e?l[m.call(e)]||\"object\":typeof e},isPlainObject:function(e){if(!e||\"object\"!==b.type(e)||e.nodeType||b.isWindow(e))return!1;try{if(e.constructor&&!y.call(e,\"constructor\")&&!y.call(e.constructor.prototype,\"isPrototypeOf\"))return!1}catch(n){return!1}var r;for(r in e);return r===t||y.call(e,r)},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},error:function(e){throw Error(e)},parseHTML:function(e,t,n){if(!e||\"string\"!=typeof e)return null;\"boolean\"==typeof t&&(n=t,t=!1),t=t||o;var r=C.exec(e),i=!n&&[];return r?[t.createElement(r[1])]:(r=b.buildFragment([e],t,i),i&&b(i).remove(),b.merge([],r.childNodes))},parseJSON:function(n){return e.JSON&&e.JSON.parse?e.JSON.parse(n):null===n?n:\"string\"==typeof n&&(n=b.trim(n),n&&k.test(n.replace(S,\"@\").replace(A,\"]\").replace(E,\"\")))?Function(\"return \"+n)():(b.error(\"Invalid JSON: \"+n),t)},parseXML:function(n){var r,i;if(!n||\"string\"!=typeof n)return null;try{e.DOMParser?(i=new DOMParser,r=i.parseFromString(n,\"text/xml\")):(r=new ActiveXObject(\"Microsoft.XMLDOM\"),r.async=\"false\",r.loadXML(n))}catch(o){r=t}return r&&r.documentElement&&!r.getElementsByTagName(\"parsererror\").length||b.error(\"Invalid XML: \"+n),r},noop:function(){},globalEval:function(t){t&&b.trim(t)&&(e.execScript||function(t){e.eval.call(e,t)})(t)},camelCase:function(e){return e.replace(j,\"ms-\").replace(D,L)},nodeName:function(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()},each:function(e,t,n){var r,i=0,o=e.length,a=M(e);if(n){if(a){for(;o>i;i++)if(r=t.apply(e[i],n),r===!1)break}else for(i in e)if(r=t.apply(e[i],n),r===!1)break}else if(a){for(;o>i;i++)if(r=t.call(e[i],i,e[i]),r===!1)break}else for(i in e)if(r=t.call(e[i],i,e[i]),r===!1)break;return e},trim:v&&!v.call(\"\\ufeff\\u00a0\")?function(e){return null==e?\"\":v.call(e)}:function(e){return null==e?\"\":(e+\"\").replace(T,\"\")},makeArray:function(e,t){var n=t||[];return null!=e&&(M(Object(e))?b.merge(n,\"string\"==typeof e?[e]:e):d.call(n,e)),n},inArray:function(e,t,n){var r;if(t){if(g)return g.call(t,e,n);for(r=t.length,n=n?0>n?Math.max(0,r+n):n:0;r>n;n++)if(n in t&&t[n]===e)return n}return-1},merge:function(e,n){var r=n.length,i=e.length,o=0;if(\"number\"==typeof r)for(;r>o;o++)e[i++]=n[o];else while(n[o]!==t)e[i++]=n[o++];return e.length=i,e},grep:function(e,t,n){var r,i=[],o=0,a=e.length;for(n=!!n;a>o;o++)r=!!t(e[o],o),n!==r&&i.push(e[o]);return i},map:function(e,t,n){var r,i=0,o=e.length,a=M(e),s=[];if(a)for(;o>i;i++)r=t(e[i],i,n),null!=r&&(s[s.length]=r);else for(i in e)r=t(e[i],i,n),null!=r&&(s[s.length]=r);return f.apply([],s)},guid:1,proxy:function(e,n){var r,i,o;return\"string\"==typeof n&&(o=e[n],n=e,e=o),b.isFunction(e)?(r=h.call(arguments,2),i=function(){return e.apply(n||this,r.concat(h.call(arguments)))},i.guid=e.guid=e.guid||b.guid++,i):t},access:function(e,n,r,i,o,a,s){var u=0,l=e.length,c=null==r;if(\"object\"===b.type(r)){o=!0;for(u in r)b.access(e,n,u,r[u],!0,a,s)}else if(i!==t&&(o=!0,b.isFunction(i)||(s=!0),c&&(s?(n.call(e,i),n=null):(c=n,n=function(e,t,n){return c.call(b(e),n)})),n))for(;l>u;u++)n(e[u],r,s?i:i.call(e[u],u,n(e[u],r)));return o?e:c?n.call(e):l?n(e[0],r):a},now:function(){return(new Date).getTime()}}),b.ready.promise=function(t){if(!n)if(n=b.Deferred(),\"complete\"===o.readyState)setTimeout(b.ready);else if(o.addEventListener)o.addEventListener(\"DOMContentLoaded\",H,!1),e.addEventListener(\"load\",H,!1);else{o.attachEvent(\"onreadystatechange\",H),e.attachEvent(\"onload\",H);var r=!1;try{r=null==e.frameElement&&o.documentElement}catch(i){}r&&r.doScroll&&function a(){if(!b.isReady){try{r.doScroll(\"left\")}catch(e){return setTimeout(a,50)}q(),b.ready()}}()}return n.promise(t)},b.each(\"Boolean Number String Function Array Date RegExp Object Error\".split(\" \"),function(e,t){l[\"[object \"+t+\"]\"]=t.toLowerCase()});function M(e){var t=e.length,n=b.type(e);return b.isWindow(e)?!1:1===e.nodeType&&t?!0:\"array\"===n||\"function\"!==n&&(0===t||\"number\"==typeof t&&t>0&&t-1 in e)}r=b(o);var _={};function F(e){var t=_[e]={};return b.each(e.match(w)||[],function(e,n){t[n]=!0}),t}b.Callbacks=function(e){e=\"string\"==typeof e?_[e]||F(e):b.extend({},e);var n,r,i,o,a,s,u=[],l=!e.once&&[],c=function(t){for(r=e.memory&&t,i=!0,a=s||0,s=0,o=u.length,n=!0;u&&o>a;a++)if(u[a].apply(t[0],t[1])===!1&&e.stopOnFalse){r=!1;break}n=!1,u&&(l?l.length&&c(l.shift()):r?u=[]:p.disable())},p={add:function(){if(u){var t=u.length;(function i(t){b.each(t,function(t,n){var r=b.type(n);\"function\"===r?e.unique&&p.has(n)||u.push(n):n&&n.length&&\"string\"!==r&&i(n)})})(arguments),n?o=u.length:r&&(s=t,c(r))}return this},remove:function(){return u&&b.each(arguments,function(e,t){var r;while((r=b.inArray(t,u,r))>-1)u.splice(r,1),n&&(o>=r&&o--,a>=r&&a--)}),this},has:function(e){return e?b.inArray(e,u)>-1:!(!u||!u.length)},empty:function(){return u=[],this},disable:function(){return u=l=r=t,this},disabled:function(){return!u},lock:function(){return l=t,r||p.disable(),this},locked:function(){return!l},fireWith:function(e,t){return t=t||[],t=[e,t.slice?t.slice():t],!u||i&&!l||(n?l.push(t):c(t)),this},fire:function(){return p.fireWith(this,arguments),this},fired:function(){return!!i}};return p},b.extend({Deferred:function(e){var t=[[\"resolve\",\"done\",b.Callbacks(\"once memory\"),\"resolved\"],[\"reject\",\"fail\",b.Callbacks(\"once memory\"),\"rejected\"],[\"notify\",\"progress\",b.Callbacks(\"memory\")]],n=\"pending\",r={state:function(){return n},always:function(){return i.done(arguments).fail(arguments),this},then:function(){var e=arguments;return b.Deferred(function(n){b.each(t,function(t,o){var a=o[0],s=b.isFunction(e[t])&&e[t];i[o[1]](function(){var e=s&&s.apply(this,arguments);e&&b.isFunction(e.promise)?e.promise().done(n.resolve).fail(n.reject).progress(n.notify):n[a+\"With\"](this===r?n.promise():this,s?[e]:arguments)})}),e=null}).promise()},promise:function(e){return null!=e?b.extend(e,r):r}},i={};return r.pipe=r.then,b.each(t,function(e,o){var a=o[2],s=o[3];r[o[1]]=a.add,s&&a.add(function(){n=s},t[1^e][2].disable,t[2][2].lock),i[o[0]]=function(){return i[o[0]+\"With\"](this===i?r:this,arguments),this},i[o[0]+\"With\"]=a.fireWith}),r.promise(i),e&&e.call(i,i),i},when:function(e){var t=0,n=h.call(arguments),r=n.length,i=1!==r||e&&b.isFunction(e.promise)?r:0,o=1===i?e:b.Deferred(),a=function(e,t,n){return function(r){t[e]=this,n[e]=arguments.length>1?h.call(arguments):r,n===s?o.notifyWith(t,n):--i||o.resolveWith(t,n)}},s,u,l;if(r>1)for(s=Array(r),u=Array(r),l=Array(r);r>t;t++)n[t]&&b.isFunction(n[t].promise)?n[t].promise().done(a(t,l,n)).fail(o.reject).progress(a(t,u,s)):--i;return i||o.resolveWith(l,n),o.promise()}}),b.support=function(){var t,n,r,a,s,u,l,c,p,f,d=o.createElement(\"div\");if(d.setAttribute(\"className\",\"t\"),d.innerHTML=\" a\",n=d.getElementsByTagName(\"*\"),r=d.getElementsByTagName(\"a\")[0],!n||!r||!n.length)return{};s=o.createElement(\"select\"),l=s.appendChild(o.createElement(\"option\")),a=d.getElementsByTagName(\"input\")[0],r.style.cssText=\"top:1px;float:left;opacity:.5\",t={getSetAttribute:\"t\"!==d.className,leadingWhitespace:3===d.firstChild.nodeType,tbody:!d.getElementsByTagName(\"tbody\").length,htmlSerialize:!!d.getElementsByTagName(\"link\").length,style:/top/.test(r.getAttribute(\"style\")),hrefNormalized:\"/a\"===r.getAttribute(\"href\"),opacity:/^0.5/.test(r.style.opacity),cssFloat:!!r.style.cssFloat,checkOn:!!a.value,optSelected:l.selected,enctype:!!o.createElement(\"form\").enctype,html5Clone:\"\"!==o.createElement(\"nav\").cloneNode(!0).outerHTML,boxModel:\"CSS1Compat\"===o.compatMode,deleteExpando:!0,noCloneEvent:!0,inlineBlockNeedsLayout:!1,shrinkWrapBlocks:!1,reliableMarginRight:!0,boxSizingReliable:!0,pixelPosition:!1},a.checked=!0,t.noCloneChecked=a.cloneNode(!0).checked,s.disabled=!0,t.optDisabled=!l.disabled;try{delete d.test}catch(h){t.deleteExpando=!1}a=o.createElement(\"input\"),a.setAttribute(\"value\",\"\"),t.input=\"\"===a.getAttribute(\"value\"),a.value=\"t\",a.setAttribute(\"type\",\"radio\"),t.radioValue=\"t\"===a.value,a.setAttribute(\"checked\",\"t\"),a.setAttribute(\"name\",\"t\"),u=o.createDocumentFragment(),u.appendChild(a),t.appendChecked=a.checked,t.checkClone=u.cloneNode(!0).cloneNode(!0).lastChild.checked,d.attachEvent&&(d.attachEvent(\"onclick\",function(){t.noCloneEvent=!1}),d.cloneNode(!0).click());for(f in{submit:!0,change:!0,focusin:!0})d.setAttribute(c=\"on\"+f,\"t\"),t[f+\"Bubbles\"]=c in e||d.attributes[c].expando===!1;return d.style.backgroundClip=\"content-box\",d.cloneNode(!0).style.backgroundClip=\"\",t.clearCloneStyle=\"content-box\"===d.style.backgroundClip,b(function(){var n,r,a,s=\"padding:0;margin:0;border:0;display:block;box-sizing:content-box;-moz-box-sizing:content-box;-webkit-box-sizing:content-box;\",u=o.getElementsByTagName(\"body\")[0];u&&(n=o.createElement(\"div\"),n.style.cssText=\"border:0;width:0;height:0;position:absolute;top:0;left:-9999px;margin-top:1px\",u.appendChild(n).appendChild(d),d.innerHTML=\"t\",a=d.getElementsByTagName(\"td\"),a[0].style.cssText=\"padding:0;margin:0;border:0;display:none\",p=0===a[0].offsetHeight,a[0].style.display=\"\",a[1].style.display=\"none\",t.reliableHiddenOffsets=p&&0===a[0].offsetHeight,d.innerHTML=\"\",d.style.cssText=\"box-sizing:border-box;-moz-box-sizing:border-box;-webkit-box-sizing:border-box;padding:1px;border:1px;display:block;width:4px;margin-top:1%;position:absolute;top:1%;\",t.boxSizing=4===d.offsetWidth,t.doesNotIncludeMarginInBodyOffset=1!==u.offsetTop,e.getComputedStyle&&(t.pixelPosition=\"1%\"!==(e.getComputedStyle(d,null)||{}).top,t.boxSizingReliable=\"4px\"===(e.getComputedStyle(d,null)||{width:\"4px\"}).width,r=d.appendChild(o.createElement(\"div\")),r.style.cssText=d.style.cssText=s,r.style.marginRight=r.style.width=\"0\",d.style.width=\"1px\",t.reliableMarginRight=!parseFloat((e.getComputedStyle(r,null)||{}).marginRight)),typeof d.style.zoom!==i&&(d.innerHTML=\"\",d.style.cssText=s+\"width:1px;padding:1px;display:inline;zoom:1\",t.inlineBlockNeedsLayout=3===d.offsetWidth,d.style.display=\"block\",d.innerHTML=\"\",d.firstChild.style.width=\"5px\",t.shrinkWrapBlocks=3!==d.offsetWidth,t.inlineBlockNeedsLayout&&(u.style.zoom=1)),u.removeChild(n),n=d=a=r=null)}),n=s=u=l=r=a=null,t}();var O=/(?:\\{[\\s\\S]*\\}|\\[[\\s\\S]*\\])$/,B=/([A-Z])/g;function P(e,n,r,i){if(b.acceptData(e)){var o,a,s=b.expando,u=\"string\"==typeof n,l=e.nodeType,p=l?b.cache:e,f=l?e[s]:e[s]&&s;if(f&&p[f]&&(i||p[f].data)||!u||r!==t)return f||(l?e[s]=f=c.pop()||b.guid++:f=s),p[f]||(p[f]={},l||(p[f].toJSON=b.noop)),(\"object\"==typeof n||\"function\"==typeof n)&&(i?p[f]=b.extend(p[f],n):p[f].data=b.extend(p[f].data,n)),o=p[f],i||(o.data||(o.data={}),o=o.data),r!==t&&(o[b.camelCase(n)]=r),u?(a=o[n],null==a&&(a=o[b.camelCase(n)])):a=o,a}}function R(e,t,n){if(b.acceptData(e)){var r,i,o,a=e.nodeType,s=a?b.cache:e,u=a?e[b.expando]:b.expando;if(s[u]){if(t&&(o=n?s[u]:s[u].data)){b.isArray(t)?t=t.concat(b.map(t,b.camelCase)):t in o?t=[t]:(t=b.camelCase(t),t=t in o?[t]:t.split(\" \"));for(r=0,i=t.length;i>r;r++)delete o[t[r]];if(!(n?$:b.isEmptyObject)(o))return}(n||(delete s[u].data,$(s[u])))&&(a?b.cleanData([e],!0):b.support.deleteExpando||s!=s.window?delete s[u]:s[u]=null)}}}b.extend({cache:{},expando:\"jQuery\"+(p+Math.random()).replace(/\\D/g,\"\"),noData:{embed:!0,object:\"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000\",applet:!0},hasData:function(e){return e=e.nodeType?b.cache[e[b.expando]]:e[b.expando],!!e&&!$(e)},data:function(e,t,n){return P(e,t,n)},removeData:function(e,t){return R(e,t)},_data:function(e,t,n){return P(e,t,n,!0)},_removeData:function(e,t){return R(e,t,!0)},acceptData:function(e){if(e.nodeType&&1!==e.nodeType&&9!==e.nodeType)return!1;var t=e.nodeName&&b.noData[e.nodeName.toLowerCase()];return!t||t!==!0&&e.getAttribute(\"classid\")===t}}),b.fn.extend({data:function(e,n){var r,i,o=this[0],a=0,s=null;if(e===t){if(this.length&&(s=b.data(o),1===o.nodeType&&!b._data(o,\"parsedAttrs\"))){for(r=o.attributes;r.length>a;a++)i=r[a].name,i.indexOf(\"data-\")||(i=b.camelCase(i.slice(5)),W(o,i,s[i]));b._data(o,\"parsedAttrs\",!0)}return s}return\"object\"==typeof e?this.each(function(){b.data(this,e)}):b.access(this,function(n){return n===t?o?W(o,e,b.data(o,e)):null:(this.each(function(){b.data(this,e,n)}),t)},null,n,arguments.length>1,null,!0)},removeData:function(e){return this.each(function(){b.removeData(this,e)})}});function W(e,n,r){if(r===t&&1===e.nodeType){var i=\"data-\"+n.replace(B,\"-$1\").toLowerCase();if(r=e.getAttribute(i),\"string\"==typeof r){try{r=\"true\"===r?!0:\"false\"===r?!1:\"null\"===r?null:+r+\"\"===r?+r:O.test(r)?b.parseJSON(r):r}catch(o){}b.data(e,n,r)}else r=t}return r}function $(e){var t;for(t in e)if((\"data\"!==t||!b.isEmptyObject(e[t]))&&\"toJSON\"!==t)return!1;return!0}b.extend({queue:function(e,n,r){var i;return e?(n=(n||\"fx\")+\"queue\",i=b._data(e,n),r&&(!i||b.isArray(r)?i=b._data(e,n,b.makeArray(r)):i.push(r)),i||[]):t},dequeue:function(e,t){t=t||\"fx\";var n=b.queue(e,t),r=n.length,i=n.shift(),o=b._queueHooks(e,t),a=function(){b.dequeue(e,t)};\"inprogress\"===i&&(i=n.shift(),r--),o.cur=i,i&&(\"fx\"===t&&n.unshift(\"inprogress\"),delete o.stop,i.call(e,a,o)),!r&&o&&o.empty.fire()},_queueHooks:function(e,t){var n=t+\"queueHooks\";return b._data(e,n)||b._data(e,n,{empty:b.Callbacks(\"once memory\").add(function(){b._removeData(e,t+\"queue\"),b._removeData(e,n)})})}}),b.fn.extend({queue:function(e,n){var r=2;return\"string\"!=typeof e&&(n=e,e=\"fx\",r--),r>arguments.length?b.queue(this[0],e):n===t?this:this.each(function(){var t=b.queue(this,e,n);b._queueHooks(this,e),\"fx\"===e&&\"inprogress\"!==t[0]&&b.dequeue(this,e)})},dequeue:function(e){return this.each(function(){b.dequeue(this,e)})},delay:function(e,t){return e=b.fx?b.fx.speeds[e]||e:e,t=t||\"fx\",this.queue(t,function(t,n){var r=setTimeout(t,e);n.stop=function(){clearTimeout(r)}})},clearQueue:function(e){return this.queue(e||\"fx\",[])},promise:function(e,n){var r,i=1,o=b.Deferred(),a=this,s=this.length,u=function(){--i||o.resolveWith(a,[a])};\"string\"!=typeof e&&(n=e,e=t),e=e||\"fx\";while(s--)r=b._data(a[s],e+\"queueHooks\"),r&&r.empty&&(i++,r.empty.add(u));return u(),o.promise(n)}});var I,z,X=/[\\t\\r\\n]/g,U=/\\r/g,V=/^(?:input|select|textarea|button|object)$/i,Y=/^(?:a|area)$/i,J=/^(?:checked|selected|autofocus|autoplay|async|controls|defer|disabled|hidden|loop|multiple|open|readonly|required|scoped)$/i,G=/^(?:checked|selected)$/i,Q=b.support.getSetAttribute,K=b.support.input;b.fn.extend({attr:function(e,t){return b.access(this,b.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each(function(){b.removeAttr(this,e)})},prop:function(e,t){return b.access(this,b.prop,e,t,arguments.length>1)},removeProp:function(e){return e=b.propFix[e]||e,this.each(function(){try{this[e]=t,delete this[e]}catch(n){}})},addClass:function(e){var t,n,r,i,o,a=0,s=this.length,u=\"string\"==typeof e&&e;if(b.isFunction(e))return this.each(function(t){b(this).addClass(e.call(this,t,this.className))});if(u)for(t=(e||\"\").match(w)||[];s>a;a++)if(n=this[a],r=1===n.nodeType&&(n.className?(\" \"+n.className+\" \").replace(X,\" \"):\" \")){o=0;while(i=t[o++])0>r.indexOf(\" \"+i+\" \")&&(r+=i+\" \");n.className=b.trim(r)}return this},removeClass:function(e){var t,n,r,i,o,a=0,s=this.length,u=0===arguments.length||\"string\"==typeof e&&e;if(b.isFunction(e))return this.each(function(t){b(this).removeClass(e.call(this,t,this.className))});if(u)for(t=(e||\"\").match(w)||[];s>a;a++)if(n=this[a],r=1===n.nodeType&&(n.className?(\" \"+n.className+\" \").replace(X,\" \"):\"\")){o=0;while(i=t[o++])while(r.indexOf(\" \"+i+\" \")>=0)r=r.replace(\" \"+i+\" \",\" \");n.className=e?b.trim(r):\"\"}return this},toggleClass:function(e,t){var n=typeof e,r=\"boolean\"==typeof t;return b.isFunction(e)?this.each(function(n){b(this).toggleClass(e.call(this,n,this.className,t),t)}):this.each(function(){if(\"string\"===n){var o,a=0,s=b(this),u=t,l=e.match(w)||[];while(o=l[a++])u=r?u:!s.hasClass(o),s[u?\"addClass\":\"removeClass\"](o)}else(n===i||\"boolean\"===n)&&(this.className&&b._data(this,\"__className__\",this.className),this.className=this.className||e===!1?\"\":b._data(this,\"__className__\")||\"\")})},hasClass:function(e){var t=\" \"+e+\" \",n=0,r=this.length;for(;r>n;n++)if(1===this[n].nodeType&&(\" \"+this[n].className+\" \").replace(X,\" \").indexOf(t)>=0)return!0;return!1},val:function(e){var n,r,i,o=this[0];{if(arguments.length)return i=b.isFunction(e),this.each(function(n){var o,a=b(this);1===this.nodeType&&(o=i?e.call(this,n,a.val()):e,null==o?o=\"\":\"number\"==typeof o?o+=\"\":b.isArray(o)&&(o=b.map(o,function(e){return null==e?\"\":e+\"\"})),r=b.valHooks[this.type]||b.valHooks[this.nodeName.toLowerCase()],r&&\"set\"in r&&r.set(this,o,\"value\")!==t||(this.value=o))});if(o)return r=b.valHooks[o.type]||b.valHooks[o.nodeName.toLowerCase()],r&&\"get\"in r&&(n=r.get(o,\"value\"))!==t?n:(n=o.value,\"string\"==typeof n?n.replace(U,\"\"):null==n?\"\":n)}}}),b.extend({valHooks:{option:{get:function(e){var t=e.attributes.value;return!t||t.specified?e.value:e.text}},select:{get:function(e){var t,n,r=e.options,i=e.selectedIndex,o=\"select-one\"===e.type||0>i,a=o?null:[],s=o?i+1:r.length,u=0>i?s:o?i:0;for(;s>u;u++)if(n=r[u],!(!n.selected&&u!==i||(b.support.optDisabled?n.disabled:null!==n.getAttribute(\"disabled\"))||n.parentNode.disabled&&b.nodeName(n.parentNode,\"optgroup\"))){if(t=b(n).val(),o)return t;a.push(t)}return a},set:function(e,t){var n=b.makeArray(t);return b(e).find(\"option\").each(function(){this.selected=b.inArray(b(this).val(),n)>=0}),n.length||(e.selectedIndex=-1),n}}},attr:function(e,n,r){var o,a,s,u=e.nodeType;if(e&&3!==u&&8!==u&&2!==u)return typeof e.getAttribute===i?b.prop(e,n,r):(a=1!==u||!b.isXMLDoc(e),a&&(n=n.toLowerCase(),o=b.attrHooks[n]||(J.test(n)?z:I)),r===t?o&&a&&\"get\"in o&&null!==(s=o.get(e,n))?s:(typeof e.getAttribute!==i&&(s=e.getAttribute(n)),null==s?t:s):null!==r?o&&a&&\"set\"in o&&(s=o.set(e,r,n))!==t?s:(e.setAttribute(n,r+\"\"),r):(b.removeAttr(e,n),t))},removeAttr:function(e,t){var n,r,i=0,o=t&&t.match(w);if(o&&1===e.nodeType)while(n=o[i++])r=b.propFix[n]||n,J.test(n)?!Q&&G.test(n)?e[b.camelCase(\"default-\"+n)]=e[r]=!1:e[r]=!1:b.attr(e,n,\"\"),e.removeAttribute(Q?n:r)},attrHooks:{type:{set:function(e,t){if(!b.support.radioValue&&\"radio\"===t&&b.nodeName(e,\"input\")){var n=e.value;return e.setAttribute(\"type\",t),n&&(e.value=n),t}}}},propFix:{tabindex:\"tabIndex\",readonly:\"readOnly\",\"for\":\"htmlFor\",\"class\":\"className\",maxlength:\"maxLength\",cellspacing:\"cellSpacing\",cellpadding:\"cellPadding\",rowspan:\"rowSpan\",colspan:\"colSpan\",usemap:\"useMap\",frameborder:\"frameBorder\",contenteditable:\"contentEditable\"},prop:function(e,n,r){var i,o,a,s=e.nodeType;if(e&&3!==s&&8!==s&&2!==s)return a=1!==s||!b.isXMLDoc(e),a&&(n=b.propFix[n]||n,o=b.propHooks[n]),r!==t?o&&\"set\"in o&&(i=o.set(e,r,n))!==t?i:e[n]=r:o&&\"get\"in o&&null!==(i=o.get(e,n))?i:e[n]},propHooks:{tabIndex:{get:function(e){var n=e.getAttributeNode(\"tabindex\");return n&&n.specified?parseInt(n.value,10):V.test(e.nodeName)||Y.test(e.nodeName)&&e.href?0:t}}}}),z={get:function(e,n){var r=b.prop(e,n),i=\"boolean\"==typeof r&&e.getAttribute(n),o=\"boolean\"==typeof r?K&&Q?null!=i:G.test(n)?e[b.camelCase(\"default-\"+n)]:!!i:e.getAttributeNode(n);return o&&o.value!==!1?n.toLowerCase():t},set:function(e,t,n){return t===!1?b.removeAttr(e,n):K&&Q||!G.test(n)?e.setAttribute(!Q&&b.propFix[n]||n,n):e[b.camelCase(\"default-\"+n)]=e[n]=!0,n}},K&&Q||(b.attrHooks.value={get:function(e,n){var r=e.getAttributeNode(n);return b.nodeName(e,\"input\")?e.defaultValue:r&&r.specified?r.value:t},set:function(e,n,r){return b.nodeName(e,\"input\")?(e.defaultValue=n,t):I&&I.set(e,n,r)}}),Q||(I=b.valHooks.button={get:function(e,n){var r=e.getAttributeNode(n);return r&&(\"id\"===n||\"name\"===n||\"coords\"===n?\"\"!==r.value:r.specified)?r.value:t},set:function(e,n,r){var i=e.getAttributeNode(r);return i||e.setAttributeNode(i=e.ownerDocument.createAttribute(r)),i.value=n+=\"\",\"value\"===r||n===e.getAttribute(r)?n:t}},b.attrHooks.contenteditable={get:I.get,set:function(e,t,n){I.set(e,\"\"===t?!1:t,n)}},b.each([\"width\",\"height\"],function(e,n){b.attrHooks[n]=b.extend(b.attrHooks[n],{set:function(e,r){return\"\"===r?(e.setAttribute(n,\"auto\"),r):t}})})),b.support.hrefNormalized||(b.each([\"href\",\"src\",\"width\",\"height\"],function(e,n){b.attrHooks[n]=b.extend(b.attrHooks[n],{get:function(e){var r=e.getAttribute(n,2);return null==r?t:r}})}),b.each([\"href\",\"src\"],function(e,t){b.propHooks[t]={get:function(e){return e.getAttribute(t,4)}}})),b.support.style||(b.attrHooks.style={get:function(e){return e.style.cssText||t},set:function(e,t){return e.style.cssText=t+\"\"}}),b.support.optSelected||(b.propHooks.selected=b.extend(b.propHooks.selected,{get:function(e){var t=e.parentNode;return t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex),null}})),b.support.enctype||(b.propFix.enctype=\"encoding\"),b.support.checkOn||b.each([\"radio\",\"checkbox\"],function(){b.valHooks[this]={get:function(e){return null===e.getAttribute(\"value\")?\"on\":e.value}}}),b.each([\"radio\",\"checkbox\"],function(){b.valHooks[this]=b.extend(b.valHooks[this],{set:function(e,n){return b.isArray(n)?e.checked=b.inArray(b(e).val(),n)>=0:t}})});var Z=/^(?:input|select|textarea)$/i,et=/^key/,tt=/^(?:mouse|contextmenu)|click/,nt=/^(?:focusinfocus|focusoutblur)$/,rt=/^([^.]*)(?:\\.(.+)|)$/;function it(){return!0}function ot(){return!1}b.event={global:{},add:function(e,n,r,o,a){var s,u,l,c,p,f,d,h,g,m,y,v=b._data(e);if(v){r.handler&&(c=r,r=c.handler,a=c.selector),r.guid||(r.guid=b.guid++),(u=v.events)||(u=v.events={}),(f=v.handle)||(f=v.handle=function(e){return typeof b===i||e&&b.event.triggered===e.type?t:b.event.dispatch.apply(f.elem,arguments)},f.elem=e),n=(n||\"\").match(w)||[\"\"],l=n.length;while(l--)s=rt.exec(n[l])||[],g=y=s[1],m=(s[2]||\"\").split(\".\").sort(),p=b.event.special[g]||{},g=(a?p.delegateType:p.bindType)||g,p=b.event.special[g]||{},d=b.extend({type:g,origType:y,data:o,handler:r,guid:r.guid,selector:a,needsContext:a&&b.expr.match.needsContext.test(a),namespace:m.join(\".\")},c),(h=u[g])||(h=u[g]=[],h.delegateCount=0,p.setup&&p.setup.call(e,o,m,f)!==!1||(e.addEventListener?e.addEventListener(g,f,!1):e.attachEvent&&e.attachEvent(\"on\"+g,f))),p.add&&(p.add.call(e,d),d.handler.guid||(d.handler.guid=r.guid)),a?h.splice(h.delegateCount++,0,d):h.push(d),b.event.global[g]=!0;e=null}},remove:function(e,t,n,r,i){var o,a,s,u,l,c,p,f,d,h,g,m=b.hasData(e)&&b._data(e);if(m&&(c=m.events)){t=(t||\"\").match(w)||[\"\"],l=t.length;while(l--)if(s=rt.exec(t[l])||[],d=g=s[1],h=(s[2]||\"\").split(\".\").sort(),d){p=b.event.special[d]||{},d=(r?p.delegateType:p.bindType)||d,f=c[d]||[],s=s[2]&&RegExp(\"(^|\\\\.)\"+h.join(\"\\\\.(?:.*\\\\.|)\")+\"(\\\\.|$)\"),u=o=f.length;while(o--)a=f[o],!i&&g!==a.origType||n&&n.guid!==a.guid||s&&!s.test(a.namespace)||r&&r!==a.selector&&(\"**\"!==r||!a.selector)||(f.splice(o,1),a.selector&&f.delegateCount--,p.remove&&p.remove.call(e,a));u&&!f.length&&(p.teardown&&p.teardown.call(e,h,m.handle)!==!1||b.removeEvent(e,d,m.handle),delete c[d])}else for(d in c)b.event.remove(e,d+t[l],n,r,!0);b.isEmptyObject(c)&&(delete m.handle,b._removeData(e,\"events\"))}},trigger:function(n,r,i,a){var s,u,l,c,p,f,d,h=[i||o],g=y.call(n,\"type\")?n.type:n,m=y.call(n,\"namespace\")?n.namespace.split(\".\"):[];if(l=f=i=i||o,3!==i.nodeType&&8!==i.nodeType&&!nt.test(g+b.event.triggered)&&(g.indexOf(\".\")>=0&&(m=g.split(\".\"),g=m.shift(),m.sort()),u=0>g.indexOf(\":\")&&\"on\"+g,n=n[b.expando]?n:new b.Event(g,\"object\"==typeof n&&n),n.isTrigger=!0,n.namespace=m.join(\".\"),n.namespace_re=n.namespace?RegExp(\"(^|\\\\.)\"+m.join(\"\\\\.(?:.*\\\\.|)\")+\"(\\\\.|$)\"):null,n.result=t,n.target||(n.target=i),r=null==r?[n]:b.makeArray(r,[n]),p=b.event.special[g]||{},a||!p.trigger||p.trigger.apply(i,r)!==!1)){if(!a&&!p.noBubble&&!b.isWindow(i)){for(c=p.delegateType||g,nt.test(c+g)||(l=l.parentNode);l;l=l.parentNode)h.push(l),f=l;f===(i.ownerDocument||o)&&h.push(f.defaultView||f.parentWindow||e)}d=0;while((l=h[d++])&&!n.isPropagationStopped())n.type=d>1?c:p.bindType||g,s=(b._data(l,\"events\")||{})[n.type]&&b._data(l,\"handle\"),s&&s.apply(l,r),s=u&&l[u],s&&b.acceptData(l)&&s.apply&&s.apply(l,r)===!1&&n.preventDefault();if(n.type=g,!(a||n.isDefaultPrevented()||p._default&&p._default.apply(i.ownerDocument,r)!==!1||\"click\"===g&&b.nodeName(i,\"a\")||!b.acceptData(i)||!u||!i[g]||b.isWindow(i))){f=i[u],f&&(i[u]=null),b.event.triggered=g;try{i[g]()}catch(v){}b.event.triggered=t,f&&(i[u]=f)}return n.result}},dispatch:function(e){e=b.event.fix(e);var n,r,i,o,a,s=[],u=h.call(arguments),l=(b._data(this,\"events\")||{})[e.type]||[],c=b.event.special[e.type]||{};if(u[0]=e,e.delegateTarget=this,!c.preDispatch||c.preDispatch.call(this,e)!==!1){s=b.event.handlers.call(this,e,l),n=0;while((o=s[n++])&&!e.isPropagationStopped()){e.currentTarget=o.elem,a=0;while((i=o.handlers[a++])&&!e.isImmediatePropagationStopped())(!e.namespace_re||e.namespace_re.test(i.namespace))&&(e.handleObj=i,e.data=i.data,r=((b.event.special[i.origType]||{}).handle||i.handler).apply(o.elem,u),r!==t&&(e.result=r)===!1&&(e.preventDefault(),e.stopPropagation()))}return c.postDispatch&&c.postDispatch.call(this,e),e.result}},handlers:function(e,n){var r,i,o,a,s=[],u=n.delegateCount,l=e.target;if(u&&l.nodeType&&(!e.button||\"click\"!==e.type))for(;l!=this;l=l.parentNode||this)if(1===l.nodeType&&(l.disabled!==!0||\"click\"!==e.type)){for(o=[],a=0;u>a;a++)i=n[a],r=i.selector+\" \",o[r]===t&&(o[r]=i.needsContext?b(r,this).index(l)>=0:b.find(r,this,null,[l]).length),o[r]&&o.push(i);o.length&&s.push({elem:l,handlers:o})}return n.length>u&&s.push({elem:this,handlers:n.slice(u)}),s},fix:function(e){if(e[b.expando])return e;var t,n,r,i=e.type,a=e,s=this.fixHooks[i];s||(this.fixHooks[i]=s=tt.test(i)?this.mouseHooks:et.test(i)?this.keyHooks:{}),r=s.props?this.props.concat(s.props):this.props,e=new b.Event(a),t=r.length;while(t--)n=r[t],e[n]=a[n];return e.target||(e.target=a.srcElement||o),3===e.target.nodeType&&(e.target=e.target.parentNode),e.metaKey=!!e.metaKey,s.filter?s.filter(e,a):e},props:\"altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which\".split(\" \"),fixHooks:{},keyHooks:{props:\"char charCode key keyCode\".split(\" \"),filter:function(e,t){return null==e.which&&(e.which=null!=t.charCode?t.charCode:t.keyCode),e}},mouseHooks:{props:\"button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement\".split(\" \"),filter:function(e,n){var r,i,a,s=n.button,u=n.fromElement;return null==e.pageX&&null!=n.clientX&&(i=e.target.ownerDocument||o,a=i.documentElement,r=i.body,e.pageX=n.clientX+(a&&a.scrollLeft||r&&r.scrollLeft||0)-(a&&a.clientLeft||r&&r.clientLeft||0),e.pageY=n.clientY+(a&&a.scrollTop||r&&r.scrollTop||0)-(a&&a.clientTop||r&&r.clientTop||0)),!e.relatedTarget&&u&&(e.relatedTarget=u===e.target?n.toElement:u),e.which||s===t||(e.which=1&s?1:2&s?3:4&s?2:0),e}},special:{load:{noBubble:!0},click:{trigger:function(){return b.nodeName(this,\"input\")&&\"checkbox\"===this.type&&this.click?(this.click(),!1):t}},focus:{trigger:function(){if(this!==o.activeElement&&this.focus)try{return this.focus(),!1}catch(e){}},delegateType:\"focusin\"},blur:{trigger:function(){return this===o.activeElement&&this.blur?(this.blur(),!1):t},delegateType:\"focusout\"},beforeunload:{postDispatch:function(e){e.result!==t&&(e.originalEvent.returnValue=e.result)}}},simulate:function(e,t,n,r){var i=b.extend(new b.Event,n,{type:e,isSimulated:!0,originalEvent:{}});r?b.event.trigger(i,null,t):b.event.dispatch.call(t,i),i.isDefaultPrevented()&&n.preventDefault()}},b.removeEvent=o.removeEventListener?function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n,!1)}:function(e,t,n){var r=\"on\"+t;e.detachEvent&&(typeof e[r]===i&&(e[r]=null),e.detachEvent(r,n))},b.Event=function(e,n){return this instanceof b.Event?(e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||e.returnValue===!1||e.getPreventDefault&&e.getPreventDefault()?it:ot):this.type=e,n&&b.extend(this,n),this.timeStamp=e&&e.timeStamp||b.now(),this[b.expando]=!0,t):new b.Event(e,n)},b.Event.prototype={isDefaultPrevented:ot,isPropagationStopped:ot,isImmediatePropagationStopped:ot,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=it,e&&(e.preventDefault?e.preventDefault():e.returnValue=!1)},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=it,e&&(e.stopPropagation&&e.stopPropagation(),e.cancelBubble=!0)},stopImmediatePropagation:function(){this.isImmediatePropagationStopped=it,this.stopPropagation()}},b.each({mouseenter:\"mouseover\",mouseleave:\"mouseout\"},function(e,t){b.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,r=this,i=e.relatedTarget,o=e.handleObj; return(!i||i!==r&&!b.contains(r,i))&&(e.type=o.origType,n=o.handler.apply(this,arguments),e.type=t),n}}}),b.support.submitBubbles||(b.event.special.submit={setup:function(){return b.nodeName(this,\"form\")?!1:(b.event.add(this,\"click._submit keypress._submit\",function(e){var n=e.target,r=b.nodeName(n,\"input\")||b.nodeName(n,\"button\")?n.form:t;r&&!b._data(r,\"submitBubbles\")&&(b.event.add(r,\"submit._submit\",function(e){e._submit_bubble=!0}),b._data(r,\"submitBubbles\",!0))}),t)},postDispatch:function(e){e._submit_bubble&&(delete e._submit_bubble,this.parentNode&&!e.isTrigger&&b.event.simulate(\"submit\",this.parentNode,e,!0))},teardown:function(){return b.nodeName(this,\"form\")?!1:(b.event.remove(this,\"._submit\"),t)}}),b.support.changeBubbles||(b.event.special.change={setup:function(){return Z.test(this.nodeName)?((\"checkbox\"===this.type||\"radio\"===this.type)&&(b.event.add(this,\"propertychange._change\",function(e){\"checked\"===e.originalEvent.propertyName&&(this._just_changed=!0)}),b.event.add(this,\"click._change\",function(e){this._just_changed&&!e.isTrigger&&(this._just_changed=!1),b.event.simulate(\"change\",this,e,!0)})),!1):(b.event.add(this,\"beforeactivate._change\",function(e){var t=e.target;Z.test(t.nodeName)&&!b._data(t,\"changeBubbles\")&&(b.event.add(t,\"change._change\",function(e){!this.parentNode||e.isSimulated||e.isTrigger||b.event.simulate(\"change\",this.parentNode,e,!0)}),b._data(t,\"changeBubbles\",!0))}),t)},handle:function(e){var n=e.target;return this!==n||e.isSimulated||e.isTrigger||\"radio\"!==n.type&&\"checkbox\"!==n.type?e.handleObj.handler.apply(this,arguments):t},teardown:function(){return b.event.remove(this,\"._change\"),!Z.test(this.nodeName)}}),b.support.focusinBubbles||b.each({focus:\"focusin\",blur:\"focusout\"},function(e,t){var n=0,r=function(e){b.event.simulate(t,e.target,b.event.fix(e),!0)};b.event.special[t]={setup:function(){0===n++&&o.addEventListener(e,r,!0)},teardown:function(){0===--n&&o.removeEventListener(e,r,!0)}}}),b.fn.extend({on:function(e,n,r,i,o){var a,s;if(\"object\"==typeof e){\"string\"!=typeof n&&(r=r||n,n=t);for(a in e)this.on(a,n,r,e[a],o);return this}if(null==r&&null==i?(i=n,r=n=t):null==i&&(\"string\"==typeof n?(i=r,r=t):(i=r,r=n,n=t)),i===!1)i=ot;else if(!i)return this;return 1===o&&(s=i,i=function(e){return b().off(e),s.apply(this,arguments)},i.guid=s.guid||(s.guid=b.guid++)),this.each(function(){b.event.add(this,e,i,r,n)})},one:function(e,t,n,r){return this.on(e,t,n,r,1)},off:function(e,n,r){var i,o;if(e&&e.preventDefault&&e.handleObj)return i=e.handleObj,b(e.delegateTarget).off(i.namespace?i.origType+\".\"+i.namespace:i.origType,i.selector,i.handler),this;if(\"object\"==typeof e){for(o in e)this.off(o,n,e[o]);return this}return(n===!1||\"function\"==typeof n)&&(r=n,n=t),r===!1&&(r=ot),this.each(function(){b.event.remove(this,e,r,n)})},bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,r){return this.on(t,e,n,r)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,\"**\"):this.off(t,e||\"**\",n)},trigger:function(e,t){return this.each(function(){b.event.trigger(e,t,this)})},triggerHandler:function(e,n){var r=this[0];return r?b.event.trigger(e,n,r,!0):t}}),function(e,t){var n,r,i,o,a,s,u,l,c,p,f,d,h,g,m,y,v,x=\"sizzle\"+-new Date,w=e.document,T={},N=0,C=0,k=it(),E=it(),S=it(),A=typeof t,j=1+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\\\(\"+_+\"*((?:-\\\\d)?\\\\d*)\"+_+\"*\\\\)|)(?=[^-]|$)\",\"i\")},V=/[\\x20\\t\\r\\n\\f]*[+~]/,Y=/^[^{]+\\{\\s*\\[native code/,J=/^(?:#([\\w-]+)|(\\w+)|\\.([\\w-]+))$/,G=/^(?:input|select|textarea|button)$/i,Q=/^h\\d$/i,K=/'|\\\\/g,Z=/\\=[\\x20\\t\\r\\n\\f]*([^'\"\\]]*)[\\x20\\t\\r\\n\\f]*\\]/g,et=/\\\\([\\da-fA-F]{1,6}[\\x20\\t\\r\\n\\f]?|.)/g,tt=function(e,t){var n=\"0x\"+t-65536;return n!==n?t:0>n?String.fromCharCode(n+65536):String.fromCharCode(55296|n>>10,56320|1023&n)};try{q.call(w.documentElement.childNodes,0)[0].nodeType}catch(nt){q=function(e){var t,n=[];while(t=this[e++])n.push(t);return n}}function rt(e){return Y.test(e+\"\")}function it(){var e,t=[];return e=function(n,r){return t.push(n+=\" \")>i.cacheLength&&delete e[t.shift()],e[n]=r}}function ot(e){return e[x]=!0,e}function at(e){var t=p.createElement(\"div\");try{return e(t)}catch(n){return!1}finally{t=null}}function st(e,t,n,r){var i,o,a,s,u,l,f,g,m,v;if((t?t.ownerDocument||t:w)!==p&&c(t),t=t||p,n=n||[],!e||\"string\"!=typeof e)return n;if(1!==(s=t.nodeType)&&9!==s)return[];if(!d&&!r){if(i=J.exec(e))if(a=i[1]){if(9===s){if(o=t.getElementById(a),!o||!o.parentNode)return n;if(o.id===a)return n.push(o),n}else if(t.ownerDocument&&(o=t.ownerDocument.getElementById(a))&&y(t,o)&&o.id===a)return n.push(o),n}else{if(i[2])return H.apply(n,q.call(t.getElementsByTagName(e),0)),n;if((a=i[3])&&T.getByClassName&&t.getElementsByClassName)return H.apply(n,q.call(t.getElementsByClassName(a),0)),n}if(T.qsa&&!h.test(e)){if(f=!0,g=x,m=t,v=9===s&&e,1===s&&\"object\"!==t.nodeName.toLowerCase()){l=ft(e),(f=t.getAttribute(\"id\"))?g=f.replace(K,\"\\\\$&\"):t.setAttribute(\"id\",g),g=\"[id='\"+g+\"'] \",u=l.length;while(u--)l[u]=g+dt(l[u]);m=V.test(e)&&t.parentNode||t,v=l.join(\",\")}if(v)try{return H.apply(n,q.call(m.querySelectorAll(v),0)),n}catch(b){}finally{f||t.removeAttribute(\"id\")}}}return wt(e.replace(W,\"$1\"),t,n,r)}a=st.isXML=function(e){var t=e&&(e.ownerDocument||e).documentElement;return t?\"HTML\"!==t.nodeName:!1},c=st.setDocument=function(e){var n=e?e.ownerDocument||e:w;return n!==p&&9===n.nodeType&&n.documentElement?(p=n,f=n.documentElement,d=a(n),T.tagNameNoComments=at(function(e){return e.appendChild(n.createComment(\"\")),!e.getElementsByTagName(\"*\").length}),T.attributes=at(function(e){e.innerHTML=\"\";var t=typeof e.lastChild.getAttribute(\"multiple\");return\"boolean\"!==t&&\"string\"!==t}),T.getByClassName=at(function(e){return e.innerHTML=\"\",e.getElementsByClassName&&e.getElementsByClassName(\"e\").length?(e.lastChild.className=\"e\",2===e.getElementsByClassName(\"e\").length):!1}),T.getByName=at(function(e){e.id=x+0,e.innerHTML=\"\",f.insertBefore(e,f.firstChild);var t=n.getElementsByName&&n.getElementsByName(x).length===2+n.getElementsByName(x+0).length;return T.getIdNotName=!n.getElementById(x),f.removeChild(e),t}),i.attrHandle=at(function(e){return e.innerHTML=\"\",e.firstChild&&typeof e.firstChild.getAttribute!==A&&\"#\"===e.firstChild.getAttribute(\"href\")})?{}:{href:function(e){return e.getAttribute(\"href\",2)},type:function(e){return e.getAttribute(\"type\")}},T.getIdNotName?(i.find.ID=function(e,t){if(typeof t.getElementById!==A&&!d){var n=t.getElementById(e);return n&&n.parentNode?[n]:[]}},i.filter.ID=function(e){var t=e.replace(et,tt);return function(e){return e.getAttribute(\"id\")===t}}):(i.find.ID=function(e,n){if(typeof n.getElementById!==A&&!d){var r=n.getElementById(e);return r?r.id===e||typeof r.getAttributeNode!==A&&r.getAttributeNode(\"id\").value===e?[r]:t:[]}},i.filter.ID=function(e){var t=e.replace(et,tt);return function(e){var n=typeof e.getAttributeNode!==A&&e.getAttributeNode(\"id\");return n&&n.value===t}}),i.find.TAG=T.tagNameNoComments?function(e,n){return typeof n.getElementsByTagName!==A?n.getElementsByTagName(e):t}:function(e,t){var n,r=[],i=0,o=t.getElementsByTagName(e);if(\"*\"===e){while(n=o[i++])1===n.nodeType&&r.push(n);return r}return o},i.find.NAME=T.getByName&&function(e,n){return typeof n.getElementsByName!==A?n.getElementsByName(name):t},i.find.CLASS=T.getByClassName&&function(e,n){return typeof n.getElementsByClassName===A||d?t:n.getElementsByClassName(e)},g=[],h=[\":focus\"],(T.qsa=rt(n.querySelectorAll))&&(at(function(e){e.innerHTML=\"\",e.querySelectorAll(\"[selected]\").length||h.push(\"\\\\[\"+_+\"*(?:checked|disabled|ismap|multiple|readonly|selected|value)\"),e.querySelectorAll(\":checked\").length||h.push(\":checked\")}),at(function(e){e.innerHTML=\"\",e.querySelectorAll(\"[i^='']\").length&&h.push(\"[*^$]=\"+_+\"*(?:\\\"\\\"|'')\"),e.querySelectorAll(\":enabled\").length||h.push(\":enabled\",\":disabled\"),e.querySelectorAll(\"*,:x\"),h.push(\",.*:\")})),(T.matchesSelector=rt(m=f.matchesSelector||f.mozMatchesSelector||f.webkitMatchesSelector||f.oMatchesSelector||f.msMatchesSelector))&&at(function(e){T.disconnectedMatch=m.call(e,\"div\"),m.call(e,\"[s!='']:x\"),g.push(\"!=\",R)}),h=RegExp(h.join(\"|\")),g=RegExp(g.join(\"|\")),y=rt(f.contains)||f.compareDocumentPosition?function(e,t){var n=9===e.nodeType?e.documentElement:e,r=t&&t.parentNode;return e===r||!(!r||1!==r.nodeType||!(n.contains?n.contains(r):e.compareDocumentPosition&&16&e.compareDocumentPosition(r)))}:function(e,t){if(t)while(t=t.parentNode)if(t===e)return!0;return!1},v=f.compareDocumentPosition?function(e,t){var r;return e===t?(u=!0,0):(r=t.compareDocumentPosition&&e.compareDocumentPosition&&e.compareDocumentPosition(t))?1&r||e.parentNode&&11===e.parentNode.nodeType?e===n||y(w,e)?-1:t===n||y(w,t)?1:0:4&r?-1:1:e.compareDocumentPosition?-1:1}:function(e,t){var r,i=0,o=e.parentNode,a=t.parentNode,s=[e],l=[t];if(e===t)return u=!0,0;if(!o||!a)return e===n?-1:t===n?1:o?-1:a?1:0;if(o===a)return ut(e,t);r=e;while(r=r.parentNode)s.unshift(r);r=t;while(r=r.parentNode)l.unshift(r);while(s[i]===l[i])i++;return i?ut(s[i],l[i]):s[i]===w?-1:l[i]===w?1:0},u=!1,[0,0].sort(v),T.detectDuplicates=u,p):p},st.matches=function(e,t){return st(e,null,null,t)},st.matchesSelector=function(e,t){if((e.ownerDocument||e)!==p&&c(e),t=t.replace(Z,\"='$1']\"),!(!T.matchesSelector||d||g&&g.test(t)||h.test(t)))try{var n=m.call(e,t);if(n||T.disconnectedMatch||e.document&&11!==e.document.nodeType)return n}catch(r){}return st(t,p,null,[e]).length>0},st.contains=function(e,t){return(e.ownerDocument||e)!==p&&c(e),y(e,t)},st.attr=function(e,t){var n;return(e.ownerDocument||e)!==p&&c(e),d||(t=t.toLowerCase()),(n=i.attrHandle[t])?n(e):d||T.attributes?e.getAttribute(t):((n=e.getAttributeNode(t))||e.getAttribute(t))&&e[t]===!0?t:n&&n.specified?n.value:null},st.error=function(e){throw Error(\"Syntax error, unrecognized expression: \"+e)},st.uniqueSort=function(e){var t,n=[],r=1,i=0;if(u=!T.detectDuplicates,e.sort(v),u){for(;t=e[r];r++)t===e[r-1]&&(i=n.push(r));while(i--)e.splice(n[i],1)}return e};function ut(e,t){var n=t&&e,r=n&&(~t.sourceIndex||j)-(~e.sourceIndex||j);if(r)return r;if(n)while(n=n.nextSibling)if(n===t)return-1;return e?1:-1}function lt(e){return function(t){var n=t.nodeName.toLowerCase();return\"input\"===n&&t.type===e}}function ct(e){return function(t){var n=t.nodeName.toLowerCase();return(\"input\"===n||\"button\"===n)&&t.type===e}}function pt(e){return ot(function(t){return t=+t,ot(function(n,r){var i,o=e([],n.length,t),a=o.length;while(a--)n[i=o[a]]&&(n[i]=!(r[i]=n[i]))})})}o=st.getText=function(e){var t,n=\"\",r=0,i=e.nodeType;if(i){if(1===i||9===i||11===i){if(\"string\"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=o(e)}else if(3===i||4===i)return e.nodeValue}else for(;t=e[r];r++)n+=o(t);return n},i=st.selectors={cacheLength:50,createPseudo:ot,match:U,find:{},relative:{\">\":{dir:\"parentNode\",first:!0},\" \":{dir:\"parentNode\"},\"+\":{dir:\"previousSibling\",first:!0},\"~\":{dir:\"previousSibling\"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(et,tt),e[3]=(e[4]||e[5]||\"\").replace(et,tt),\"~=\"===e[2]&&(e[3]=\" \"+e[3]+\" \"),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),\"nth\"===e[1].slice(0,3)?(e[3]||st.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*(\"even\"===e[3]||\"odd\"===e[3])),e[5]=+(e[7]+e[8]||\"odd\"===e[3])):e[3]&&st.error(e[0]),e},PSEUDO:function(e){var t,n=!e[5]&&e[2];return U.CHILD.test(e[0])?null:(e[4]?e[2]=e[4]:n&&z.test(n)&&(t=ft(n,!0))&&(t=n.indexOf(\")\",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){return\"*\"===e?function(){return!0}:(e=e.replace(et,tt).toLowerCase(),function(t){return t.nodeName&&t.nodeName.toLowerCase()===e})},CLASS:function(e){var t=k[e+\" \"];return t||(t=RegExp(\"(^|\"+_+\")\"+e+\"(\"+_+\"|$)\"))&&k(e,function(e){return t.test(e.className||typeof e.getAttribute!==A&&e.getAttribute(\"class\")||\"\")})},ATTR:function(e,t,n){return function(r){var i=st.attr(r,e);return null==i?\"!=\"===t:t?(i+=\"\",\"=\"===t?i===n:\"!=\"===t?i!==n:\"^=\"===t?n&&0===i.indexOf(n):\"*=\"===t?n&&i.indexOf(n)>-1:\"$=\"===t?n&&i.slice(-n.length)===n:\"~=\"===t?(\" \"+i+\" \").indexOf(n)>-1:\"|=\"===t?i===n||i.slice(0,n.length+1)===n+\"-\":!1):!0}},CHILD:function(e,t,n,r,i){var o=\"nth\"!==e.slice(0,3),a=\"last\"!==e.slice(-4),s=\"of-type\"===t;return 1===r&&0===i?function(e){return!!e.parentNode}:function(t,n,u){var l,c,p,f,d,h,g=o!==a?\"nextSibling\":\"previousSibling\",m=t.parentNode,y=s&&t.nodeName.toLowerCase(),v=!u&&!s;if(m){if(o){while(g){p=t;while(p=p[g])if(s?p.nodeName.toLowerCase()===y:1===p.nodeType)return!1;h=g=\"only\"===e&&!h&&\"nextSibling\"}return!0}if(h=[a?m.firstChild:m.lastChild],a&&v){c=m[x]||(m[x]={}),l=c[e]||[],d=l[0]===N&&l[1],f=l[0]===N&&l[2],p=d&&m.childNodes[d];while(p=++d&&p&&p[g]||(f=d=0)||h.pop())if(1===p.nodeType&&++f&&p===t){c[e]=[N,d,f];break}}else if(v&&(l=(t[x]||(t[x]={}))[e])&&l[0]===N)f=l[1];else while(p=++d&&p&&p[g]||(f=d=0)||h.pop())if((s?p.nodeName.toLowerCase()===y:1===p.nodeType)&&++f&&(v&&((p[x]||(p[x]={}))[e]=[N,f]),p===t))break;return f-=i,f===r||0===f%r&&f/r>=0}}},PSEUDO:function(e,t){var n,r=i.pseudos[e]||i.setFilters[e.toLowerCase()]||st.error(\"unsupported pseudo: \"+e);return r[x]?r(t):r.length>1?(n=[e,e,\"\",t],i.setFilters.hasOwnProperty(e.toLowerCase())?ot(function(e,n){var i,o=r(e,t),a=o.length;while(a--)i=M.call(e,o[a]),e[i]=!(n[i]=o[a])}):function(e){return r(e,0,n)}):r}},pseudos:{not:ot(function(e){var t=[],n=[],r=s(e.replace(W,\"$1\"));return r[x]?ot(function(e,t,n,i){var o,a=r(e,null,i,[]),s=e.length;while(s--)(o=a[s])&&(e[s]=!(t[s]=o))}):function(e,i,o){return t[0]=e,r(t,null,o,n),!n.pop()}}),has:ot(function(e){return function(t){return st(e,t).length>0}}),contains:ot(function(e){return function(t){return(t.textContent||t.innerText||o(t)).indexOf(e)>-1}}),lang:ot(function(e){return X.test(e||\"\")||st.error(\"unsupported lang: \"+e),e=e.replace(et,tt).toLowerCase(),function(t){var n;do if(n=d?t.getAttribute(\"xml:lang\")||t.getAttribute(\"lang\"):t.lang)return n=n.toLowerCase(),n===e||0===n.indexOf(e+\"-\");while((t=t.parentNode)&&1===t.nodeType);return!1}}),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===f},focus:function(e){return e===p.activeElement&&(!p.hasFocus||p.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:function(e){return e.disabled===!1},disabled:function(e){return e.disabled===!0},checked:function(e){var t=e.nodeName.toLowerCase();return\"input\"===t&&!!e.checked||\"option\"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,e.selected===!0},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeName>\"@\"||3===e.nodeType||4===e.nodeType)return!1;return!0},parent:function(e){return!i.pseudos.empty(e)},header:function(e){return Q.test(e.nodeName)},input:function(e){return G.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return\"input\"===t&&\"button\"===e.type||\"button\"===t},text:function(e){var t;return\"input\"===e.nodeName.toLowerCase()&&\"text\"===e.type&&(null==(t=e.getAttribute(\"type\"))||t.toLowerCase()===e.type)},first:pt(function(){return[0]}),last:pt(function(e,t){return[t-1]}),eq:pt(function(e,t,n){return[0>n?n+t:n]}),even:pt(function(e,t){var n=0;for(;t>n;n+=2)e.push(n);return e}),odd:pt(function(e,t){var n=1;for(;t>n;n+=2)e.push(n);return e}),lt:pt(function(e,t,n){var r=0>n?n+t:n;for(;--r>=0;)e.push(r);return e}),gt:pt(function(e,t,n){var r=0>n?n+t:n;for(;t>++r;)e.push(r);return e})}};for(n in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})i.pseudos[n]=lt(n);for(n in{submit:!0,reset:!0})i.pseudos[n]=ct(n);function ft(e,t){var n,r,o,a,s,u,l,c=E[e+\" \"];if(c)return t?0:c.slice(0);s=e,u=[],l=i.preFilter;while(s){(!n||(r=$.exec(s)))&&(r&&(s=s.slice(r[0].length)||s),u.push(o=[])),n=!1,(r=I.exec(s))&&(n=r.shift(),o.push({value:n,type:r[0].replace(W,\" \")}),s=s.slice(n.length));for(a in i.filter)!(r=U[a].exec(s))||l[a]&&!(r=l[a](r))||(n=r.shift(),o.push({value:n,type:a,matches:r}),s=s.slice(n.length));if(!n)break}return t?s.length:s?st.error(e):E(e,u).slice(0)}function dt(e){var t=0,n=e.length,r=\"\";for(;n>t;t++)r+=e[t].value;return r}function ht(e,t,n){var i=t.dir,o=n&&\"parentNode\"===i,a=C++;return t.first?function(t,n,r){while(t=t[i])if(1===t.nodeType||o)return e(t,n,r)}:function(t,n,s){var u,l,c,p=N+\" \"+a;if(s){while(t=t[i])if((1===t.nodeType||o)&&e(t,n,s))return!0}else while(t=t[i])if(1===t.nodeType||o)if(c=t[x]||(t[x]={}),(l=c[i])&&l[0]===p){if((u=l[1])===!0||u===r)return u===!0}else if(l=c[i]=[p],l[1]=e(t,n,s)||r,l[1]===!0)return!0}}function gt(e){return e.length>1?function(t,n,r){var i=e.length;while(i--)if(!e[i](t,n,r))return!1;return!0}:e[0]}function mt(e,t,n,r,i){var o,a=[],s=0,u=e.length,l=null!=t;for(;u>s;s++)(o=e[s])&&(!n||n(o,r,i))&&(a.push(o),l&&t.push(s));return a}function yt(e,t,n,r,i,o){return r&&!r[x]&&(r=yt(r)),i&&!i[x]&&(i=yt(i,o)),ot(function(o,a,s,u){var l,c,p,f=[],d=[],h=a.length,g=o||xt(t||\"*\",s.nodeType?[s]:s,[]),m=!e||!o&&t?g:mt(g,f,e,s,u),y=n?i||(o?e:h||r)?[]:a:m;if(n&&n(m,y,s,u),r){l=mt(y,d),r(l,[],s,u),c=l.length;while(c--)(p=l[c])&&(y[d[c]]=!(m[d[c]]=p))}if(o){if(i||e){if(i){l=[],c=y.length;while(c--)(p=y[c])&&l.push(m[c]=p);i(null,y=[],l,u)}c=y.length;while(c--)(p=y[c])&&(l=i?M.call(o,p):f[c])>-1&&(o[l]=!(a[l]=p))}}else y=mt(y===a?y.splice(h,y.length):y),i?i(null,a,y,u):H.apply(a,y)})}function vt(e){var t,n,r,o=e.length,a=i.relative[e[0].type],s=a||i.relative[\" \"],u=a?1:0,c=ht(function(e){return e===t},s,!0),p=ht(function(e){return M.call(t,e)>-1},s,!0),f=[function(e,n,r){return!a&&(r||n!==l)||((t=n).nodeType?c(e,n,r):p(e,n,r))}];for(;o>u;u++)if(n=i.relative[e[u].type])f=[ht(gt(f),n)];else{if(n=i.filter[e[u].type].apply(null,e[u].matches),n[x]){for(r=++u;o>r;r++)if(i.relative[e[r].type])break;return yt(u>1&&gt(f),u>1&&dt(e.slice(0,u-1)).replace(W,\"$1\"),n,r>u&&vt(e.slice(u,r)),o>r&&vt(e=e.slice(r)),o>r&&dt(e))}f.push(n)}return gt(f)}function bt(e,t){var n=0,o=t.length>0,a=e.length>0,s=function(s,u,c,f,d){var h,g,m,y=[],v=0,b=\"0\",x=s&&[],w=null!=d,T=l,C=s||a&&i.find.TAG(\"*\",d&&u.parentNode||u),k=N+=null==T?1:Math.random()||.1;for(w&&(l=u!==p&&u,r=n);null!=(h=C[b]);b++){if(a&&h){g=0;while(m=e[g++])if(m(h,u,c)){f.push(h);break}w&&(N=k,r=++n)}o&&((h=!m&&h)&&v--,s&&x.push(h))}if(v+=b,o&&b!==v){g=0;while(m=t[g++])m(x,y,u,c);if(s){if(v>0)while(b--)x[b]||y[b]||(y[b]=L.call(f));y=mt(y)}H.apply(f,y),w&&!s&&y.length>0&&v+t.length>1&&st.uniqueSort(f)}return w&&(N=k,l=T),x};return o?ot(s):s}s=st.compile=function(e,t){var n,r=[],i=[],o=S[e+\" \"];if(!o){t||(t=ft(e)),n=t.length;while(n--)o=vt(t[n]),o[x]?r.push(o):i.push(o);o=S(e,bt(i,r))}return o};function xt(e,t,n){var r=0,i=t.length;for(;i>r;r++)st(e,t[r],n);return n}function wt(e,t,n,r){var o,a,u,l,c,p=ft(e);if(!r&&1===p.length){if(a=p[0]=p[0].slice(0),a.length>2&&\"ID\"===(u=a[0]).type&&9===t.nodeType&&!d&&i.relative[a[1].type]){if(t=i.find.ID(u.matches[0].replace(et,tt),t)[0],!t)return n;e=e.slice(a.shift().value.length)}o=U.needsContext.test(e)?0:a.length;while(o--){if(u=a[o],i.relative[l=u.type])break;if((c=i.find[l])&&(r=c(u.matches[0].replace(et,tt),V.test(a[0].type)&&t.parentNode||t))){if(a.splice(o,1),e=r.length&&dt(a),!e)return H.apply(n,q.call(r,0)),n;break}}}return s(e,p)(r,t,d,n,V.test(e)),n}i.pseudos.nth=i.pseudos.eq;function Tt(){}i.filters=Tt.prototype=i.pseudos,i.setFilters=new Tt,c(),st.attr=b.attr,b.find=st,b.expr=st.selectors,b.expr[\":\"]=b.expr.pseudos,b.unique=st.uniqueSort,b.text=st.getText,b.isXMLDoc=st.isXML,b.contains=st.contains}(e);var at=/Until$/,st=/^(?:parents|prev(?:Until|All))/,ut=/^.[^:#\\[\\.,]*$/,lt=b.expr.match.needsContext,ct={children:!0,contents:!0,next:!0,prev:!0};b.fn.extend({find:function(e){var t,n,r,i=this.length;if(\"string\"!=typeof e)return r=this,this.pushStack(b(e).filter(function(){for(t=0;i>t;t++)if(b.contains(r[t],this))return!0}));for(n=[],t=0;i>t;t++)b.find(e,this[t],n);return n=this.pushStack(i>1?b.unique(n):n),n.selector=(this.selector?this.selector+\" \":\"\")+e,n},has:function(e){var t,n=b(e,this),r=n.length;return this.filter(function(){for(t=0;r>t;t++)if(b.contains(this,n[t]))return!0})},not:function(e){return this.pushStack(ft(this,e,!1))},filter:function(e){return this.pushStack(ft(this,e,!0))},is:function(e){return!!e&&(\"string\"==typeof e?lt.test(e)?b(e,this.context).index(this[0])>=0:b.filter(e,this).length>0:this.filter(e).length>0)},closest:function(e,t){var n,r=0,i=this.length,o=[],a=lt.test(e)||\"string\"!=typeof e?b(e,t||this.context):0;for(;i>r;r++){n=this[r];while(n&&n.ownerDocument&&n!==t&&11!==n.nodeType){if(a?a.index(n)>-1:b.find.matchesSelector(n,e)){o.push(n);break}n=n.parentNode}}return this.pushStack(o.length>1?b.unique(o):o)},index:function(e){return e?\"string\"==typeof e?b.inArray(this[0],b(e)):b.inArray(e.jquery?e[0]:e,this):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){var n=\"string\"==typeof e?b(e,t):b.makeArray(e&&e.nodeType?[e]:e),r=b.merge(this.get(),n);return this.pushStack(b.unique(r))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),b.fn.andSelf=b.fn.addBack;function pt(e,t){do e=e[t];while(e&&1!==e.nodeType);return e}b.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return b.dir(e,\"parentNode\")},parentsUntil:function(e,t,n){return b.dir(e,\"parentNode\",n)},next:function(e){return pt(e,\"nextSibling\")},prev:function(e){return pt(e,\"previousSibling\")},nextAll:function(e){return b.dir(e,\"nextSibling\")},prevAll:function(e){return b.dir(e,\"previousSibling\")},nextUntil:function(e,t,n){return b.dir(e,\"nextSibling\",n)},prevUntil:function(e,t,n){return b.dir(e,\"previousSibling\",n)},siblings:function(e){return b.sibling((e.parentNode||{}).firstChild,e)},children:function(e){return b.sibling(e.firstChild)},contents:function(e){return b.nodeName(e,\"iframe\")?e.contentDocument||e.contentWindow.document:b.merge([],e.childNodes)}},function(e,t){b.fn[e]=function(n,r){var i=b.map(this,t,n);return at.test(e)||(r=n),r&&\"string\"==typeof r&&(i=b.filter(r,i)),i=this.length>1&&!ct[e]?b.unique(i):i,this.length>1&&st.test(e)&&(i=i.reverse()),this.pushStack(i)}}),b.extend({filter:function(e,t,n){return n&&(e=\":not(\"+e+\")\"),1===t.length?b.find.matchesSelector(t[0],e)?[t[0]]:[]:b.find.matches(e,t)},dir:function(e,n,r){var i=[],o=e[n];while(o&&9!==o.nodeType&&(r===t||1!==o.nodeType||!b(o).is(r)))1===o.nodeType&&i.push(o),o=o[n];return i},sibling:function(e,t){var n=[];for(;e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n}});function ft(e,t,n){if(t=t||0,b.isFunction(t))return b.grep(e,function(e,r){var i=!!t.call(e,r,e);return i===n});if(t.nodeType)return b.grep(e,function(e){return e===t===n});if(\"string\"==typeof t){var r=b.grep(e,function(e){return 1===e.nodeType});if(ut.test(t))return b.filter(t,r,!n);t=b.filter(t,r)}return b.grep(e,function(e){return b.inArray(e,t)>=0===n})}function dt(e){var t=ht.split(\"|\"),n=e.createDocumentFragment();if(n.createElement)while(t.length)n.createElement(t.pop());return n}var ht=\"abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|header|hgroup|mark|meter|nav|output|progress|section|summary|time|video\",gt=/ jQuery\\d+=\"(?:null|\\d+)\"/g,mt=RegExp(\"]\",\"i\"),yt=/^\\s+/,vt=/]*)\\/>/gi,bt=/c;c++)o=l,c!==h&&(o=b.clone(o,!0,!0),a&&b.merge(s,Ot(o,\"script\"))),r.call(n&&b.nodeName(this[c],\"table\")?Lt(this[c],\"tbody\"):this[c],o,c);if(a)for(u=s[s.length-1].ownerDocument,b.map(s,qt),c=0;a>c;c++)o=s[c],kt.test(o.type||\"\")&&!b._data(o,\"globalEval\")&&b.contains(u,o)&&(o.src?b.ajax({url:o.src,type:\"GET\",dataType:\"script\",async:!1,global:!1,\"throws\":!0}):b.globalEval((o.text||o.textContent||o.innerHTML||\"\").replace(St,\"\")));l=i=null}return this}});function Lt(e,t){return e.getElementsByTagName(t)[0]||e.appendChild(e.ownerDocument.createElement(t))}function Ht(e){var t=e.getAttributeNode(\"type\");return e.type=(t&&t.specified)+\"/\"+e.type,e}function qt(e){var t=Et.exec(e.type);return t?e.type=t[1]:e.removeAttribute(\"type\"),e}function Mt(e,t){var n,r=0;for(;null!=(n=e[r]);r++)b._data(n,\"globalEval\",!t||b._data(t[r],\"globalEval\"))}function _t(e,t){if(1===t.nodeType&&b.hasData(e)){var n,r,i,o=b._data(e),a=b._data(t,o),s=o.events;if(s){delete a.handle,a.events={};for(n in s)for(r=0,i=s[n].length;i>r;r++)b.event.add(t,n,s[n][r])}a.data&&(a.data=b.extend({},a.data))}}function Ft(e,t){var n,r,i;if(1===t.nodeType){if(n=t.nodeName.toLowerCase(),!b.support.noCloneEvent&&t[b.expando]){i=b._data(t);for(r in i.events)b.removeEvent(t,r,i.handle);t.removeAttribute(b.expando)}\"script\"===n&&t.text!==e.text?(Ht(t).text=e.text,qt(t)):\"object\"===n?(t.parentNode&&(t.outerHTML=e.outerHTML),b.support.html5Clone&&e.innerHTML&&!b.trim(t.innerHTML)&&(t.innerHTML=e.innerHTML)):\"input\"===n&&Nt.test(e.type)?(t.defaultChecked=t.checked=e.checked,t.value!==e.value&&(t.value=e.value)):\"option\"===n?t.defaultSelected=t.selected=e.defaultSelected:(\"input\"===n||\"textarea\"===n)&&(t.defaultValue=e.defaultValue)}}b.each({appendTo:\"append\",prependTo:\"prepend\",insertBefore:\"before\",insertAfter:\"after\",replaceAll:\"replaceWith\"},function(e,t){b.fn[e]=function(e){var n,r=0,i=[],o=b(e),a=o.length-1;for(;a>=r;r++)n=r===a?this:this.clone(!0),b(o[r])[t](n),d.apply(i,n.get());return this.pushStack(i)}});function Ot(e,n){var r,o,a=0,s=typeof e.getElementsByTagName!==i?e.getElementsByTagName(n||\"*\"):typeof e.querySelectorAll!==i?e.querySelectorAll(n||\"*\"):t;if(!s)for(s=[],r=e.childNodes||e;null!=(o=r[a]);a++)!n||b.nodeName(o,n)?s.push(o):b.merge(s,Ot(o,n));return n===t||n&&b.nodeName(e,n)?b.merge([e],s):s}function Bt(e){Nt.test(e.type)&&(e.defaultChecked=e.checked)}b.extend({clone:function(e,t,n){var r,i,o,a,s,u=b.contains(e.ownerDocument,e);if(b.support.html5Clone||b.isXMLDoc(e)||!mt.test(\"\")?o=e.cloneNode(!0):(Dt.innerHTML=e.outerHTML,Dt.removeChild(o=Dt.firstChild)),!(b.support.noCloneEvent&&b.support.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||b.isXMLDoc(e)))for(r=Ot(o),s=Ot(e),a=0;null!=(i=s[a]);++a)r[a]&&Ft(i,r[a]);if(t)if(n)for(s=s||Ot(e),r=r||Ot(o),a=0;null!=(i=s[a]);a++)_t(i,r[a]);else _t(e,o);return r=Ot(o,\"script\"),r.length>0&&Mt(r,!u&&Ot(e,\"script\")),r=s=i=null,o},buildFragment:function(e,t,n,r){var i,o,a,s,u,l,c,p=e.length,f=dt(t),d=[],h=0;for(;p>h;h++)if(o=e[h],o||0===o)if(\"object\"===b.type(o))b.merge(d,o.nodeType?[o]:o);else if(wt.test(o)){s=s||f.appendChild(t.createElement(\"div\")),u=(bt.exec(o)||[\"\",\"\"])[1].toLowerCase(),c=At[u]||At._default,s.innerHTML=c[1]+o.replace(vt,\"\")+c[2],i=c[0];while(i--)s=s.lastChild;if(!b.support.leadingWhitespace&&yt.test(o)&&d.push(t.createTextNode(yt.exec(o)[0])),!b.support.tbody){o=\"table\"!==u||xt.test(o)?\"\"!==c[1]||xt.test(o)?0:s:s.firstChild,i=o&&o.childNodes.length;while(i--)b.nodeName(l=o.childNodes[i],\"tbody\")&&!l.childNodes.length&&o.removeChild(l) }b.merge(d,s.childNodes),s.textContent=\"\";while(s.firstChild)s.removeChild(s.firstChild);s=f.lastChild}else d.push(t.createTextNode(o));s&&f.removeChild(s),b.support.appendChecked||b.grep(Ot(d,\"input\"),Bt),h=0;while(o=d[h++])if((!r||-1===b.inArray(o,r))&&(a=b.contains(o.ownerDocument,o),s=Ot(f.appendChild(o),\"script\"),a&&Mt(s),n)){i=0;while(o=s[i++])kt.test(o.type||\"\")&&n.push(o)}return s=null,f},cleanData:function(e,t){var n,r,o,a,s=0,u=b.expando,l=b.cache,p=b.support.deleteExpando,f=b.event.special;for(;null!=(n=e[s]);s++)if((t||b.acceptData(n))&&(o=n[u],a=o&&l[o])){if(a.events)for(r in a.events)f[r]?b.event.remove(n,r):b.removeEvent(n,r,a.handle);l[o]&&(delete l[o],p?delete n[u]:typeof n.removeAttribute!==i?n.removeAttribute(u):n[u]=null,c.push(o))}}});var Pt,Rt,Wt,$t=/alpha\\([^)]*\\)/i,It=/opacity\\s*=\\s*([^)]*)/,zt=/^(top|right|bottom|left)$/,Xt=/^(none|table(?!-c[ea]).+)/,Ut=/^margin/,Vt=RegExp(\"^(\"+x+\")(.*)$\",\"i\"),Yt=RegExp(\"^(\"+x+\")(?!px)[a-z%]+$\",\"i\"),Jt=RegExp(\"^([+-])=(\"+x+\")\",\"i\"),Gt={BODY:\"block\"},Qt={position:\"absolute\",visibility:\"hidden\",display:\"block\"},Kt={letterSpacing:0,fontWeight:400},Zt=[\"Top\",\"Right\",\"Bottom\",\"Left\"],en=[\"Webkit\",\"O\",\"Moz\",\"ms\"];function tn(e,t){if(t in e)return t;var n=t.charAt(0).toUpperCase()+t.slice(1),r=t,i=en.length;while(i--)if(t=en[i]+n,t in e)return t;return r}function nn(e,t){return e=t||e,\"none\"===b.css(e,\"display\")||!b.contains(e.ownerDocument,e)}function rn(e,t){var n,r,i,o=[],a=0,s=e.length;for(;s>a;a++)r=e[a],r.style&&(o[a]=b._data(r,\"olddisplay\"),n=r.style.display,t?(o[a]||\"none\"!==n||(r.style.display=\"\"),\"\"===r.style.display&&nn(r)&&(o[a]=b._data(r,\"olddisplay\",un(r.nodeName)))):o[a]||(i=nn(r),(n&&\"none\"!==n||!i)&&b._data(r,\"olddisplay\",i?n:b.css(r,\"display\"))));for(a=0;s>a;a++)r=e[a],r.style&&(t&&\"none\"!==r.style.display&&\"\"!==r.style.display||(r.style.display=t?o[a]||\"\":\"none\"));return e}b.fn.extend({css:function(e,n){return b.access(this,function(e,n,r){var i,o,a={},s=0;if(b.isArray(n)){for(o=Rt(e),i=n.length;i>s;s++)a[n[s]]=b.css(e,n[s],!1,o);return a}return r!==t?b.style(e,n,r):b.css(e,n)},e,n,arguments.length>1)},show:function(){return rn(this,!0)},hide:function(){return rn(this)},toggle:function(e){var t=\"boolean\"==typeof e;return this.each(function(){(t?e:nn(this))?b(this).show():b(this).hide()})}}),b.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=Wt(e,\"opacity\");return\"\"===n?\"1\":n}}}},cssNumber:{columnCount:!0,fillOpacity:!0,fontWeight:!0,lineHeight:!0,opacity:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{\"float\":b.support.cssFloat?\"cssFloat\":\"styleFloat\"},style:function(e,n,r,i){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var o,a,s,u=b.camelCase(n),l=e.style;if(n=b.cssProps[u]||(b.cssProps[u]=tn(l,u)),s=b.cssHooks[n]||b.cssHooks[u],r===t)return s&&\"get\"in s&&(o=s.get(e,!1,i))!==t?o:l[n];if(a=typeof r,\"string\"===a&&(o=Jt.exec(r))&&(r=(o[1]+1)*o[2]+parseFloat(b.css(e,n)),a=\"number\"),!(null==r||\"number\"===a&&isNaN(r)||(\"number\"!==a||b.cssNumber[u]||(r+=\"px\"),b.support.clearCloneStyle||\"\"!==r||0!==n.indexOf(\"background\")||(l[n]=\"inherit\"),s&&\"set\"in s&&(r=s.set(e,r,i))===t)))try{l[n]=r}catch(c){}}},css:function(e,n,r,i){var o,a,s,u=b.camelCase(n);return n=b.cssProps[u]||(b.cssProps[u]=tn(e.style,u)),s=b.cssHooks[n]||b.cssHooks[u],s&&\"get\"in s&&(a=s.get(e,!0,r)),a===t&&(a=Wt(e,n,i)),\"normal\"===a&&n in Kt&&(a=Kt[n]),\"\"===r||r?(o=parseFloat(a),r===!0||b.isNumeric(o)?o||0:a):a},swap:function(e,t,n,r){var i,o,a={};for(o in t)a[o]=e.style[o],e.style[o]=t[o];i=n.apply(e,r||[]);for(o in t)e.style[o]=a[o];return i}}),e.getComputedStyle?(Rt=function(t){return e.getComputedStyle(t,null)},Wt=function(e,n,r){var i,o,a,s=r||Rt(e),u=s?s.getPropertyValue(n)||s[n]:t,l=e.style;return s&&(\"\"!==u||b.contains(e.ownerDocument,e)||(u=b.style(e,n)),Yt.test(u)&&Ut.test(n)&&(i=l.width,o=l.minWidth,a=l.maxWidth,l.minWidth=l.maxWidth=l.width=u,u=s.width,l.width=i,l.minWidth=o,l.maxWidth=a)),u}):o.documentElement.currentStyle&&(Rt=function(e){return e.currentStyle},Wt=function(e,n,r){var i,o,a,s=r||Rt(e),u=s?s[n]:t,l=e.style;return null==u&&l&&l[n]&&(u=l[n]),Yt.test(u)&&!zt.test(n)&&(i=l.left,o=e.runtimeStyle,a=o&&o.left,a&&(o.left=e.currentStyle.left),l.left=\"fontSize\"===n?\"1em\":u,u=l.pixelLeft+\"px\",l.left=i,a&&(o.left=a)),\"\"===u?\"auto\":u});function on(e,t,n){var r=Vt.exec(t);return r?Math.max(0,r[1]-(n||0))+(r[2]||\"px\"):t}function an(e,t,n,r,i){var o=n===(r?\"border\":\"content\")?4:\"width\"===t?1:0,a=0;for(;4>o;o+=2)\"margin\"===n&&(a+=b.css(e,n+Zt[o],!0,i)),r?(\"content\"===n&&(a-=b.css(e,\"padding\"+Zt[o],!0,i)),\"margin\"!==n&&(a-=b.css(e,\"border\"+Zt[o]+\"Width\",!0,i))):(a+=b.css(e,\"padding\"+Zt[o],!0,i),\"padding\"!==n&&(a+=b.css(e,\"border\"+Zt[o]+\"Width\",!0,i)));return a}function sn(e,t,n){var r=!0,i=\"width\"===t?e.offsetWidth:e.offsetHeight,o=Rt(e),a=b.support.boxSizing&&\"border-box\"===b.css(e,\"boxSizing\",!1,o);if(0>=i||null==i){if(i=Wt(e,t,o),(0>i||null==i)&&(i=e.style[t]),Yt.test(i))return i;r=a&&(b.support.boxSizingReliable||i===e.style[t]),i=parseFloat(i)||0}return i+an(e,t,n||(a?\"border\":\"content\"),r,o)+\"px\"}function un(e){var t=o,n=Gt[e];return n||(n=ln(e,t),\"none\"!==n&&n||(Pt=(Pt||b(\"\").css(\"cssText\",\"display:block !important\")).appendTo(t.documentElement),t=(Pt[0].contentWindow||Pt[0].contentDocument).document,t.write(\"\"),t.close(),n=ln(e,t),Pt.detach()),Gt[e]=n),n}function ln(e,t){var n=b(t.createElement(e)).appendTo(t.body),r=b.css(n[0],\"display\");return n.remove(),r}b.each([\"height\",\"width\"],function(e,n){b.cssHooks[n]={get:function(e,r,i){return r?0===e.offsetWidth&&Xt.test(b.css(e,\"display\"))?b.swap(e,Qt,function(){return sn(e,n,i)}):sn(e,n,i):t},set:function(e,t,r){var i=r&&Rt(e);return on(e,t,r?an(e,n,r,b.support.boxSizing&&\"border-box\"===b.css(e,\"boxSizing\",!1,i),i):0)}}}),b.support.opacity||(b.cssHooks.opacity={get:function(e,t){return It.test((t&&e.currentStyle?e.currentStyle.filter:e.style.filter)||\"\")?.01*parseFloat(RegExp.$1)+\"\":t?\"1\":\"\"},set:function(e,t){var n=e.style,r=e.currentStyle,i=b.isNumeric(t)?\"alpha(opacity=\"+100*t+\")\":\"\",o=r&&r.filter||n.filter||\"\";n.zoom=1,(t>=1||\"\"===t)&&\"\"===b.trim(o.replace($t,\"\"))&&n.removeAttribute&&(n.removeAttribute(\"filter\"),\"\"===t||r&&!r.filter)||(n.filter=$t.test(o)?o.replace($t,i):o+\" \"+i)}}),b(function(){b.support.reliableMarginRight||(b.cssHooks.marginRight={get:function(e,n){return n?b.swap(e,{display:\"inline-block\"},Wt,[e,\"marginRight\"]):t}}),!b.support.pixelPosition&&b.fn.position&&b.each([\"top\",\"left\"],function(e,n){b.cssHooks[n]={get:function(e,r){return r?(r=Wt(e,n),Yt.test(r)?b(e).position()[n]+\"px\":r):t}}})}),b.expr&&b.expr.filters&&(b.expr.filters.hidden=function(e){return 0>=e.offsetWidth&&0>=e.offsetHeight||!b.support.reliableHiddenOffsets&&\"none\"===(e.style&&e.style.display||b.css(e,\"display\"))},b.expr.filters.visible=function(e){return!b.expr.filters.hidden(e)}),b.each({margin:\"\",padding:\"\",border:\"Width\"},function(e,t){b.cssHooks[e+t]={expand:function(n){var r=0,i={},o=\"string\"==typeof n?n.split(\" \"):[n];for(;4>r;r++)i[e+Zt[r]+t]=o[r]||o[r-2]||o[0];return i}},Ut.test(e)||(b.cssHooks[e+t].set=on)});var cn=/%20/g,pn=/\\[\\]$/,fn=/\\r?\\n/g,dn=/^(?:submit|button|image|reset|file)$/i,hn=/^(?:input|select|textarea|keygen)/i;b.fn.extend({serialize:function(){return b.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=b.prop(this,\"elements\");return e?b.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!b(this).is(\":disabled\")&&hn.test(this.nodeName)&&!dn.test(e)&&(this.checked||!Nt.test(e))}).map(function(e,t){var n=b(this).val();return null==n?null:b.isArray(n)?b.map(n,function(e){return{name:t.name,value:e.replace(fn,\"\\r\\n\")}}):{name:t.name,value:n.replace(fn,\"\\r\\n\")}}).get()}}),b.param=function(e,n){var r,i=[],o=function(e,t){t=b.isFunction(t)?t():null==t?\"\":t,i[i.length]=encodeURIComponent(e)+\"=\"+encodeURIComponent(t)};if(n===t&&(n=b.ajaxSettings&&b.ajaxSettings.traditional),b.isArray(e)||e.jquery&&!b.isPlainObject(e))b.each(e,function(){o(this.name,this.value)});else for(r in e)gn(r,e[r],n,o);return i.join(\"&\").replace(cn,\"+\")};function gn(e,t,n,r){var i;if(b.isArray(t))b.each(t,function(t,i){n||pn.test(e)?r(e,i):gn(e+\"[\"+(\"object\"==typeof i?t:\"\")+\"]\",i,n,r)});else if(n||\"object\"!==b.type(t))r(e,t);else for(i in t)gn(e+\"[\"+i+\"]\",t[i],n,r)}b.each(\"blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu\".split(\" \"),function(e,t){b.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}}),b.fn.hover=function(e,t){return this.mouseenter(e).mouseleave(t||e)};var mn,yn,vn=b.now(),bn=/\\?/,xn=/#.*$/,wn=/([?&])_=[^&]*/,Tn=/^(.*?):[ \\t]*([^\\r\\n]*)\\r?$/gm,Nn=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,Cn=/^(?:GET|HEAD)$/,kn=/^\\/\\//,En=/^([\\w.+-]+:)(?:\\/\\/([^\\/?#:]*)(?::(\\d+)|)|)/,Sn=b.fn.load,An={},jn={},Dn=\"*/\".concat(\"*\");try{yn=a.href}catch(Ln){yn=o.createElement(\"a\"),yn.href=\"\",yn=yn.href}mn=En.exec(yn.toLowerCase())||[];function Hn(e){return function(t,n){\"string\"!=typeof t&&(n=t,t=\"*\");var r,i=0,o=t.toLowerCase().match(w)||[];if(b.isFunction(n))while(r=o[i++])\"+\"===r[0]?(r=r.slice(1)||\"*\",(e[r]=e[r]||[]).unshift(n)):(e[r]=e[r]||[]).push(n)}}function qn(e,n,r,i){var o={},a=e===jn;function s(u){var l;return o[u]=!0,b.each(e[u]||[],function(e,u){var c=u(n,r,i);return\"string\"!=typeof c||a||o[c]?a?!(l=c):t:(n.dataTypes.unshift(c),s(c),!1)}),l}return s(n.dataTypes[0])||!o[\"*\"]&&s(\"*\")}function Mn(e,n){var r,i,o=b.ajaxSettings.flatOptions||{};for(i in n)n[i]!==t&&((o[i]?e:r||(r={}))[i]=n[i]);return r&&b.extend(!0,e,r),e}b.fn.load=function(e,n,r){if(\"string\"!=typeof e&&Sn)return Sn.apply(this,arguments);var i,o,a,s=this,u=e.indexOf(\" \");return u>=0&&(i=e.slice(u,e.length),e=e.slice(0,u)),b.isFunction(n)?(r=n,n=t):n&&\"object\"==typeof n&&(a=\"POST\"),s.length>0&&b.ajax({url:e,type:a,dataType:\"html\",data:n}).done(function(e){o=arguments,s.html(i?b(\"\").append(b.parseHTML(e)).find(i):e)}).complete(r&&function(e,t){s.each(r,o||[e.responseText,t,e])}),this},b.each([\"ajaxStart\",\"ajaxStop\",\"ajaxComplete\",\"ajaxError\",\"ajaxSuccess\",\"ajaxSend\"],function(e,t){b.fn[t]=function(e){return this.on(t,e)}}),b.each([\"get\",\"post\"],function(e,n){b[n]=function(e,r,i,o){return b.isFunction(r)&&(o=o||i,i=r,r=t),b.ajax({url:e,type:n,dataType:o,data:r,success:i})}}),b.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:yn,type:\"GET\",isLocal:Nn.test(mn[1]),global:!0,processData:!0,async:!0,contentType:\"application/x-www-form-urlencoded; charset=UTF-8\",accepts:{\"*\":Dn,text:\"text/plain\",html:\"text/html\",xml:\"application/xml, text/xml\",json:\"application/json, text/javascript\"},contents:{xml:/xml/,html:/html/,json:/json/},responseFields:{xml:\"responseXML\",text:\"responseText\"},converters:{\"* text\":e.String,\"text html\":!0,\"text json\":b.parseJSON,\"text xml\":b.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?Mn(Mn(e,b.ajaxSettings),t):Mn(b.ajaxSettings,e)},ajaxPrefilter:Hn(An),ajaxTransport:Hn(jn),ajax:function(e,n){\"object\"==typeof e&&(n=e,e=t),n=n||{};var r,i,o,a,s,u,l,c,p=b.ajaxSetup({},n),f=p.context||p,d=p.context&&(f.nodeType||f.jquery)?b(f):b.event,h=b.Deferred(),g=b.Callbacks(\"once memory\"),m=p.statusCode||{},y={},v={},x=0,T=\"canceled\",N={readyState:0,getResponseHeader:function(e){var t;if(2===x){if(!c){c={};while(t=Tn.exec(a))c[t[1].toLowerCase()]=t[2]}t=c[e.toLowerCase()]}return null==t?null:t},getAllResponseHeaders:function(){return 2===x?a:null},setRequestHeader:function(e,t){var n=e.toLowerCase();return x||(e=v[n]=v[n]||e,y[e]=t),this},overrideMimeType:function(e){return x||(p.mimeType=e),this},statusCode:function(e){var t;if(e)if(2>x)for(t in e)m[t]=[m[t],e[t]];else N.always(e[N.status]);return this},abort:function(e){var t=e||T;return l&&l.abort(t),k(0,t),this}};if(h.promise(N).complete=g.add,N.success=N.done,N.error=N.fail,p.url=((e||p.url||yn)+\"\").replace(xn,\"\").replace(kn,mn[1]+\"//\"),p.type=n.method||n.type||p.method||p.type,p.dataTypes=b.trim(p.dataType||\"*\").toLowerCase().match(w)||[\"\"],null==p.crossDomain&&(r=En.exec(p.url.toLowerCase()),p.crossDomain=!(!r||r[1]===mn[1]&&r[2]===mn[2]&&(r[3]||(\"http:\"===r[1]?80:443))==(mn[3]||(\"http:\"===mn[1]?80:443)))),p.data&&p.processData&&\"string\"!=typeof p.data&&(p.data=b.param(p.data,p.traditional)),qn(An,p,n,N),2===x)return N;u=p.global,u&&0===b.active++&&b.event.trigger(\"ajaxStart\"),p.type=p.type.toUpperCase(),p.hasContent=!Cn.test(p.type),o=p.url,p.hasContent||(p.data&&(o=p.url+=(bn.test(o)?\"&\":\"?\")+p.data,delete p.data),p.cache===!1&&(p.url=wn.test(o)?o.replace(wn,\"$1_=\"+vn++):o+(bn.test(o)?\"&\":\"?\")+\"_=\"+vn++)),p.ifModified&&(b.lastModified[o]&&N.setRequestHeader(\"If-Modified-Since\",b.lastModified[o]),b.etag[o]&&N.setRequestHeader(\"If-None-Match\",b.etag[o])),(p.data&&p.hasContent&&p.contentType!==!1||n.contentType)&&N.setRequestHeader(\"Content-Type\",p.contentType),N.setRequestHeader(\"Accept\",p.dataTypes[0]&&p.accepts[p.dataTypes[0]]?p.accepts[p.dataTypes[0]]+(\"*\"!==p.dataTypes[0]?\", \"+Dn+\"; q=0.01\":\"\"):p.accepts[\"*\"]);for(i in p.headers)N.setRequestHeader(i,p.headers[i]);if(p.beforeSend&&(p.beforeSend.call(f,N,p)===!1||2===x))return N.abort();T=\"abort\";for(i in{success:1,error:1,complete:1})N[i](p[i]);if(l=qn(jn,p,n,N)){N.readyState=1,u&&d.trigger(\"ajaxSend\",[N,p]),p.async&&p.timeout>0&&(s=setTimeout(function(){N.abort(\"timeout\")},p.timeout));try{x=1,l.send(y,k)}catch(C){if(!(2>x))throw C;k(-1,C)}}else k(-1,\"No Transport\");function k(e,n,r,i){var c,y,v,w,T,C=n;2!==x&&(x=2,s&&clearTimeout(s),l=t,a=i||\"\",N.readyState=e>0?4:0,r&&(w=_n(p,N,r)),e>=200&&300>e||304===e?(p.ifModified&&(T=N.getResponseHeader(\"Last-Modified\"),T&&(b.lastModified[o]=T),T=N.getResponseHeader(\"etag\"),T&&(b.etag[o]=T)),204===e?(c=!0,C=\"nocontent\"):304===e?(c=!0,C=\"notmodified\"):(c=Fn(p,w),C=c.state,y=c.data,v=c.error,c=!v)):(v=C,(e||!C)&&(C=\"error\",0>e&&(e=0))),N.status=e,N.statusText=(n||C)+\"\",c?h.resolveWith(f,[y,C,N]):h.rejectWith(f,[N,C,v]),N.statusCode(m),m=t,u&&d.trigger(c?\"ajaxSuccess\":\"ajaxError\",[N,p,c?y:v]),g.fireWith(f,[N,C]),u&&(d.trigger(\"ajaxComplete\",[N,p]),--b.active||b.event.trigger(\"ajaxStop\")))}return N},getScript:function(e,n){return b.get(e,t,n,\"script\")},getJSON:function(e,t,n){return b.get(e,t,n,\"json\")}});function _n(e,n,r){var i,o,a,s,u=e.contents,l=e.dataTypes,c=e.responseFields;for(s in c)s in r&&(n[c[s]]=r[s]);while(\"*\"===l[0])l.shift(),o===t&&(o=e.mimeType||n.getResponseHeader(\"Content-Type\"));if(o)for(s in u)if(u[s]&&u[s].test(o)){l.unshift(s);break}if(l[0]in r)a=l[0];else{for(s in r){if(!l[0]||e.converters[s+\" \"+l[0]]){a=s;break}i||(i=s)}a=a||i}return a?(a!==l[0]&&l.unshift(a),r[a]):t}function Fn(e,t){var n,r,i,o,a={},s=0,u=e.dataTypes.slice(),l=u[0];if(e.dataFilter&&(t=e.dataFilter(t,e.dataType)),u[1])for(i in e.converters)a[i.toLowerCase()]=e.converters[i];for(;r=u[++s];)if(\"*\"!==r){if(\"*\"!==l&&l!==r){if(i=a[l+\" \"+r]||a[\"* \"+r],!i)for(n in a)if(o=n.split(\" \"),o[1]===r&&(i=a[l+\" \"+o[0]]||a[\"* \"+o[0]])){i===!0?i=a[n]:a[n]!==!0&&(r=o[0],u.splice(s--,0,r));break}if(i!==!0)if(i&&e[\"throws\"])t=i(t);else try{t=i(t)}catch(c){return{state:\"parsererror\",error:i?c:\"No conversion from \"+l+\" to \"+r}}}l=r}return{state:\"success\",data:t}}b.ajaxSetup({accepts:{script:\"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript\"},contents:{script:/(?:java|ecma)script/},converters:{\"text script\":function(e){return b.globalEval(e),e}}}),b.ajaxPrefilter(\"script\",function(e){e.cache===t&&(e.cache=!1),e.crossDomain&&(e.type=\"GET\",e.global=!1)}),b.ajaxTransport(\"script\",function(e){if(e.crossDomain){var n,r=o.head||b(\"head\")[0]||o.documentElement;return{send:function(t,i){n=o.createElement(\"script\"),n.async=!0,e.scriptCharset&&(n.charset=e.scriptCharset),n.src=e.url,n.onload=n.onreadystatechange=function(e,t){(t||!n.readyState||/loaded|complete/.test(n.readyState))&&(n.onload=n.onreadystatechange=null,n.parentNode&&n.parentNode.removeChild(n),n=null,t||i(200,\"success\"))},r.insertBefore(n,r.firstChild)},abort:function(){n&&n.onload(t,!0)}}}});var On=[],Bn=/(=)\\?(?=&|$)|\\?\\?/;b.ajaxSetup({jsonp:\"callback\",jsonpCallback:function(){var e=On.pop()||b.expando+\"_\"+vn++;return this[e]=!0,e}}),b.ajaxPrefilter(\"json jsonp\",function(n,r,i){var o,a,s,u=n.jsonp!==!1&&(Bn.test(n.url)?\"url\":\"string\"==typeof n.data&&!(n.contentType||\"\").indexOf(\"application/x-www-form-urlencoded\")&&Bn.test(n.data)&&\"data\");return u||\"jsonp\"===n.dataTypes[0]?(o=n.jsonpCallback=b.isFunction(n.jsonpCallback)?n.jsonpCallback():n.jsonpCallback,u?n[u]=n[u].replace(Bn,\"$1\"+o):n.jsonp!==!1&&(n.url+=(bn.test(n.url)?\"&\":\"?\")+n.jsonp+\"=\"+o),n.converters[\"script json\"]=function(){return s||b.error(o+\" was not called\"),s[0]},n.dataTypes[0]=\"json\",a=e[o],e[o]=function(){s=arguments},i.always(function(){e[o]=a,n[o]&&(n.jsonpCallback=r.jsonpCallback,On.push(o)),s&&b.isFunction(a)&&a(s[0]),s=a=t}),\"script\"):t});var Pn,Rn,Wn=0,$n=e.ActiveXObject&&function(){var e;for(e in Pn)Pn[e](t,!0)};function In(){try{return new e.XMLHttpRequest}catch(t){}}function zn(){try{return new e.ActiveXObject(\"Microsoft.XMLHTTP\")}catch(t){}}b.ajaxSettings.xhr=e.ActiveXObject?function(){return!this.isLocal&&In()||zn()}:In,Rn=b.ajaxSettings.xhr(),b.support.cors=!!Rn&&\"withCredentials\"in Rn,Rn=b.support.ajax=!!Rn,Rn&&b.ajaxTransport(function(n){if(!n.crossDomain||b.support.cors){var r;return{send:function(i,o){var a,s,u=n.xhr();if(n.username?u.open(n.type,n.url,n.async,n.username,n.password):u.open(n.type,n.url,n.async),n.xhrFields)for(s in n.xhrFields)u[s]=n.xhrFields[s];n.mimeType&&u.overrideMimeType&&u.overrideMimeType(n.mimeType),n.crossDomain||i[\"X-Requested-With\"]||(i[\"X-Requested-With\"]=\"XMLHttpRequest\");try{for(s in i)u.setRequestHeader(s,i[s])}catch(l){}u.send(n.hasContent&&n.data||null),r=function(e,i){var s,l,c,p;try{if(r&&(i||4===u.readyState))if(r=t,a&&(u.onreadystatechange=b.noop,$n&&delete Pn[a]),i)4!==u.readyState&&u.abort();else{p={},s=u.status,l=u.getAllResponseHeaders(),\"string\"==typeof u.responseText&&(p.text=u.responseText);try{c=u.statusText}catch(f){c=\"\"}s||!n.isLocal||n.crossDomain?1223===s&&(s=204):s=p.text?200:404}}catch(d){i||o(-1,d)}p&&o(s,c,p,l)},n.async?4===u.readyState?setTimeout(r):(a=++Wn,$n&&(Pn||(Pn={},b(e).unload($n)),Pn[a]=r),u.onreadystatechange=r):r()},abort:function(){r&&r(t,!0)}}}});var Xn,Un,Vn=/^(?:toggle|show|hide)$/,Yn=RegExp(\"^(?:([+-])=|)(\"+x+\")([a-z%]*)$\",\"i\"),Jn=/queueHooks$/,Gn=[nr],Qn={\"*\":[function(e,t){var n,r,i=this.createTween(e,t),o=Yn.exec(t),a=i.cur(),s=+a||0,u=1,l=20;if(o){if(n=+o[2],r=o[3]||(b.cssNumber[e]?\"\":\"px\"),\"px\"!==r&&s){s=b.css(i.elem,e,!0)||n||1;do u=u||\".5\",s/=u,b.style(i.elem,e,s+r);while(u!==(u=i.cur()/a)&&1!==u&&--l)}i.unit=r,i.start=s,i.end=o[1]?s+(o[1]+1)*n:n}return i}]};function Kn(){return setTimeout(function(){Xn=t}),Xn=b.now()}function Zn(e,t){b.each(t,function(t,n){var r=(Qn[t]||[]).concat(Qn[\"*\"]),i=0,o=r.length;for(;o>i;i++)if(r[i].call(e,t,n))return})}function er(e,t,n){var r,i,o=0,a=Gn.length,s=b.Deferred().always(function(){delete u.elem}),u=function(){if(i)return!1;var t=Xn||Kn(),n=Math.max(0,l.startTime+l.duration-t),r=n/l.duration||0,o=1-r,a=0,u=l.tweens.length;for(;u>a;a++)l.tweens[a].run(o);return s.notifyWith(e,[l,o,n]),1>o&&u?n:(s.resolveWith(e,[l]),!1)},l=s.promise({elem:e,props:b.extend({},t),opts:b.extend(!0,{specialEasing:{}},n),originalProperties:t,originalOptions:n,startTime:Xn||Kn(),duration:n.duration,tweens:[],createTween:function(t,n){var r=b.Tween(e,l.opts,t,n,l.opts.specialEasing[t]||l.opts.easing);return l.tweens.push(r),r},stop:function(t){var n=0,r=t?l.tweens.length:0;if(i)return this;for(i=!0;r>n;n++)l.tweens[n].run(1);return t?s.resolveWith(e,[l,t]):s.rejectWith(e,[l,t]),this}}),c=l.props;for(tr(c,l.opts.specialEasing);a>o;o++)if(r=Gn[o].call(l,e,c,l.opts))return r;return Zn(l,c),b.isFunction(l.opts.start)&&l.opts.start.call(e,l),b.fx.timer(b.extend(u,{elem:e,anim:l,queue:l.opts.queue})),l.progress(l.opts.progress).done(l.opts.done,l.opts.complete).fail(l.opts.fail).always(l.opts.always)}function tr(e,t){var n,r,i,o,a;for(i in e)if(r=b.camelCase(i),o=t[r],n=e[i],b.isArray(n)&&(o=n[1],n=e[i]=n[0]),i!==r&&(e[r]=n,delete e[i]),a=b.cssHooks[r],a&&\"expand\"in a){n=a.expand(n),delete e[r];for(i in n)i in e||(e[i]=n[i],t[i]=o)}else t[r]=o}b.Animation=b.extend(er,{tweener:function(e,t){b.isFunction(e)?(t=e,e=[\"*\"]):e=e.split(\" \");var n,r=0,i=e.length;for(;i>r;r++)n=e[r],Qn[n]=Qn[n]||[],Qn[n].unshift(t)},prefilter:function(e,t){t?Gn.unshift(e):Gn.push(e)}});function nr(e,t,n){var r,i,o,a,s,u,l,c,p,f=this,d=e.style,h={},g=[],m=e.nodeType&&nn(e);n.queue||(c=b._queueHooks(e,\"fx\"),null==c.unqueued&&(c.unqueued=0,p=c.empty.fire,c.empty.fire=function(){c.unqueued||p()}),c.unqueued++,f.always(function(){f.always(function(){c.unqueued--,b.queue(e,\"fx\").length||c.empty.fire()})})),1===e.nodeType&&(\"height\"in t||\"width\"in t)&&(n.overflow=[d.overflow,d.overflowX,d.overflowY],\"inline\"===b.css(e,\"display\")&&\"none\"===b.css(e,\"float\")&&(b.support.inlineBlockNeedsLayout&&\"inline\"!==un(e.nodeName)?d.zoom=1:d.display=\"inline-block\")),n.overflow&&(d.overflow=\"hidden\",b.support.shrinkWrapBlocks||f.always(function(){d.overflow=n.overflow[0],d.overflowX=n.overflow[1],d.overflowY=n.overflow[2]}));for(i in t)if(a=t[i],Vn.exec(a)){if(delete t[i],u=u||\"toggle\"===a,a===(m?\"hide\":\"show\"))continue;g.push(i)}if(o=g.length){s=b._data(e,\"fxshow\")||b._data(e,\"fxshow\",{}),\"hidden\"in s&&(m=s.hidden),u&&(s.hidden=!m),m?b(e).show():f.done(function(){b(e).hide()}),f.done(function(){var t;b._removeData(e,\"fxshow\");for(t in h)b.style(e,t,h[t])});for(i=0;o>i;i++)r=g[i],l=f.createTween(r,m?s[r]:0),h[r]=s[r]||b.style(e,r),r in s||(s[r]=l.start,m&&(l.end=l.start,l.start=\"width\"===r||\"height\"===r?1:0))}}function rr(e,t,n,r,i){return new rr.prototype.init(e,t,n,r,i)}b.Tween=rr,rr.prototype={constructor:rr,init:function(e,t,n,r,i,o){this.elem=e,this.prop=n,this.easing=i||\"swing\",this.options=t,this.start=this.now=this.cur(),this.end=r,this.unit=o||(b.cssNumber[n]?\"\":\"px\")},cur:function(){var e=rr.propHooks[this.prop];return e&&e.get?e.get(this):rr.propHooks._default.get(this)},run:function(e){var t,n=rr.propHooks[this.prop];return this.pos=t=this.options.duration?b.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):rr.propHooks._default.set(this),this}},rr.prototype.init.prototype=rr.prototype,rr.propHooks={_default:{get:function(e){var t;return null==e.elem[e.prop]||e.elem.style&&null!=e.elem.style[e.prop]?(t=b.css(e.elem,e.prop,\"\"),t&&\"auto\"!==t?t:0):e.elem[e.prop]},set:function(e){b.fx.step[e.prop]?b.fx.step[e.prop](e):e.elem.style&&(null!=e.elem.style[b.cssProps[e.prop]]||b.cssHooks[e.prop])?b.style(e.elem,e.prop,e.now+e.unit):e.elem[e.prop]=e.now}}},rr.propHooks.scrollTop=rr.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},b.each([\"toggle\",\"show\",\"hide\"],function(e,t){var n=b.fn[t];b.fn[t]=function(e,r,i){return null==e||\"boolean\"==typeof e?n.apply(this,arguments):this.animate(ir(t,!0),e,r,i)}}),b.fn.extend({fadeTo:function(e,t,n,r){return this.filter(nn).css(\"opacity\",0).show().end().animate({opacity:t},e,n,r)},animate:function(e,t,n,r){var i=b.isEmptyObject(e),o=b.speed(t,n,r),a=function(){var t=er(this,b.extend({},e),o);a.finish=function(){t.stop(!0)},(i||b._data(this,\"finish\"))&&t.stop(!0)};return a.finish=a,i||o.queue===!1?this.each(a):this.queue(o.queue,a)},stop:function(e,n,r){var i=function(e){var t=e.stop;delete e.stop,t(r)};return\"string\"!=typeof e&&(r=n,n=e,e=t),n&&e!==!1&&this.queue(e||\"fx\",[]),this.each(function(){var t=!0,n=null!=e&&e+\"queueHooks\",o=b.timers,a=b._data(this);if(n)a[n]&&a[n].stop&&i(a[n]);else for(n in a)a[n]&&a[n].stop&&Jn.test(n)&&i(a[n]);for(n=o.length;n--;)o[n].elem!==this||null!=e&&o[n].queue!==e||(o[n].anim.stop(r),t=!1,o.splice(n,1));(t||!r)&&b.dequeue(this,e)})},finish:function(e){return e!==!1&&(e=e||\"fx\"),this.each(function(){var t,n=b._data(this),r=n[e+\"queue\"],i=n[e+\"queueHooks\"],o=b.timers,a=r?r.length:0;for(n.finish=!0,b.queue(this,e,[]),i&&i.cur&&i.cur.finish&&i.cur.finish.call(this),t=o.length;t--;)o[t].elem===this&&o[t].queue===e&&(o[t].anim.stop(!0),o.splice(t,1));for(t=0;a>t;t++)r[t]&&r[t].finish&&r[t].finish.call(this);delete n.finish})}});function ir(e,t){var n,r={height:e},i=0;for(t=t?1:0;4>i;i+=2-t)n=Zt[i],r[\"margin\"+n]=r[\"padding\"+n]=e;return t&&(r.opacity=r.width=e),r}b.each({slideDown:ir(\"show\"),slideUp:ir(\"hide\"),slideToggle:ir(\"toggle\"),fadeIn:{opacity:\"show\"},fadeOut:{opacity:\"hide\"},fadeToggle:{opacity:\"toggle\"}},function(e,t){b.fn[e]=function(e,n,r){return this.animate(t,e,n,r)}}),b.speed=function(e,t,n){var r=e&&\"object\"==typeof e?b.extend({},e):{complete:n||!n&&t||b.isFunction(e)&&e,duration:e,easing:n&&t||t&&!b.isFunction(t)&&t};return r.duration=b.fx.off?0:\"number\"==typeof r.duration?r.duration:r.duration in b.fx.speeds?b.fx.speeds[r.duration]:b.fx.speeds._default,(null==r.queue||r.queue===!0)&&(r.queue=\"fx\"),r.old=r.complete,r.complete=function(){b.isFunction(r.old)&&r.old.call(this),r.queue&&b.dequeue(this,r.queue)},r},b.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2}},b.timers=[],b.fx=rr.prototype.init,b.fx.tick=function(){var e,n=b.timers,r=0;for(Xn=b.now();n.length>r;r++)e=n[r],e()||n[r]!==e||n.splice(r--,1);n.length||b.fx.stop(),Xn=t},b.fx.timer=function(e){e()&&b.timers.push(e)&&b.fx.start()},b.fx.interval=13,b.fx.start=function(){Un||(Un=setInterval(b.fx.tick,b.fx.interval))},b.fx.stop=function(){clearInterval(Un),Un=null},b.fx.speeds={slow:600,fast:200,_default:400},b.fx.step={},b.expr&&b.expr.filters&&(b.expr.filters.animated=function(e){return b.grep(b.timers,function(t){return e===t.elem}).length}),b.fn.offset=function(e){if(arguments.length)return e===t?this:this.each(function(t){b.offset.setOffset(this,e,t)});var n,r,o={top:0,left:0},a=this[0],s=a&&a.ownerDocument;if(s)return n=s.documentElement,b.contains(n,a)?(typeof a.getBoundingClientRect!==i&&(o=a.getBoundingClientRect()),r=or(s),{top:o.top+(r.pageYOffset||n.scrollTop)-(n.clientTop||0),left:o.left+(r.pageXOffset||n.scrollLeft)-(n.clientLeft||0)}):o},b.offset={setOffset:function(e,t,n){var r=b.css(e,\"position\");\"static\"===r&&(e.style.position=\"relative\");var i=b(e),o=i.offset(),a=b.css(e,\"top\"),s=b.css(e,\"left\"),u=(\"absolute\"===r||\"fixed\"===r)&&b.inArray(\"auto\",[a,s])>-1,l={},c={},p,f;u?(c=i.position(),p=c.top,f=c.left):(p=parseFloat(a)||0,f=parseFloat(s)||0),b.isFunction(t)&&(t=t.call(e,n,o)),null!=t.top&&(l.top=t.top-o.top+p),null!=t.left&&(l.left=t.left-o.left+f),\"using\"in t?t.using.call(e,l):i.css(l)}},b.fn.extend({position:function(){if(this[0]){var e,t,n={top:0,left:0},r=this[0];return\"fixed\"===b.css(r,\"position\")?t=r.getBoundingClientRect():(e=this.offsetParent(),t=this.offset(),b.nodeName(e[0],\"html\")||(n=e.offset()),n.top+=b.css(e[0],\"borderTopWidth\",!0),n.left+=b.css(e[0],\"borderLeftWidth\",!0)),{top:t.top-n.top-b.css(r,\"marginTop\",!0),left:t.left-n.left-b.css(r,\"marginLeft\",!0)}}},offsetParent:function(){return this.map(function(){var e=this.offsetParent||o.documentElement;while(e&&!b.nodeName(e,\"html\")&&\"static\"===b.css(e,\"position\"))e=e.offsetParent;return e||o.documentElement})}}),b.each({scrollLeft:\"pageXOffset\",scrollTop:\"pageYOffset\"},function(e,n){var r=/Y/.test(n);b.fn[e]=function(i){return b.access(this,function(e,i,o){var a=or(e);return o===t?a?n in a?a[n]:a.document.documentElement[i]:e[i]:(a?a.scrollTo(r?b(a).scrollLeft():o,r?o:b(a).scrollTop()):e[i]=o,t)},e,i,arguments.length,null)}});function or(e){return b.isWindow(e)?e:9===e.nodeType?e.defaultView||e.parentWindow:!1}b.each({Height:\"height\",Width:\"width\"},function(e,n){b.each({padding:\"inner\"+e,content:n,\"\":\"outer\"+e},function(r,i){b.fn[i]=function(i,o){var a=arguments.length&&(r||\"boolean\"!=typeof i),s=r||(i===!0||o===!0?\"margin\":\"border\");return b.access(this,function(n,r,i){var o;return b.isWindow(n)?n.document.documentElement[\"client\"+e]:9===n.nodeType?(o=n.documentElement,Math.max(n.body[\"scroll\"+e],o[\"scroll\"+e],n.body[\"offset\"+e],o[\"offset\"+e],o[\"client\"+e])):i===t?b.css(n,r,s):b.style(n,r,i,s)},n,a?i:t,a,null)}})}),e.jQuery=e.$=b,\"function\"==typeof define&&define.amd&&define.amd.jQuery&&define(\"jquery\",[],function(){return b})})(window);"},{"title":"","date":"2020-01-19T12:26:43.256Z","updated":"2017-07-04T01:51:55.000Z","comments":true,"path":"iloveyouhn/twojscss/jquery.js","permalink":"http://yoursite.com/iloveyouhn/twojscss/jquery.js","excerpt":"","text":"/*! * jQuery JavaScript Library v1.4.2 * http://jquery.com/ * * Copyright 2010, John Resig * Dual licensed under the MIT or GPL Version 2 licenses. * http://jquery.org/license * * Includes Sizzle.js * http://sizzlejs.com/ * Copyright 2010, The Dojo Foundation * Released under the MIT, BSD, and GPL Licenses. * * Date: Sat Feb 13 22:33:48 2010 -0500 */ (function(A,w){function ma(){if(!c.isReady){try{s.documentElement.doScroll(\"left\")}catch(a){setTimeout(ma,1);return}c.ready()}}function Qa(a,b){b.src?c.ajax({url:b.src,async:false,dataType:\"script\"}):c.globalEval(b.text||b.textContent||b.innerHTML||\"\");b.parentNode&&b.parentNode.removeChild(b)}function X(a,b,d,f,e,j){var i=a.length;if(typeof b===\"object\"){for(var o in b)X(a,o,b[o],f,e,d);return a}if(d!==w){f=!j&&f&&c.isFunction(d);for(o=0;o"}],"posts":[{"title":"玩转 IDEA 系列教程——强烈推荐官方中文(汉化)插件！","slug":"idea/idea01","date":"2020-06-04T12:43:00.000Z","updated":"2020-06-04T12:43:00.000Z","comments":true,"path":"2020/06/04/idea/idea01/","link":"","permalink":"http://yoursite.com/2020/06/04/idea/idea01/","excerpt":"IDEA2020.1版本的到来，官方也悄悄更新了IDEA的中文插件。至今为止也有一段时间了，本人也下载使用过，对于英语底子薄弱的同学来说，中文插件还是非常友好的！…","text":"每天进步一点，不做curd工程师与Api调用工程师欢迎访问个人博客网站：https://www.coder-programming.cn/ IDEA2020.1版本的到来，官方也悄悄更新了IDEA的中文插件。至今为止也有一段时间了，本人也下载使用过，对于英语底子薄弱的同学来说，中文插件还是非常友好的！ 有兴趣的童鞋也可以下载尝尝鲜~ 接下来，我们来介绍如何安装这款插件！ 一、在线安装打开设置——&gt;插件 输入框搜索：Chinese (Simplified) Language Pack 之后重启即可使用！ 二、离线安装离线下载地址：https://plugins.jetbrains.com/plugin/13710-chinese-simplified-language-pack-eap 注意事项：需要根据自身的IDEA版本号进行相应的选择下载！ 下载离线包 安装 安装离线包有两张方法 方式一： File -&gt; Settings -&gt; Plugins -&gt; 安装本地插件包 方式二： 直接将插件包托入到IDEA框内即可！ 之后重启即可使用！ 效果 文末文章收录至Github: https://github.com/CoderMerlin/coder-programmingGitee: https://gitee.com/573059382/coder-programming欢迎关注并star~","categories":[{"name":"工具","slug":"工具","permalink":"http://yoursite.com/categories/%E5%B7%A5%E5%85%B7/"}],"tags":[{"name":"工具","slug":"工具","permalink":"http://yoursite.com/tags/%E5%B7%A5%E5%85%B7/"}]},{"title":"博客搭建-博客搭建完整教程","slug":"BLOG03-HEXO-JC","date":"2020-05-14T14:39:58.972Z","updated":"2020-05-14T16:22:08.404Z","comments":true,"path":"2020/05/14/BLOG03-HEXO-JC/","link":"","permalink":"http://yoursite.com/2020/05/14/BLOG03-HEXO-JC/","excerpt":"","text":"每天进步一点，不做curd工程师与Api调用工程师！ 欢迎大家访问我的博客：Coder编程——个人博客 前言其实早在三年前，刚毕业那会就在网上学着搭建自己的个人博客。后面由于其他原因（主要是懒）就没再继续管理。如今又为何重新拾起呢？ 第一：自己本身从毕业到工作也已经有了三年时间，或多或少有了一些工作经验和感悟。第二：平时有时间的时候，自己也会看看博客，写写文章（划划水）。第三：工作这么久，也要记录一下自己的学习记录，分享给大家。…. 下面的开始写教程了，这篇教程主要参考： https://www.itrhx.com/ 他的教程写的非常详细！本文也主要参考他写的内容，并修改~ 推荐文章： 《我为什么写博客》 （By 知明所以） 《为什么你应该（从现在开始就）写博客》 (By 刘未鹏 | Mind Hacks) 1. 概念1.1 Github PagesGithub Pages可以被认为是用户编写的、托管在github上的静态网页。使用Github Pages可以为你提供一个免费的服务器，免去了自己搭建服务器和写数据库的麻烦。此外还可以绑定自己的域名。 类似Github Pages的 Gitee Pages Gitlab Pages Coding 等等 后续我也会写文章专门介绍，这几个Pages的搭建过程，欢迎大家关注~ 1.2 HexoHexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。 2. 环境安装2.1 安装Node.js访问官网，按需下载相应版本，默认安装可以了。 更多详细教程： https://www.runoob.com/nodejs/nodejs-install-setup.html https://blog.csdn.net/antma/article/details/86104068 2.2 安装Git访问官网，按需下载相应版本，默认安装即可。 更多详细教程： Win10安装：https://blog.csdn.net/qq_32786873/article/details/80570783 Mac安装：https://www.jianshu.com/p/b91f848655af 2.3 检查软件是否安装成功同时按下 Win 键和 R 键打开运行窗口,输入 cmd ，然后输入以下命令，有相应版本信息显示则安装成功，若不正确可以卸载软件重新安装，此外若安装成功，在桌面右键鼠标，可以看到菜单里多了 Git GUI Here 和 Git Bash Here两个选项，第一个是图形界面的Git操作，另一个是命令行 123$ git --version$ node -v$ npm -v 正确输出版本号，说明安装成功了~ 3. Hexo安装正在编写。。。","categories":[{"name":"HEXO","slug":"HEXO","permalink":"http://yoursite.com/categories/HEXO/"}],"tags":[{"name":"HEXO","slug":"HEXO","permalink":"http://yoursite.com/tags/HEXO/"}]},{"title":"博客搭建-设置标签/分类/归档相关页面","slug":"BLOG02-HEXO-BQFLGD","date":"2020-05-12T08:47:59.726Z","updated":"2020-05-12T09:29:11.871Z","comments":true,"path":"2020/05/12/BLOG02-HEXO-BQFLGD/","link":"","permalink":"http://yoursite.com/2020/05/12/BLOG02-HEXO-BQFLGD/","excerpt":"","text":"每天进步一点，不做curd工程师与Api调用工程师 前言最近晚上有时间就忙着倒腾自己的博客网站：https://www.coder-programming.cn/ 网站还在建设当中，我会慢慢分享自己的搭建博客的过程和遇到的问题，在这里与大家一起分享！ 设置标签页面主题的 _config.yml 文件中，找到如下配置menu_desktop 或者 menu_mobile。(注意：填写的路径要对应上) 在\\source\\tags 中新建index.md。写入以下内容即可。 12345---layout: tagindex: truetitle: 所有标签--- 在需要发布的文章同样注意加入tags。举个栗子： 12345678910111213---title: Java学习路线整理updated: 2020-03-19 00:34:14date: 2020-03-19 00:34:14categories: - [Java] - [面试]tags: - [Java] - [面试] top: true--- 效果如图： 设置分类页面主题的 _config.yml 文件中，找到如下配置menu_desktop 或者 menu_mobile。(注意：填写的路径要对应上) 在\\source\\categories 中新建index.md。写入以下内容即可。 1234---layout: categorytitle: 所有分类--- 在需要发布的文章同样注意加入tags。举个栗子： 12345678910111213---title: Java学习路线整理updated: 2020-03-19 00:34:14date: 2020-03-19 00:34:14categories: - [Java] - [面试]tags: - [Java] - [面试] top: true--- 效果如图： 设置归档页面归档页面不要添加任何文件！归档页面不要添加任何文件！归档页面不要添加任何文件！重要的事说三遍！ 只需要在主题的 _config.yml 文件中，找到如下配置menu_desktop 或者 menu_mobile。(注意：填写的路径要对应上), 填写archives/即可。 效果如图： 推荐[博客搭建] 增加百度统计功能 ProcessOn是一个在线作图工具的聚合平台~ 文末 欢迎关注个人微信公众号：Coder编程欢迎关注Coder编程公众号，主要分享数据结构与算法、Java相关知识体系、框架知识及原理、Spring全家桶、微服务项目实战、DevOps实践之路、每日一篇互联网大厂面试或笔试题以及PMP项目管理知识等。更多精彩内容正在路上~新建了一个qq群：315211365，欢迎大家进群交流一起学习。谢谢了！也可以介绍给身边有需要的朋友。 文章收录至Github: https://github.com/CoderMerlin/coder-programmingGitee: https://gitee.com/573059382/coder-programming欢迎关注并star~","categories":[{"name":"HEXO","slug":"HEXO","permalink":"http://yoursite.com/categories/HEXO/"}],"tags":[{"name":"HEXO","slug":"HEXO","permalink":"http://yoursite.com/tags/HEXO/"}]},{"title":"博客搭建-增加百度统计功能","slug":"BLOG01-HEXO-BDTJ","date":"2020-05-12T06:49:55.625Z","updated":"2020-05-12T09:15:28.149Z","comments":true,"path":"2020/05/12/BLOG01-HEXO-BDTJ/","link":"","permalink":"http://yoursite.com/2020/05/12/BLOG01-HEXO-BDTJ/","excerpt":"","text":"每天进步一点，不做curd工程师与Api调用工程师 前言最近晚上有时间就忙着倒腾自己的博客网站：https://www.coder-programming.cn/ 网站还在建设当中，我会慢慢分享自己的搭建博客的过程和遇到的问题，在这里与大家一起分享！ 百度统计是百度推出的一款免费的专业网站流量分析工具，能够告诉用户访客是如何找到并浏览用户的网站，在网站上做了些什么，非常有趣，接下来我们把百度统计添加到自己博客当中 访问百度统计首页，注册一个账号后登陆，添加你的博客网站 点击增加网站,填写个人网站的信息。 接着点击代码获取，复制该代码 然后到目录\\themes\\hexo-theme-material-x\\layout\\_partial\\head.ejs，里面粘贴你刚刚复制的代码。代码如下： 123456789101112&lt;% if (config.baidu_analytics_key) &#123; %&gt; &lt;!-- ba --&gt; &lt;script&gt; var _hmt &#x3D; _hmt || []; (function() &#123; var hm &#x3D; document.createElement(&quot;script&quot;); hm.src &#x3D; &quot;https:&#x2F;&#x2F;hm.baidu.com&#x2F;hm.js?&lt;%&#x3D; config.baidu_analytics_key %&gt;&quot;; var s &#x3D; document.getElementsByTagName(&quot;script&quot;)[0]; s.parentNode.insertBefore(hm, s); &#125;)(); &lt;&#x2F;script&gt; &lt;% &#125; %&gt; 修改博客根目录下的 _config.yml 文件(注意：不是主题下的_config.yml)，将你的key填写进去： 所有操作完成后可以在百度统计管理页面检查代码是否安装成功，如果代码安装正确，一般20分钟后，可以查看网站分析数据 另外推荐：友盟，2010年4月在北京成立，安全、可靠、公正、第三方的网站流量统计分析系统 参考：https://www.itrhx.com/2018/08/27/A04-Hexo-blog-topic-personalization/ 推荐ProcessOn是一个在线作图工具的聚合平台~ 文末 欢迎关注个人微信公众号：Coder编程欢迎关注Coder编程公众号，主要分享数据结构与算法、Java相关知识体系、框架知识及原理、Spring全家桶、微服务项目实战、DevOps实践之路、每日一篇互联网大厂面试或笔试题以及PMP项目管理知识等。更多精彩内容正在路上~新建了一个qq群：315211365，欢迎大家进群交流一起学习。谢谢了！也可以介绍给身边有需要的朋友。 文章收录至Github: https://github.com/CoderMerlin/coder-programmingGitee: https://gitee.com/573059382/coder-programming欢迎关注并star~","categories":[{"name":"HEXO","slug":"HEXO","permalink":"http://yoursite.com/categories/HEXO/"}],"tags":[{"name":"HEXO","slug":"HEXO","permalink":"http://yoursite.com/tags/HEXO/"},{"name":"百度统计","slug":"百度统计","permalink":"http://yoursite.com/tags/%E7%99%BE%E5%BA%A6%E7%BB%9F%E8%AE%A1/"}]},{"title":"Java学习路线整理","slug":"java","date":"2020-03-18T16:34:14.000Z","updated":"2020-03-18T16:34:14.000Z","comments":true,"path":"2020/03/19/java/","link":"","permalink":"http://yoursite.com/2020/03/19/java/","excerpt":"面试 《剑指Offer》（豆瓣评分 8.3，0.7K+人评价） … 程序员代码面试指南：IT名企算法与数据结构题目最优解（第2版） （豆瓣评分 8.7，0.2K+人评价） … 编程之美（豆瓣评分 8.4，3K+人评价） … …","text":"Java 基础 并发 JVM Java8 新特性 代码优化 网络 操作系统 数据结构 算法 入门 经典 面试 数据库 系统设计 设计模式 常用框架 Spring/SpringBoot Netty 分布式 网站架构 软件底层 其他 其他 Java基础 《Head First Java》 ： 可以说是我的 Java 启蒙书籍了，特别适合新手读当然也适合我们用来温故 Java 知识点。 《Java 核心技术卷 1+卷 2》: 很棒的两本书，建议有点 Java 基础之后再读，介绍的还是比较深入的，非常推荐。这两本书我一般也会用来巩固知识点或者当做工具书参考，是两本适合放在自己身边的好书。 《Java 编程思想 (第 4 版)》（推荐，豆瓣评分 9.1，3.2K+人评价）：大部分人称之为Java领域的圣经，但我不推荐初学者阅读，有点劝退的味道。稍微有点基础后阅读更好。 《JAVA 网络编程 第 4 版》： 可以系统的学习一下网络的一些概念以及网络编程在 Java 中的使用。 《Java性能权威指南》：O’Reilly 家族书，性能调优的入门书，我个人觉得性能调优是每个 Java 从业者必备知识，这本书的缺点就是太老了，但是这本书可以作为一个实战书，尤其是 JVM 调优！不适合初学者。前置书籍：《深入理解 Java 虚拟机》 并发 《Java 并发编程之美》 ：我觉得这本书还是非常适合我们用来学习 Java 多线程的。这本书的讲解非常通俗易懂，作者从并发编程基础到实战都是信手拈来。 另外，这本书的作者加多自身也会经常在网上发布各种技术文章。我觉得这本书也是加多大佬这么多年在多线程领域的沉淀所得的结果吧！他书中的内容基本都是结合代码讲解，非常有说服力！ 《实战 Java 高并发程序设计》： 这个是我第二本要推荐的书籍，比较适合作为多线程入门/进阶书籍来看。这本书内容同样是理论结合实战，对于每个知识点的讲解也比较通俗易懂，整体结构也比较清。 《深入浅出 Java 多线程》：这本书是几位大厂（如阿里）的大佬开源的，Github 地址：https://github.com/RedSpider1/concurrent几位作者为了写好《深入浅出 Java 多线程》这本书阅读了大量的 Java 多线程方面的书籍和博客，然后再加上他们的经验总结、Demo 实例、源码解析，最终才形成了这本书。这本书的质量也是非常过硬！给作者们点个赞！这本书有统一的排版规则和语言风格、清晰的表达方式和逻辑。并且每篇文章初稿写完后，作者们就会互相审校，合并到主分支时所有成员会再次审校，最后再通篇修订了三遍。 《Java 并发编程的艺术》 ：这本书不是很适合作为 Java 多线程入门书籍，需要具备一定的 JVM 基础，有些东西讲的还是挺深入的。另外，就我自己阅读这本书的感觉来说，我觉得这本书的章节规划有点杂乱，但是，具体到某个知识点又很棒！这可能也和这本书由三名作者共同编写完成有关系吧！ …… JVM 《深入理解 Java 虚拟机（第 3 版）》）：必读！必读！必读！神书，建议多刷几篇。里面不光有丰富地JVM理论知识，还有JVM实战案例！必读！ 《实战 JAVA 虚拟机》：作为入门的了解 Java 虚拟机的知识还是不错的。 Java8 新特性 《Java 8 实战》：面向 Java 8 的技能升级，包括 Lambdas、流和函数式编程特性。实战系列的一贯风格让自己快速上手应用起来。Java 8 支持的 Lambda 是精简表达在语法上提供的支持。Java 8 提供了 Stream，学习和使用可以建立流式编程的认知。 《Java 8 编程参考官方教程》：建议当做工具书来用！哪里不会翻哪里！ 代码优化 《重构_改善既有代码的设计》：豆瓣 9.1 分，重构书籍的开山鼻祖。 《Effective java 》：本书介绍了在 Java 编程中很多极具实用价值的经验规则，这些经验规则涵盖了大多数开发人员每天所面临的问题的解决方案。这篇文章能够非常实际地帮助你写出更加清晰、健壮和高效的代码。本书中的每条规则都以简短、独立的小文章形式出现，并通过例子代码加以进一步说明。 《代码整洁之道》：虽然是用 Java 语言作为例子，全篇都是在阐述 Java 面向对象的思想，但是其中大部分内容其它语言也能应用到。 阿里巴巴 Java 开发手册 ：https://github.com/alibaba/p3c Google Java 编程风格指南： http://www.hawstein.com/posts/google-java-style.html 网络 《图解 HTTP》： 讲漫画一样的讲 HTTP，很有意思，不会觉得枯燥，大概也涵盖也 HTTP 常见的知识点。因为篇幅问题，内容可能不太全面。不过，如果不是专门做网络方向研究的小伙伴想研究 HTTP 相关知识的话，读这本书的话应该来说就差不多了。 《HTTP 权威指南》:如果要全面了解 HTTP 非此书不可！ 操作系统 《鸟哥的 Linux 私房菜》：本书是最具知名度的 Linux 入门书《鸟哥的 Linux 私房菜基础学习篇》的最新版，全面而详细地介绍了 Linux 操作系统。 数据结构 《大话数据结构》：入门类型的书籍，读起来比较浅显易懂，适合没有数据结构基础或者说数据结构没学好的小伙伴用来入门数据结构。 算法入门 《我的第一本算法书》 （豆瓣评分 7.1，0.2K+人评价） 一本不那么“专业”的算法书籍。和下面两本推荐的算法书籍都是比较通俗易懂，“不那么深入”的算法书籍。我个人非常推荐，配图和讲解都非常不错！ 《算法图解》（豆瓣评分 8.4，1.5K+人评价） ：入门类型的书籍，读起来比较浅显易懂，非常适合没有算法基础或者说算法没学好的小伙伴用来入门。示例丰富，图文并茂，以让人容易理解的方式阐释了算法.读起来比较快，内容不枯燥！ 《啊哈!算法》 （豆瓣评分 7.7，0.5K+人评价） ：和《算法图解》类似的算法趣味入门书籍。 经典 下面这些书籍都是经典中的经典，但是阅读起来难度也比较大，不做太多阐述，神书就完事了！推荐先看 《算法》，然后再选下面的书籍进行进一步阅读。不需要都看，找一本好好看或者找某本书的某一个章节知识点好好看。 《算法 第四版》（豆瓣评分 9.3，0.4K+人评价）： 我在大二的时候被我们的一个老师强烈安利过！自己也在当时购买了一本放在宿舍，到离开大学的时候自己大概看了一半多一点。因为内容实在太多了！另外，这本书还提供了详细的Java代码，非常适合学习 Java 的朋友来看，可以说是 Java 程序员的必备书籍之一了。再来介绍一下这本书籍吧！这本书籍算的上是算法领域经典的参考书，全面介绍了关于算法和数据结构的必备知识，并特别针对排序、搜索、图处理和字符串处理进行了论述。 编程珠玑（豆瓣评分 9.1，2K+人评价） ：经典名著，被无数读者强烈推荐的书籍，几乎是顶级程序员必看的书籍之一了。这本书的作者也非常厉害，Java之父 James Gosling 就是他的学生。很多人都说这本书不是教你具体的算法，而是教你一种编程的思考方式。这种思考方式不仅仅在编程领域适用，在其他同样适用。 《算法设计手册》（豆瓣评分9.1 ， 45人评价） :被 Teach Yourself Computer Science 强烈推荐的一本算法书籍。 《算法导论》 （豆瓣评分 9.2，0.4K+人评价） 《计算机程序设计艺术（第1卷）》（豆瓣评分 9.4，0.4K+人评价） 面试 《剑指Offer》（豆瓣评分 8.3，0.7K+人评价）这本面试宝典上面涵盖了很多经典的算法面试题，如果你要准备大厂面试的话一定不要错过这本书。《剑指Offer》 对应的算法编程题部分的开源项目解析：CodingInterviews 程序员代码面试指南：IT名企算法与数据结构题目最优解（第2版） （豆瓣评分 8.7，0.2K+人评价） ：题目相比于《剑指 offer》 来说要难很多，题目涵盖面相比于《剑指 offer》也更加全面。全书一共有将近300道真实出现过的经典代码面试题。 编程之美（豆瓣评分 8.4，3K+人评价）：这本书收集了约60道算法和程序设计题目，这些题目大部分在近年的笔试、面试中出现过，或者是被微软员工热烈讨论过。作者试图从书中各种有趣的问题出发，引导读者发现问题，分析问题，解决问题，寻找更优的解法。 数据库MySQL: 《高性能 MySQL》：这本书不用多说了把！MySQL 领域的经典之作，拥有广泛的影响力。不但适合数据库管理员（dba）阅读，也适合开发人员参考学习。不管是数据库新手还是专家，相信都能从本书有所收获。如果你的时间不够的话，第5章关于索引的内容和第6章关于查询的内容是必读的！ 《MySQL 技术内幕-InnoDB 存储引擎》（推荐，豆瓣评分 8.7）：了解 InnoDB 存储引擎底层原理必备的一本书，比较深入。 Redis: 《Redis 实战》：如果你想了解 Redis 的一些概念性知识的话，这本书真的非常不错。 《Redis 设计与实现》：也还行吧！ 系统设计设计模式 《设计模式 : 可复用面向对象软件的基础》 ：设计模式的经典！ 《Head First 设计模式（中文版）》 ：相当赞的一本设计模式入门书籍。用实际的编程案例讲解算法设计中会遇到的各种问题和需求变更（对的，连需求变更都考虑到了！），并以此逐步推导出良好的设计模式解决办法。 《大话设计模式》 ：本书通篇都是以情景对话的形式，用多个小故事或编程示例来组织讲解GOF(即《设计模式 : 可复用面向对象软件的基础》这本书))，但是不像《设计模式 : 可复用面向对象软件的基础》难懂。但是设计模式只看书是不够的，还是需要在实际项目中运用，在实战中体会。 常用框架Spring/SpringBoot 《Spring 实战（第 4 版）》 ：不建议当做入门书籍读，入门的话可以找点国人的书或者视频看。这本定位就相当于是关于 Spring 的新华字典，只有一些基本概念的介绍和示例，涵盖了 Spring 的各个方面，但都不够深入。就像作者在最后一页写的那样：“学习 Spring，这才刚刚开始”。 《Spring源码深度解析 第2版》 ：读Spring源码必备的一本书籍。市面上关于Spring源码分析的书籍太少了。 《Spring 5高级编程（第5版）》 ：推荐阅读，对于Spring5的新特性介绍的很好！不过内容比较多，可以作为工具书参考。 《精通Spring4.x企业应用开发实战》 :通过实战讲解，比较适合作为Spring入门书籍来看。 《Spring入门经典》 ：适合入门，也有很多示例！ 《Spring Boot实战派》 ：这本书使用的Spring Boot 2.0+的版本，还算比较新。整本书采用“知识点+实例”的形式编写。本书通过“58个基于知识的实例+2个综合性的项目”，深入地讲解Spring Boot的技术原理、知识点和具体应用；把晦涩难懂的理论用实例展现出来，使得读者对知识的理解变得非常容易，同时也立即学会如何使用它。说实话，我还是比较推荐这本书的。 《Spring Boot编程思想（核心篇）》 ：SpringBoot深入书，不适合初学者。书尤其的厚，这本书的缺点是书的很多知识点的讲解过于啰嗦和拖沓，优点是书中对SpringBoot内部原理讲解很清楚。 Netty 《Netty进阶之路：跟着案例学Netty》 : 这本书的优点是有不少实际的案例的讲解，通过案例来学习是很不错的！ 《Netty 4.x 用户指南》 ：《Netty 4.x 用户指南》中文翻译（包含了官方文档以及其他文章）。 《Netty 入门与实战：仿写微信 IM 即时通讯系统》 ：基于 Netty 框架实现 IM 核心系统，带你深入学习 Netty 网络编程核心知识 《Netty 实战》 ：可以作为工具书参考！ 分布式 《从 Paxos 到 Zookeeper》：简要介绍几种典型的分布式一致性协议，以及解决分布式一致性问题的思路，其中重点讲解了 Paxos 和 ZAB 协议。同时，本书深入介绍了分布式一致性问题的工业解决方案——ZooKeeper，并着重向读者展示这一分布式协调框架的使用方法、内部实现及运维技巧，旨在帮助读者全面了解 ZooKeeper，并更好地使用和运维 ZooKeeper。 《RabbitMQ 实战指南》：《RabbitMQ 实战指南》从消息中间件的概念和 RabbitMQ 的历史切入，主要阐述 RabbitMQ 的安装、使用、配置、管理、运维、原理、扩展等方面的细节。如果你想浅尝 RabbitMQ 的使用，这本书是你最好的选择；如果你想深入 RabbitMQ 的原理，这本书也是你最好的选择；总之，如果你想玩转 RabbitMQ，这本书一定是最值得看的书之一 《Spring Cloud 微服务实战》：从时下流行的微服务架构概念出发，详细介绍了 Spring Cloud 针对微服务架构中几大核心要素的解决方案和基础组件。对于各个组件的介绍，《Spring Cloud 微服务实战》主要以示例与源码结合的方式来帮助读者更好地理解这些组件的使用方法以及运行原理。同时，在介绍的过程中，还包含了作者在实践中所遇到的一些问题和解决思路，可供读者在实践中作为参考。 网站架构 《大型网站技术架构：核心原理与案例分析+李智慧》:这本书我读过，基本不需要你有什么基础啊~读起来特别轻松，但是却可以学到很多东西，非常推荐了。另外我写过这本书的思维导图，关注我的微信公众号：“Java 面试通关手册”回复“大型网站技术架构”即可领取思维导图。 《亿级流量网站架构核心技术》：一书总结并梳理了亿级流量网站高可用和高并发原则，通过实例详细介绍了如何落地这些原则。本书分为四部分：概述、高可用原则、高并发原则、案例实战。从负载均衡、限流、降级、隔离、超时与重试、回滚机制、压测与预案、缓存、池化、异步化、扩容、队列等多方面详细介绍了亿级流量网站的架构核心技术，让读者看后能快速运用到实践项目中。 软件底层 《深入剖析 Tomcat》：本书深入剖析 Tomcat 4 和 Tomcat 5 中的每个组件，并揭示其内部工作原理。通过学习本书，你将可以自行开发 Tomcat 组件，或者扩展已有的组件。 读完这本书，基本可以摆脱背诵面试题的尴尬。 《深入理解 Nginx（第 2 版）》：作者讲的非常细致，注释都写的都很工整，对于 Nginx 的开发人员非常有帮助。优点是细致，缺点是过于细致，到处都是代码片段，缺少一些抽象。 其他 《深入分析 Java Web 技术内幕》： 感觉还行，涉及的东西也蛮多。 其他 《黑客与画家》：这本书是硅谷创业之父，Y Combinator 创始人 Paul Graham 的文集。之所以叫这个名字，是因为作者认为黑客（并非负面的那个意思）与画家有着极大的相似性，他们都是在创造，而不是完成某个任务。 《图解密码技术》：本书以图配文的形式，第一部分讲述了密码技术的历史沿革、对称密码、分组密码模式（包括ECB、CBC、CFB、OFB、CTR）、公钥、混合密码系统。第二部分重点介绍了认证方面的内容，涉及单向散列函数、消息认证码、数字签名、证书等。第三部分讲述了密钥、随机数、PGP、SSL/TLS 以及密码技术在现实生活中的应用。关键字：JWT 前置知识、区块链密码技术前置知识。属于密码知识入门书籍。 《人月神话》 、《程序开发心理学》 、《程序员修炼之道，从小工道专家》、 《高效程序员的45个习惯，敏捷开发修炼之道》 、《高效能程序员的修炼》 、《软技能，代码之外的生存之道》 、《程序员的职业素养》 、《程序员的思维修炼》","categories":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/categories/Java/"},{"name":"面试","slug":"面试","permalink":"http://yoursite.com/categories/%E9%9D%A2%E8%AF%95/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/tags/Java/"},{"name":"面试","slug":"面试","permalink":"http://yoursite.com/tags/%E9%9D%A2%E8%AF%95/"}]},{"title":"分享一些摘抄的优美句子~","slug":"good","date":"2020-01-14T14:14:44.789Z","updated":"2020-05-12T07:32:52.452Z","comments":true,"path":"2020/01/14/good/","link":"","permalink":"http://yoursite.com/2020/01/14/good/","excerpt":"我是你路上最后一个过客，最后一个春天，最后一场雪，最后一次求生的战争——保尔 艾吕雅","text":"1.有一个夜晚我烧毁了所有的记忆，从此我的梦就透明了。有一个早晨我扔掉了所有的昨天，从此我的脚步就轻盈了。——泰戈尔 2.我是你路上最后一个过客，最后一个春天，最后一场雪，最后一次求生的战争——保尔 艾吕雅 3.虽然我已经十年没见过他，但我知道我会永远想念他。后来我再也没有交过像十二岁时那帮人一样的好朋友。也许，每个人都是这样——罗伯莱纳 4.在喧闹、混杂的生活中你应该与你的内心和平相处。尽管这世上有很多假冒和欺骗，有很多单调乏味的工作和众多破灭的梦幻，他仍然是一个美好的世界。记住：你应该努力的追求幸福。（此文于1692年镌于巴尔的摩圣保罗教堂） 5.我开始真正爱自己，我不再继续沉溺于过去，也不再为明天而忧虑，现在的我只活在一切在发生的当下，今天我活在此时此地，如此日复一日，这就叫”完美”。——《当我开始爱自己》 6.如果有一天你不再寻找爱情，只是去爱；你不再渴望成功，只是去做；你不再追逐成长，只是去修；一切才真正开始——纪伯伦 7.我原谅了从前的自己，就像谅解了一个野心勃勃的傻逼，体恤了一个笨手笨脚的勇士，释怀了一个难以启齿的秘密。 8.原来可以这样爱你，什么也可以说，什么也可以不说。让我采一束月光吧！插在今夜我寂寥的窗前。过了今夜，我不会再有力气为你写诗和流泪。——海烟 9.我不知该如何珍藏明里这份温暖，也不知该将她的灵魂带往何处。我清楚地明白，我们无法保证将来能够永远在一起。横亘在我们面前的是那沉重的人生于漫长时间，让人不由得产生一种无力感——新海诚 10.此刻有谁在世上某处哭，无缘无故在世上哭，在哭我。此刻有谁在夜间某处笑，无缘无故的在夜间笑，在笑我。此刻有谁在世上某处走，无缘无故的在世上走，走向我。此刻有谁在世上某处死，无缘无故在世上死，望着我。——里尔克 11.不惋惜，不呼唤，我也不啼哭。一切将逝去。如苹果花丛的薄雾。金黄的落叶堆满心间，我已不再是青春少年——叶赛宁 12.多希望我知道如何放弃你，你什么都没留给我却活在我心里。 13.最要紧的是，我们首先应该知道善良，其次要诚实，再其次是以后永远不要互相遗忘。 14.我向旧日的恋人道歉，因为我对新人如同初恋。——辛波斯卡 15.我永恒的灵魂，注视着你的心，纵然黑夜孤寂白昼如焚。——兰波 16.我常想，如果我拍够了足够的照片，我就不会再失去任何人。事实上，我的照片让我看到了我失去了多少——南戈尔丁 17.知识让我们愤世嫉俗，聪明让我们铁石心肠。我们想的太多，同情太少，除了机器我们更需要善良，没有这些品质，生命就没有意义。——卓别林 18.你别赤脚走在这片草地上散步，我怕我的花园到处都是星星的碎片。——伊迪斯 索德格朗 19.身体里的碳可以制成九千支铅笔，赠给诗人。身体里的铁，只够打成一枚铁钉，就钉在爱人的心上。 20.岁月有加，并非垂老。理想丢弃，方坠暮年。岁月悠悠，衰微只及肌肤。热忱抛却，颓废必致灵魂。——塞缪尔 厄尔曼 21.情不知所起，一往而深——汤显祖 22.渐渐觉得，友谊这个东西已经被世人捧的太高，它跟永恒其实没有太大关系。换了空间时间，总会有人离去。也总会有与当下的你心有相同的同伴不断出现，来陪你走接下来或短或长的人生。所以不要太念念不忘。也不要期待有什么回响。你要从同路者中寻找同伴，而非硬拽着旧人一起上路。 23.世界上最大的勇气，是压力下的优雅。——海明威 24.为你，千千万万遍——卡勒德 胡塞尼 25.你，一会看我一会看云；你看我时很远，你看云时很近——顾城 26.草在结它的种子 树在摇它的叶子 我们站着 不说话 就十分美好 ——顾城《门前》 27.曾国藩的交友原则，八交九不交： 八交：胜己者；盛德者；趣味者；肯吃亏者；直言者；志趣广大者；惠在当厄者；体人者 九不交：志不同者；谀人者；恩怨颠倒者；全无性情者；不孝不悌者；迂人者；落井下石者；德薄者；好占便宜者。 28.那一天我二十一岁，在我一生的黄金时代。我有好多奢望。我想爱，我想吃，我还想一瞬间变成天上半明半暗的云。——王小波《黄金时代》 29.从童年起，我便独自一人照顾着历代星辰——《孤独》白鹤林 30.这样看你，用所有的眼睛和所有距离，就像风住了，风又起——《沉溺》冯唐 31.人时已尽，人世很长。我在中间应当休息，走过的人说树枝低了，走过的人说树枝在长。——《墓床》顾城 32.万物皆有裂痕，那是光进来的地方。——莱昂纳德 科恩 33.成功只有一种，那就是用自己喜欢的方式度过一生——《明朝那些事》原出于美国记者 34.生活永远不可能像你想象的那么好，但也不会像你想象的那么糟，无论是好的还是糟糕的时候都需要坚强——《人生》莫泊桑 35.谁这时没有房屋，就不必建筑；谁这时孤独，就永远孤独，就醒着，读着，写着长信。在林荫道上来回，不安的游荡，当落叶纷飞。——《秋日》里尔克 36.也许，我太会隐藏自己的悲伤；也许我太会安慰自己的伤；从阴雨走到艳阳，我路过泥泞，路过风——《你若懂我 该多好》 37.我想无论是在塞纳河还是滹沱河边，我们两个人都已经放下彼此，所以我并没有等，她也不会在那个路灯下了，那个灯光下笑盈盈的她和慌张无力却又自大的我，永远属于了二十出头的我们，仅止于此我很满足，毕竟我们都要朝着让自己幸福努力。 38.一个人有两个我，一个在黑暗中醒着，一个在光明中睡着——纪伯伦 39.若我会见到你，事隔经年，我如何向你招呼，以眼泪，以沉默——拜伦 40.枕上诗书闲处好，门前风景雨来佳——李清照 文末 欢迎关注个人微信公众号：Coder编程欢迎关注Coder编程公众号，主要分享数据结构与算法、Java相关知识体系、框架知识及原理、Spring全家桶、微服务项目实战、DevOps实践之路、每日一篇互联网大厂面试或笔试题以及PMP项目管理知识等。更多精彩内容正在路上~也分享一些杂文~ 文章收录至Github: https://github.com/CoderMerlin/coder-programmingGitee: https://gitee.com/573059382/coder-programming欢迎关注并star~","categories":[{"name":"美文","slug":"美文","permalink":"http://yoursite.com/categories/%E7%BE%8E%E6%96%87/"}],"tags":[{"name":"美文","slug":"美文","permalink":"http://yoursite.com/tags/%E7%BE%8E%E6%96%87/"}]},{"title":"Java面试集锦：25道线程类相关面试题与答案（一）","slug":"interview/java/A-thread01","date":"2019-11-14T13:45:00.000Z","updated":"2019-11-14T13:45:00.000Z","comments":true,"path":"2019/11/14/interview/java/A-thread01/","link":"","permalink":"http://yoursite.com/2019/11/14/interview/java/A-thread01/","excerpt":"线程是什么？进程是什么？二者有什么区别和联系？ 线程和进程各自有什么区别和优劣呢？ 创建线程有几种不同的方式？你喜欢哪一种？为什么？ 概括的解释下线程的几种可用状态? 点击查看更多","text":"每天进步一点，不做curd工程师与Api调用工程师欢迎访问个人网站：https://www.coder-programming.cn/ 1. 线程是什么？进程是什么？二者有什么区别和联系？（1）线程是CPU独立运行和独立调度的基本单位；（2）进程是资源分配的基本单位；是执行着的应用程序两者的联系：进程和线程都是操作系统所运行的程序运行的基本单元。 区别：（1）进程具有独立的空间地址，一个进程崩溃后，在保护模式下不会对其它进程产生影响。（2）线程只是一个进程的不同执行路径，线程有自己的堆栈和局部变量，但线程之间没有单独的地址空间，一个线程死掉就等于整个进程死掉。 进程是执行着的应用程序，而线程是进程内部的一个执行序列。一个进程可以有多个线程。线程又叫做轻量级进程。 2. 线程和进程各自有什么区别和优劣呢？进程是资源分配的最小单位，线程是程序执行的最小单位。 进程有自己的独立地址空间，每启动一个进程，系统就会为它分配地址空间，建立数据表来维护代码段、堆栈段和数据段，这种操作非常昂贵。而线程是共享进程中的数据的，使用相同的地址空间，因此CPU切换一个线程的花费远比进程要小很多，同时创建一个线程的开销也比进程要小很多。 线程之间的通信更方便，同一进程下的线程共享全局变量、静态变量等数据，而进程之间的通信需要以通信的方式（IPC)进行。不过如何处理好同步与互斥是编写多线程程序的难点。 但是多进程程序更健壮，多线程程序只要有一个线程死掉，整个进程也死掉了，而一个进程死掉并不会对另外一个进程造成影响，因为进程有自己独立的地址空间。 可参考文章 3. 创建线程有几种不同的方式？你喜欢哪一种？为什么？有三种方式可以用来创建线程： 继承Thread类 实现Runnable接口 应用程序可以使用Executor框架来创建线程池 实现Runnable接口这种方式更受欢迎，因为这不需要继承Thread类。在应用设计中已经继承了别的对象的情况下，这需要多继承（而Java不支持多继承），只能实现接口。同时，线程池也是非常高效的，很容易实现和使用。 4. 概括的解释下线程的几种可用状态?线程在执行过程中，可以处于下面几种状态： 就绪(Runnable):线程准备运行，不一定立马就能开始执行。 运行中(Running)：进程正在执行线程的代码。 等待中(Waiting):线程处于阻塞的状态，等待外部的处理结束。 睡眠中(Sleeping)：线程被强制睡眠。 I/O阻塞(Blocked on I/O)：等待I/O操作完成。 同步阻塞(Blocked on Synchronization)：等待获取锁。 死亡(Dead)：线程完成了执行。 5. 同步方法和同步代码块的区别是什么？在Java语言中，每一个对象有一把锁。线程可以使用synchronized关键字来获取对象上的锁。synchronized关键字可应用在方法级别(粗粒度锁)或者是代码块级别(细粒度锁)。 Java语言的关键字，当它用来修饰一个方法或者一个代码块的时候，能够保证在同一时刻最多只有一个线程执行该段代码。 （1）、当两个并发线程访问同一个对象object中的这个synchronized(this)同步代码块时，一个时间内只能有一个线程得到执行。另一个线程必须等待当前线程执行完这个代码块以后才能执行该代码块。 （2）、然而，当一个线程访问object的一个synchronized(this)同步代码块时，另一个线程仍然可以访问该object中的非synchronized(this)同步代码块。 （3）、尤其关键的是，当一个线程访问object的一个synchronized(this)同步代码块时，其他线程对object中所有其它synchronized(this)同步代码块的访问将被阻塞。 （4）、第三个例子同样适用其它同步代码块。也就是说，当一个线程访问object的一个synchronized(this)同步代码块时，它就获得了这个object的对象锁。结果，其它线程对该object对象所有同步代码部分的访问都被暂时阻塞。 （5）、以上规则对其它对象锁同样适用。 6. 在监视器(Monitor)内部，是如何做线程同步的？程序应该做哪种级别的同步？监视器和锁在Java虚拟机中是一块使用的。监视器监视一块同步代码块，确保一次只有一个线程执行同步代码块。每一个监视器都和一个对象引用相关联。线程在获取锁之前不允许执行同步代码。 7. 什么是死锁(deadlock)？两个进程都在等待对方执行完毕才能继续往下执行的时候就发生了死锁。结果就是两个进程都陷入了无限的等待中。 8. 如何确保N个线程可以访问N个资源同时又不导致死锁？使用多线程的时候，一种非常简单的避免死锁的方式就是：指定获取锁的顺序，并强制线程按照指定的顺序获取锁。因此，如果所有的线程都是以同样的顺序加锁和释放锁，就不会出现死锁了。 9. 如何避免死锁?多线程产生死锁的四个必要条件：互斥条件： 一个资源每次只能被一个进程使用。保持和请求条件： 一个进程因请求资源而阻塞时，对已获得资源保持不放。不可剥夺调教： 进程已获得资源，在未使用完成前，不能被剥夺。循环等待条件： 若干进程之间形成一种头尾相接的循环等待资源关系。 只要破坏其中任意一个条件，就可以避免死锁，其中最简单的就是破环循环等待条件。按同一顺序访问对象，加载锁，释放锁。 10. Thread 类中的start() 和 run() 方法有什么区别？start()方法被用来启动新创建的线程，使该被创建的线程状态变为可运行状态。当你调用run()方法的时候，只会是在原来的线程中调用，没有新的线程启动，start()方法才会启动新线程。如果我们调用了Thread的run()方法，它的行为就会和普通的方法一样，直接运行run（）方法。为了在新的线程中执行我们的代码，必须使用Thread.start()方法。 11. Java中Runnable和Callable有什么不同？Runnable和Callable都代表那些要在不同的线程中执行的任务。Runnable从JDK1.0开始就有了，Callable是在JDK1.5增加的。它们的主要区别是Callable的 call() 方法可以返回值和抛出异常，而Runnable的run()方法没有这些功能。Callable可以返回装载有计算结果的Future对象。 12. Java中什么是竞态条件？在大多数实际的多线程应用中，两个或两个以上的线程需要共享对同一数据的存取。如果i线程存取相同的对象，并且每一个线程都调用了一个修改该对象状态的方法，将会发生什么呢？可以想象，线程彼此踩了对方的脚。根据线程访问数据的次序，可能会产生讹误的对象。这样的情况通常称为竞争条件。 13. Java中如何停止一个线程？Java提供了很丰富的API但没有为停止线程提供API。JDK 1.0本来有一些像stop(), suspend() 和 resume()的控制方法，但是由于潜在的死锁威胁。因此在后续的JDK版本中他们被弃用了，之后Java API的设计者就没有提供一个兼容且线程安全的方法来停止一个线程。当run()或者 call() 方法执行完的时候线程会自动结束，如果要手动结束一个线程，可以用volatile 布尔变量来退出run()方法的循环或者是取消任务来中断线程。 14. Java中notify 和 notifyAll有什么区别？一个很明显的原因是JAVA提供的锁是对象级的而不是线程级的，每个对象都有锁，通过线程获得。如果线程需要等待某些锁那么调用对象中的wait()方法就有意义了。如果wait()方法定义在Thread类中，线程正在等待的是哪个锁就不明显了。简单的说，由于wait，notify和notifyAll都是锁级别的操作，所以把他们定义在Object类中因为锁属于对象。 15. Java中的同步集合与并发集合有什么区别？同步集合与并发集合都为多线程和并发提供了合适的线程安全的集合，不过并发集合的可扩展性更高。在Java1.5之前程序员们只有同步集合来用且在多线程并发的时候会导致争用，阻碍了系统的扩展性。Java5介绍了并发集合像ConcurrentHashMap，不仅提供线程安全还用锁分离和内部分区等现代技术提高了可扩展性。 16. 什么是线程池？线程池是一种多线程处理形式，处理过程中将任务提交到线程池，任务的执行交由线程池来管理。如果每个请求都创建一个线程去处理，那么服务器的资源很快就会被耗尽，使用线程池可以减少创建和销毁线程的次数，每个工作线程都可以被重复利用，可执行多个任务。 17. 为什么要使用线程池？创建线程和销毁线程的花销是比较大的，这些时间有可能比处理业务的时间还要长。这样频繁的创建线程和销毁线程，再加上业务工作线程，消耗系统资源的时间，可能导致系统资源不足。（我们可以把创建和销毁的线程的过程去掉） 18. 线程池有什么作用？线程池作用就是限制系统中执行线程的数量。 1、提高效率 创建好一定数量的线程放在池中，等需要使用的时候就从池中拿一个，这要比需要的时候创建一个线程对象要快的多。 2、方便管理 可以编写线程池管理代码对池中的线程同一进行管理，比如说启动时有该程序创建100个线程，每当有请求的时候，就分配一个线程去工作，如果刚好并发有101个请求，那多出的这一个请求可以排队等候，避免因无休止的创建线程导致系统崩溃。 19. 说说几种常见的线程池及使用场景?1、newSingleThreadExecutor创建一个单线程化的线程池，它只会用唯一的工作线程来执行任务，保证所有任务按照指定顺序(FIFO, LIFO, 优先级)执行。 2、newFixedThreadPool创建一个定长线程池，可控制线程最大并发数，超出的线程会在队列中等待。 3、newCachedThreadPool创建一个可缓存线程池，如果线程池长度超过处理需要，可灵活回收空闲线程，若无可回收，则新建线程。 4、newScheduledThreadPool创建一个定长线程池，支持定时及周期性任务执行。 20. 线程池中的几种重要的参数?corePoolSize就是线程池中的核心线程数量，这几个核心线程，只是在没有用的时候，也不会被回收 maximumPoolSize就是线程池中可以容纳的最大线程的数量 keepAliveTime，就是线程池中除了核心线程之外的其他的最长可以保留的时间，因为在线程池中，除了核心线程即使在无任务的情况下也不能被清除，其余的都是有存活时间的，意思就是非核心线程可以保留的最长的空闲时间。util，就是计算这个时间的一个单位。 workQueue，就是等待队列，任务可以储存在任务队列中等待被执行，执行的是FIFIO原则（先进先出）。 threadFactory，就是创建线程的线程工厂。 handler,是一种拒绝策略，我们可以在任务满了之后，拒绝执行某些任务。 21. 说说线程池的拒绝策略?当请求任务不断的过来，而系统此时又处理不过来的时候，我们需要采取的策略是拒绝服务。RejectedExecutionHandler接口提供了拒绝任务处理的自定义方法的机会。在ThreadPoolExecutor中已经包含四种处理策略。 AbortPolicy策略：该策略会直接抛出异常，阻止系统正常工作。 CallerRunsPolicy 策略：只要线程池未关闭，该策略直接在调用者线程中，运行当前的被丢弃的任务。 DiscardOleddestPolicy策略： 该策略将丢弃最老的一个请求，也就是即将被执行的任务，并尝试再次提交当前任务。 DiscardPolicy策略：该策略默默的丢弃无法处理的任务，不予任何处理。 除了JDK默认提供的四种拒绝策略，我们可以根据自己的业务需求去自定义拒绝策略，自定义的方式很简单，直接实现RejectedExecutionHandler接口即可。 22. execute和submit的区别？我们执行任务是用的execute方法，除了execute方法，还有一个submit方法也可以执行我们提交的任务。 这两个方法有什么区别呢？分别适用于在什么场景下呢？我们来做一个简单的分析。 execute适用于不需要关注返回值的场景，只需要将线程丢到线程池中去执行就可以了。 submit方法适用于需要关注返回值的场景 23. 五种线程池的使用场景? newSingleThreadExecutor：一个单线程的线程池，可以用于需要保证顺序执行的场景，并且只有一个线程在执行。 newFixedThreadPool：一个固定大小的线程池，可以用于已知并发压力的情况下，对线程数做限制。 newCachedThreadPool：一个可以无限扩大的线程池，比较适合处理执行时间比较小的任务。 newScheduledThreadPool：可以延时启动，定时启动的线程池，适用于需要多个后台线程执行周期任务的场景。 newWorkStealingPool：一个拥有多个任务队列的线程池，可以减少连接数，创建当前可用cpu数量的线程来并行执行。 24. 线程池如何关闭? 初始化线程池时线程数的选择？关闭线程池可以调用shutdownNow和shutdown两个方法来实现 shutdownNow：对正在执行的任务全部发出interrupt()，停止执行，对还未开始执行的任务全部取消，并且返回还没开始的任务列表。 shutdown：当我们调用shutdown后，线程池将不再接受新的任务，但也不会去强制终止已经提交或者正在执行中的任务。 如果任务是IO密集型，一般线程数需要设置2倍CPU数以上，以此来尽量利用CPU资源。 如果任务是CPU密集型，一般线程数量只需要设置CPU数加1即可，更多的线程数也只能增加上下文切换，不能增加CPU利用率。 上述只是一个基本思想，如果真的需要精确的控制，还是需要上线以后观察线程池中线程数量跟队列的情况来定。 25. 线程池都有哪几种工作队列？1、ArrayBlockingQueue 是一个基于数组结构的有界阻塞队列，此队列按 FIFO（先进先出）原则对元素进行排序。 2、LinkedBlockingQueue一个基于链表结构的阻塞队列，此队列按FIFO （先进先出） 排序元素，吞吐量通常要高于ArrayBlockingQueue。静态工厂方法Executors.newFixedThreadPool()使用了这个队列 3、SynchronousQueue 一个不存储元素的阻塞队列。每个插入操作必须等到另一个线程调用移除操作，否则插入操作一直处于阻塞状态，吞吐量通常要高于LinkedBlockingQueue，静态工厂方法Executors.newCachedThreadPool使用了这个队列。 4、PriorityBlockingQueue 一个具有优先级的无限阻塞队列。 推荐大厂笔试内容集合（内有详细解析） 持续更新中…. ProcessOn是一个在线作图工具的聚合平台~ 文末 欢迎关注个人微信公众号：Coder编程欢迎关注Coder编程公众号，主要分享数据结构与算法、Java相关知识体系、框架知识及原理、Spring全家桶、微服务项目实战、DevOps实践之路、每日一篇互联网大厂面试或笔试题以及PMP项目管理知识等。更多精彩内容正在路上~新建了一个qq群：315211365，欢迎大家进群交流一起学习。谢谢了！也可以介绍给身边有需要的朋友。 文章收录至Github: https://github.com/CoderMerlin/coder-programmingGitee: https://gitee.com/573059382/coder-programming欢迎关注并star~","categories":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/categories/Java/"},{"name":"面试","slug":"面试","permalink":"http://yoursite.com/categories/%E9%9D%A2%E8%AF%95/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/tags/Java/"},{"name":"面试","slug":"面试","permalink":"http://yoursite.com/tags/%E9%9D%A2%E8%AF%95/"},{"name":"多线程","slug":"多线程","permalink":"http://yoursite.com/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"}]},{"title":"Java基础笔试练习（二十一）","slug":"interview/java/B-bishi21","date":"2019-10-11T12:06:00.000Z","updated":"2019-10-11T12:06:00.000Z","comments":true,"path":"2019/10/11/interview/java/B-bishi21/","link":"","permalink":"http://yoursite.com/2019/10/11/interview/java/B-bishi21/","excerpt":"","text":"每天进步一点，不做curd工程师与Api调用工程师欢迎访问个人网站：https://www.coder-programming.cn/ 每天进步一点，不做curd工程师与Api调用工程师欢迎访问个人博客网站：https://www.coder-programming.cn/ 1.即使对不含相同元素的同一输入序列进行两组不同的合法的入栈和出栈组合操作,所得的输出序列也一定相同()A.对B.错 答案：B 解析：如序列abcd①：push a ,push b ,push c ,push d ,pop,pop,pop,pop 得到的序列是dcba②：push a, pop ,push b,pop,push c,pop ,push d,pop 得到的序列是abcd 2.设某棵三叉树中有40个结点，则该三叉树的最小高度为（）。A.3B.4C.5D.6 答案：B 解析：对于高度的理解，我们不管他数据结构什么什么知识，就拿楼房来说，假如一个人提问：楼房的高度有好高？我们会下意识的从底层开始往上数，假如楼有6层，则我们会说，这个楼有6层楼那么高，则提问者就会大概知道楼有多高了。所以高度就是以从下往上对比，这是我们的习惯。而在树中，树的高度也是从下往上数，如图所示 K节点在树的底层，是一个叶子节点，则一般定义为K的高度在最低为1，以此类推，O的高度也是为1，P的节点也是为1。M节点是叶子节点O的父节点，从下往上数，M节点高度为2。那么G节点的高度是多少呢？从G-L的高度为2，从G-M-O节点高度为3，到底G节点高度为多少呢，正确答案是3，请看定义：高度的定义为：从结点x向下到某个叶结点最长简单路径中边的条数 注意：对于是否是边的条数这个不清楚，待我后来查证，这个主要是由于其初值是1还是0来确定的，一般都是以1开始 希望高度最小，则是满三叉树的情况，1,3,9,27 3.红黑树中已经有n个数据，寻找某个key是否存在的时间复杂度为()。A.o(logn)B.o(n)C.o(n二次方)D.o(1) 答案：A 解析：红黑树是平衡二叉树，也就是左右子树是平衡的，高度大概相等。这种情况等价于一块完全二叉树的高度，查找的时间复杂度是树的高度，为logn 4.若一棵二叉树具有8个度为2的结点，5个度为1的结点，则度为0的结点个数是？A.6B.9C.11D.不确定 答案：B 解析： 题中度为2指的是有两个子节点， 度为1是1个子节点假设度0的节点有x个那个二叉树的边， 按照出节点来算个数为82 + 51按照入节点来算， 个数为8+5+x-1（减去根节点）边是一定的， 所以82 + 51 = 8+5+x-1x = 9 5.在任意一棵非空二叉排序树中，删除某结点后又将其插入，则所得二排序叉树与原二排序叉树相同。（）A.正确B.错误 答案：B 解析：只有被删除结点是叶子结点时命题才正确。 6.数组A中，每个元素的长度为3个字节，行下标i从1到8，列下标j从1到10，从首地址SA开始连续存放在存储器内，该数组按行存放时，元素A[8][5]的起始地址为（ ）。A.SA+141B.SA+144C.SA+222D.SA+225 答案：C 解析：陷阱：起始地址为上一地址的结束 首先，本题的数组是从A[1][1]开始的，也就是说和所谓的数组从零开始没什么关系。A[1][1]的起始地址为SA，那么A[1][2]为SA+3…..A[2][1]为SA+310…..A[i][j]为SA+(（i-1）10+(j-1))3。那么A[8][5]的起始地址就是SA+（710+4）*3=SA+222. 7.对于双向循环链表,在p指针所指的结点之后插入s指针所指结点的操作应为()A.p-&gt;right=s;s-&gt;left=p;p-&gt;right-&gt;left=s;s-&gt;right=p-&gt;right;B.p-&gt;right=s;p-&gt;right-&gt;left=s;s-&gt;left=p;s-&gt;right=p-&gt;right;C.s-&gt;left=p;s-&gt;right=p-&gt;right;p-&gt;right=s;p-&gt;right-&gt;left=s;D.s-&gt;left=p;s-&gt;right=p-&gt;right;p-&gt;right-&gt;left=s;p-&gt;right=s; 答案：D 解析：双向链表的插入顺序：先搞定插入节点的前驱和后继，在搞定后结点的前驱，最后搞定前结点的后继。 8.不带头结点的单链表head为空的判定条件是()?A.head==NULLB.head-&gt;next==NULLC.head!=NULLD.head-&gt;next==head 答案：A 解析：所为头结点，是为了使空链表和非空链表的处理统一而在链表的头部增加的一个节点，这样无论链表是否为空，头指针都指向头结点，头结点中不存数据而只是存放指向第一个节点的指针。没有头结点的链表，头指针就指向第一个节点。因此，单链表为空时，head==NULL。 9.树的基本遍历策略分为先根遍历和后根遍历；二叉树的基本遍历策略可分为先序遍历、中序遍历和后序遍历。结论()是正确的？A.树的先根遍历序列与其对应的二叉树的先序遍历序列相同B.树的后根遍历序列与其对应的二叉树的先序遍历序列相同C.树的先根遍历序列与其对应的二叉树的中序遍历序列相同D.以上都不对 答案：A 解析：一般树的先根序遍历与对应的二叉树的先根序遍历序列一致，后根序遍历与对应二叉树的中根序遍历序列相同 10.已知二叉树中有45个叶节点，有25个度为1的节点，则二叉树的总结点数为____。A.112B.113C.114D.115E.116F.117 答案：C 解析：二叉树的性质n0=n2+1的推导：所有节点=n0+n1+n2（即度为0+1+2的节点）=2*n2+n1+1（即分支总数+1）所以n=n0+n1+n2=44+45+25=114 11.节点按中序遍历为syz的二叉树可能有（）种A.2B.3C.4D.5 答案：D 解析：完全二叉树一种，全为左和全为右枝各一种，根左右和根右左各一种分别以S Y Z为根 S为根有2种 Y为根有1种 Z为根有2种 12. 分别以下列序列构造二叉排序树，与用其它三个序列所构造的结果不同的是()A.（100，80，90，60，120，110，130）B.（100，120，110，130，80，60，90）C.（100，60，80，90，120，110，130）D.（100，80，60，90，120，130，110） 答案：C 解析： 根据序列构造二叉排序树后 ABD都是满二叉树 C不是 所以选C 13.哈希查找中k个关键字具有同一哈希值，若用线性探测法将这k个关键字对应的记录存入哈希表中，至少要进行( )次探测。A.kB.k+1C.k(k+1)/2D.1+k(k+1)/2 答案：C 解析：问的是“至少”，那么设表原来为空表。第一个：直接找到坑，入坑，1次；第二个：和第一个同hash，找到坑被第一个给占了，找下一个，入坑，2次；第三个：第一个被占了，第二个也被占了，找第三个，入坑，3次；。。。第n个：n次；一共：（1+n）n / 2 次【开放地址法（除了随机探测）都是（1+n）n / 2 次】 14.在图采用邻接表存储时,求最小生成树的Prim算法的时间复杂度为()A.O(n)B.O(n+e)C.O(n^2)D.O(n^3) 答案：B 解析：Prim算法的时间复杂度邻接表存储时,是 O(n+e)图的时候 是O(n^2) 15.高度为1的平衡二叉树节点为1个，高度为5的最少多少个？A.10B.11C.12D.13 答案：C 解析：平衡二叉树是一 棵空树或它的左右两个子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树。 高度为5的话， 根的左子树高4， 右子树高3经推倒可以得出，高度与最小节点数对应关系是：1 -&gt; 12 -&gt; 23 -&gt; 44 -&gt; 75 -&gt; 12 16.一个有n个结点的连通图的生成树是原图的最小连通子图，且包含原图中所有n个结点，并且有保持图联通的最少的边。最大生成树就是权和最大生成树，现在给出一个无向带权图的邻接矩阵，权为0表示没有边。｛{0，4，5，0，3}，{4，0，4，2，3}，{5，4，0，2，0}，{0，2，2，0，1}，{3，3，0，1，0}｝，求这个图的最大生成树的权和。A.11B.12C.13D.14E.15 答案：D 解析： 17.向一个栈顶指针为hs的链栈中插入一个s结点时，应执行__。A.hs-&gt;next=s;B.s-&gt;next=hs; hs=s;C.s-&gt;next=hs-&gt;next;hs-&gt;next=s;D.s-&gt;next=hs; hs=hs-&gt;next; 答案：B 解析：往栈中插入数据，栈是向下生长的，由高地址到低地址，所以s节点就是在低地址处，hs指向原栈顶，插入s后，s是新的栈顶，s的地址比原栈顶hs地址低，所以是s-&gt;next=hs,最后hs=s更新栈顶指针指向 18.根据使用频率为 5 个字符设计的哈夫曼编码不可能是（ ）。A.000，001，010，011，1B.0000，0001，001，01，1C.000，001，01，10，11D.00，100，101，110，111 答案：D 解析：哈夫曼树的节点要么是叶子节点，要么是度为2的节点，不可能出现度为1的节点 19.一棵左子树为空的二叉树在前序线索化后,其中空的链域的个数是()A.不确定B.0C.1D.2 答案：D 解析：一棵左子树为空的二叉树,形态为右单支树,这样前序序列为根、右根…因为根结点在前序序列第一个,没有前序的前驱,这样根结点的左指针链域就是空的最下边的叶子（也就是最右边结点）是前序序列最后一个,没有前序的后继,因此该结点的右指针链域也是空的因此,空的链域合计2个 20.数组指针和指针数组有什么区别 ？A.数组指针只是一个指针变量，它占有内存中一个指针的存储空间B.指针数组只是一个指针变量，它占有内存中一个指针的存储空间C.指针数组是多个指针变量，以数组形式存在内存当中，占有多个指针的存储空间D.数组指针是多个指针变量，以数组形式存在内存当中，占有多个指针的存储空间 答案：AC 解析：数组指针只是一个指针变量，指向一个一维数组，它占有内存中一个指针的存储空间，指针数组是多个指针变量，以数组形式存在内存当中，占有多个指针的存储空间。 推荐 400道——大厂Java选择题 持续更新中…. ProcessOn是一个在线作图工具的聚合平台~ 文末文章收录至Github: https://github.com/CoderMerlin/coder-programmingGitee: https://gitee.com/573059382/coder-programming欢迎关注并star~","categories":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/categories/Java/"},{"name":"笔试","slug":"笔试","permalink":"http://yoursite.com/categories/%E7%AC%94%E8%AF%95/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/tags/Java/"},{"name":"笔试","slug":"笔试","permalink":"http://yoursite.com/tags/%E7%AC%94%E8%AF%95/"}]},{"title":"Java基础笔试练习（二十）","slug":"interview/java/B-bishi20","date":"2019-10-10T12:06:00.000Z","updated":"2019-10-10T12:06:00.000Z","comments":true,"path":"2019/10/10/interview/java/B-bishi20/","link":"","permalink":"http://yoursite.com/2019/10/10/interview/java/B-bishi20/","excerpt":"","text":"每天进步一点，不做curd工程师与Api调用工程师欢迎访问个人网站：https://www.coder-programming.cn/ 1.请给出程序最终输出内容。12345678910111213int i &#x3D; 3;String result &#x3D; new String();switch (i) &#123;case 1:result &#x3D; result + &quot;him &quot;;case 2:result &#x3D; result + &quot;her &quot;;case 3:result &#x3D; result + &quot;it &quot;;default:result &#x3D; result + &quot;me &quot;;&#125;System.out.println(result); A.it meB.him her it meC.him herD.me 答案：A 解析：根据switch()括号里的值，进行匹配，走相应的case。case没有break就继续往下走 2.下列描述中，错误的是（ ）A.java要求编程者管理内存B.java的安全性体现在多个层次上C.java中没有指针机制D.java有多线程机制 答案：A 解析：java与C 很大的一点区别就是java是不需要使用者关注内存分配以及管理的 3.Which is not Java primitive types?A.shortB.BooleanC.byteD.float 答案：B 解析：java规定类名首字母必须大写，这里可以直观的看出来Boolean是一个引用类型，不是基本数据类型。java中的基本数据类型都对应一个引用类型，如Float是float的引用类型，Integer是int的引用类型 4.下列说法正确的是（）A.在类方法中可用this来调用本类的类方法B.在类方法中调用本类的类方法时可直接调用C.在类方法中只能调用本类中的类方法D.在类方法中绝对不能调用实例方法 答案：B 解析：在类方法中不能有this关键字，直接调用类方法即可，A错误，B正确，在类方法中可以通过创建实例对象调用类的实例方法，C\\D错误 5.java语言中，按照一定格式生成程序的文档的工具是？A.javacB.javahC.javadocD.jar 答案：C 解析：jar 将许多文件组合成一个jar文件javac 编译javadoc 它从程序源代码中抽取类、方法、成员等注释形成一个和源代码配套的API帮助文档。javah 把java代码声明的JNI方法转化成C\\C++头文件。 6.以下程序的执行结果是：12345678910111213static boolean foo(char c) &#123; System.out.print(c); return true; &#125; public static void main(String[] args) &#123; int i &#x3D;0; for(foo(&#39;A&#39;);foo(&#39;B&#39;)&amp;&amp;(i&lt;2);foo(&#39;C&#39;)) &#123; i++; foo(&#39;D&#39;); &#125; &#125; A.ABDCBDCBB.ABCDABCDC.编译时出错D.运行时抛出异常 答案：A 解析：这题考察的应该是for循环的执行顺序：1只在开头执行一次便不再执行；然后是2-&gt;4-&gt;3-&gt;2-&gt;4-&gt;3这样循环下去；等到满足终止条件时到2就停止了。 7.对于Java中异常的描述正确的是（ ）A.用throws定义了方法可能抛出的异常，那么调用此方法时一定会抛出此异常。B.如果try块中没有抛出异常，finally块中的语句将不会被执行。C.抛出异常意味着程序发生运行时错误，需要调试修改D.Java中的可不检测（unchecked）异常可能来自RuntimeException类或其子类。 答案：D 解析：A错 在调用此方法的时候 也可以再次申明以将异常交由更高一级处理。B错 finally块中的语句一定会被执行。除非catch块中有System.exit(0)。C错 抛出异常不一定是运行时异常，也有可能是编译时异常。D对 运行时异常的特点是Java编译器不会检查它。 8.给出下列代码，第三行将输出什么？1234567891011121314151617public class SwitchTest&#123;&#x2F;&#x2F;1 public static void main(String[] args) &#123;&#x2F;&#x2F;2 System.out.println(&quot;value&#x3D;&quot;+switchit(4));&#x2F;&#x2F;3 &#125;&#x2F;&#x2F;4 public static int switchit(int x) &#123; int j&#x3D;1; switch (x) &#123; case 1:j++; case 2:j++; case 3:j++; case 4:j++; case 5:j++; default:j++; &#125; return j+x; &#125;&#125; A.value=6B.value=8C.value=3D.value=5E.value=4 答案：B 解析：没有break，从case 4开始一直执行到最后，j自加3次变成了4,结果返回8 9.以下代码执行的结果显示是多少（）？123456789101112131415161718192021222324public class Demo&#123; public static void main(String[] args)&#123; System.out.print(getNumber(0)); System.out.print(getNumber(1)); System.out.print(getNumber(2)); System.out.print(getNumber(4)); &#125; public static int getNumber(int num)&#123; try&#123; int result &#x3D; 2 &#x2F; num; return result; &#125;catch (Exception exception)&#123; return 0; &#125;finally&#123; if(num &#x3D;&#x3D; 0)&#123; return -1; &#125; if(num &#x3D;&#x3D; 1)&#123; return 1; &#125; &#125; &#125;&#125; A.0110B.-1110C.0211D.-1211 答案：B 解析：finally一定会在return之前执行，但是如果finally使用了return或者throw语句，将会使trycatch中的return或者throw失效 10.执行完以下代码 int [ ] x = new int[10] ；后，以下哪项说明是正确的（ ）A.x[9]为0B.x[9]未定义C.x[10]为0D.x[0]为空 答案：A 解析：数组定义后，默认元素为0 11.下列说法正确的有（）A.能被java.exe成功运行的java class文件必须有main()方法B.J2SDK就是Java APIC.Appletviewer.exe可利用jar选项运行.jar文件D.能被Appletviewer成功运行的java class文件必须有main()方法 答案：A 解析：B、C、D都错A：正确main方法是入口B：J2SDK当然不仅仅包含java APIC：jar选项是java.exe 的选项D：Appletviewer是运行applet的， applet 不用main方法，继承applet类即可。 12.假定Base b = new Derived（）; 调用执行b.methodOne（）后，输出结果是什么？12345678910111213141516171819202122232425262728public class Base&#123; public void methodOne() &#123; System.out.print(&quot;A&quot;); methodTwo(); &#125; public void methodTwo() &#123; System.out.print(&quot;B&quot;); &#125;&#125; public class Derived extends Base&#123; public void methodOne() &#123; super.methodOne(); System.out.print(&quot;C&quot;); &#125; public void methodTwo() &#123; super.methodTwo(); System.out.print(&quot;D&quot;); &#125;&#125; A.ABDCB.ABC.ABCDD.ABC 答案：A 解析：这是一道类多态的向上转型题。Base b = new Derived();向上转型：父类只能调用父类方法或者子类覆写后的方法,而子类中的单独方法则是无法调用的。因此：调用的顺序是：(1)、(2)、(3)、(4)、(5)、(6)、(7) ; 得到的结果是：ABDC 13.下面字段声明中哪一个在interface主体内是合法的? （）A.private final static int answer = 42;B.public static int answer = 42;C.final static answer = 42;D.int answer; 答案：B 解析：在接口中，属性都是默认public static final修饰的，所以：A（错误）：不能用private修饰；B（正确）：在接口中，属性默认public static final，这三个关键字可以省略；C（错误）：没写属性的类型；D（错误）：final修饰的属性必须赋值； 14.ResultSet中记录行的第一列索引为？A.-1B.0C.1D.以上都不是 答案：C 解析：ResultSet跟普通的数组不同，索引从1开始而不是从0开始 15.Java 多线程有几种实现方法？（ ）A.继承Thread类B.实现Runnable接口C.实现Thread接口D.以上都不正确 答案：AB 解析：实现多线程的方法：1.继承Thread类2.实现Runnable接口3.实现Callable接口 16.关于下面的一段代码，以下哪些说法是正确的：12345678910public static void main(String[] args) &#123; String a &#x3D; new String(&quot;myString&quot;); String b &#x3D; &quot;myString&quot;; String c &#x3D; &quot;my&quot; + &quot;String&quot;; String d &#x3D; c; System.out.print(a &#x3D;&#x3D; b); System.out.print(a &#x3D;&#x3D; c); System.out.print(b &#x3D;&#x3D; c); System.out.print(b &#x3D;&#x3D; d);&#125; A.System.out.print(a == b)打印出来的是falseB.System.out.print(a == c)打印出来的是trueC.System.out.print(b == c)打印出来的是falseD.System.out.print(b == d)打印出来的是true 答案：AD 解析：A：a指向堆内存，b指向常量池，因此地址不相等，falseB：java有常量优化机制，c也指向常量池，且与b指向同一个，则a与c地址不相等,false；C：b与c地址相等，trueD：d是c的副本，地址相同，所以b与d地址相等，true 17.Consider the following code:Which test would return true?123Integer s&#x3D;new Integer(9);Integer t&#x3D;new Integer(9);Long u&#x3D;new Long(9); A.(s==u)B.(s==t)C.(s.equals(t))D.(s.equals(9))E.(s.equals(new Integer(9)) 答案：CDE 解析：(s==u) ，因为， s 是 Integer 类型， u 是 Long 类型，两个不同类型的引用不能进行 == 比较。(s==t) ， s 是指向一个 9 的引用，而 t 也是一个指向 9 的引用，虽然都是指向 9 ，但却是指向不同的 9 ，即是两个不同的引用。因此 == 比较返回的是假。(s.equals(t)) ， Integer 的 equals 方法如下： 123456 public boolean equals(Object obj) &#123; if (obj instanceof Integer) &#123; return value == ((Integer)obj).intValue(); &#125; return false ;&#125; 是 Integer 的实例且 value 值也相等的情况下返回真，其他返回假。在这里， s 和 t 都是 Integer 类型且值都为 9 ，因此结果为真。(s.equals(9)) , 在进行 equals 比较之前，会对 9 调用 Integer.valueOf 方法，进行自动装箱 , 由于 IntegerCache 中已经存在 9 ，所以，直接返回其引用，引用相同， equals 就自然相同了。所以结果为真。(s.equals( new Integer(9)) ，直接创建了一个新的 Integer 实例，但且值也为 9 ，所以，满足条件，返回真。 18.关于JSP生命周期的叙述，下列哪些为真?A.JSP会先解释成Servlet源文件，然后编译成Servlet类文件B.每当用户端运行JSP时，jsp init()方法都会运行一次C.每当用户端运行JSP时，jsp service()方法都会运行一次D.每当用户端运行JSP时，jsp destroy()方法都会运行一次 答案：AC 解析：B：init方法：负责初始化Servlet对象。在Servlet的整个生命周期类，init（）方法只被调用一次。D：destroy方法：销毁Servlet对象，释放占用的资源，Servlet要被卸载时调用 19.下面有关java threadlocal说法正确的有？A.ThreadLocal存放的值是线程封闭，线程间互斥的，主要用于线程内共享一些数据，避免通过参数来传递B.从线程的角度看，每个线程都保持一个对其线程局部变量副本的隐式引用，只要线程是活动的并且 ThreadLocal 实例是可访问的；在线程消失之后，其线程局部实例的所有副本都会被垃圾回收C.在Thread类中有一个Map，用于存储每一个线程的变量的副本D.对于多线程资源共享的问题，同步机制采用了“以时间换空间”的方式，而ThreadLocal采用了“以空间换时间”的方式 答案：ABCD 解析：ThreadLocal不是一个线程而是一个线程的本地化对象。当工作于多线程环境中的对象采用ThreadLocal维护变量时，ThreadLocal为每个使用该变量的线程分配一个独立的副本。每个线程都可以独立的改变自己的副本，而不影响其他线程的副本。 推荐大厂笔试内容集合（内有详细解析） 持续更新中…. ProcessOn是一个在线作图工具的聚合平台~ 文末欢迎关注Coder编程公众号，欢迎关注个人微信公众号：Coder编程欢迎关注Coder编程公众号，主要分享数据结构与算法、Java相关知识体系、框架知识及原理、Spring全家桶、微服务项目实战、DevOps实践之路、每日一篇互联网大厂面试或笔试题以及PMP项目管理知识等。更多精彩内容正在路上~新建了一个qq群：315211365，欢迎大家进群交流一起学习。谢谢了！也可以介绍给身边有需要的朋友。 文章收录至Github: https://github.com/CoderMerlin/coder-programmingGitee: https://gitee.com/573059382/coder-programming欢迎关注并star~","categories":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/categories/Java/"},{"name":"笔试","slug":"笔试","permalink":"http://yoursite.com/categories/%E7%AC%94%E8%AF%95/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/tags/Java/"},{"name":"笔试","slug":"笔试","permalink":"http://yoursite.com/tags/%E7%AC%94%E8%AF%95/"}]},{"title":"Java基础笔试练习（十九）","slug":"interview/java/B-bishi19","date":"2019-10-08T12:06:00.000Z","updated":"2019-10-08T12:06:00.000Z","comments":true,"path":"2019/10/08/interview/java/B-bishi19/","link":"","permalink":"http://yoursite.com/2019/10/08/interview/java/B-bishi19/","excerpt":"","text":"每天进步一点，不做curd工程师与Api调用工程师欢迎访问个人网站：https://www.coder-programming.cn/ 1.this代表了()的对象引用,super表示的是当前对象的()对象?A.当前类 当前类B.当前类的父类 当前类C.当前类 当前类的父类D.以上都不正确 答案：C 解析：this代表当前对象，也就是当前类的对象的引用super代表其父类对象 2.假设一个 list初始化为{2，9，5，4，8，1}。 在第一次冒泡排序后，list变成了（）?A.2, 9, 5, 4, 8, 1B.2, 9, 5, 4, 1, 8C.2, 5, 9, 4, 8, 1D.2, 5, 4, 8, 1, 9 答案：D 解析：略 3.Java的Daemon线程，setDaemon( )设置必须要？A.在start之前B.在start之后C.前后都可以 答案：A 解析：setDaemon()方法必须在线程启动之前调用，当线程正在运行时调用会产生异常。 4. 下面关于构造方法的说法不正确的是 ()A.构造方法也属于类的方法，可以创建对象的时候给成员变量赋值B.构造方法不可以重载C.构造方法没有返回值D.构造方法一定要和类名相同 答案：B 解析：1.构造方法也是类的方法，可以在创建对象时为成员变量赋值2.构造方法可以进行重载，但是参数列表必须不相同，不以返回值和访问级别进行区分3.构造方法没有返回值4.构造方法一定要与定义为public的类同名综上所述，B不正确 5.下面论述正确的是（）？A.如果两个对象的hashcode相同，那么它们作为同一个HashMap的key时，必然返回同样的值B.如果a,b的hashcode相同，那么a.equals(b)必须返回trueC.对于一个类，其所有对象的hashcode必须不同D.如果a.equals(b)返回true，那么a,b两个对象的hashcode必须相同 答案：D 解析：hashcode和equals的约定关系如下：1、如果两个对象相等，那么他们一定有相同的哈希值（hash code）。2、如果两个对象的哈希值相等，那么这两个对象有可能相等也有可能不相等。（需要再通过equals来判断） 6.如果int x=20, y=5，则语句System.out.println(x+y +””+(x+y)+y); 的输出结果是（）A.2530B.55C.2052055D.25255 答案：D 解析：1）不论有什么运算，小括号的优先级都是最高的，先计算小括号中的运算，得到x+y +””+25+y2）任何字符与字符串相加都是字符串，但是是有顺序的，字符串前面的按原来的格式相加，字符串后面的都按字符串相加，得到25+“”+25+53）上面的结果按字符串相加得到25255 7. 下列方法定义中 ， 正确 的是 （）A.int x( ){ char ch=’a’; return (int)ch; }B.void x( ){ …return true; }C.int x( ){ …return true; }D.int x( int a, b){ return a+b; } 答案：A 解析： A.Java中涉及到byte、short和char类型都可以强制转化为int，符合返回类型 A正确B.方法中定义为void 应该没有返回值，但返回值为boolean类型 B错C. 方法中类型为int，应该返回int类型值，但是 返回值为boolean类型 C错D.方法应该定义为int(int a,int b)，所以D错 8.设一组权值集合W={2，3，4，5，6}，则由该权值集合构造的哈夫曼树中带权路径长度之和为（）。A.20B.30C.40D.45 答案：D 解析： 9.枚举（enum）属于原始数据类型（primitive type）。A.正确B.错误 答案：B 解析：枚举类是一种特殊对的类，既然是类。那他就不是原始数据类型了 10.在Java中，以下关于方法重载和方法重写描述正确的是？A.方法重载和方法的重写实现的功能相同B.方法重载出现在父子关系中，方法重写是在同一类中C.方法重载的返回值类型必须一致，参数项必须不同D.方法重写的返回值类型必须相同或相容。 答案：D 解析：重载（overload）：只要方法名 一致 ，其他（参数列表、返回值）怎么折腾随便。重写（overriding）：只有实现的功能代码 不一致 ，其他的（函数名、参数列表、返回值类型）必须都一致。 11.以下哪个区域不属于新生代？A.eden区B.from区C.元数据区D.to区 答案：C 解析：eden : from : to =8:1:1，用于新生代垃圾回收。 元数据区是用来替换永久代的，大概那个意思。 引入元数据区的意义： JDK8引入了一个新的native的内存区块，Metaspace（也就是题主所说的“元数据”区域）。也就是说，之后你在调优或者调查JVM问题的时候就不用和PermGen区域打交道了，也不会有java.lang.OutOfMemoryError: PermGen 这种内存不足的问题来骚扰你。 12.下列哪一种叙述是正确的（）A.abstract修饰符可修饰字段、方法和类B.抽象方法的body部分必须用一对大括号{ }包住C.声明抽象方法，大括号可有可无D.声明抽象方法不可写出大括号 答案：D 解析：abstract修饰符可修饰字段、方法和类. × abstract只能用来修饰类、方法，不修饰字段（属性）。抽象方法的body部分必须用一对大括号{ }包住. × 抽象方法用“;”结束。声明抽象方法，大括号可有可无. × 抽象方法没有方法体，也不用大括号。 13.off-heap是指那种内存（）A.JVM GC能管理的内存B.JVM进程管理的内存C.在JVM老年代内存区D.在JVM新生代内存 答案：B 解析：off-heap叫做堆外内存，将你的对象从堆中脱离出来序列化，然后存储在一大块内存中，这就像它存储到磁盘上一样，但它仍然在RAM中。对象在这种状态下不能直接使用，它们必须首先反序列化，也不受垃圾收集。序列化和反序列化将会影响部分性能（所以可以考虑使用FST-serialization）使用堆外内存能够降低GC导致的暂停。堆外内存不受垃圾收集器管理，也不属于老年代，新生代。 14.非抽象类实现接口后，必须实现接口中的所有抽象方法，除了abstract外，方法头必须完全一致.A.正确B.错误 答案：B 解析：略 15.如下代码，执行test()函数后，屏幕打印结果为（）12345678910111213141516public class Test2&#123; public void add(Byte b) &#123; b &#x3D; b++; &#125; public void test() &#123; Byte a &#x3D; 127; Byte b &#x3D; 127; add(++a); System.out.print(a + &quot; &quot;); add(b); System.out.print(b + &quot;&quot;); &#125;&#125; A.127 127B.128 127C.129 128D.以上都不对 答案：D 解析：add()方法里面的修改值并不会起作用，而add(++a)会使a数值越界成-128，所以输出为-128 127 16.若串S=′software′,其子串的数目是()A.8B.37C.36D.9 答案：B 解析：字串： n（n+1）/2 + 1非空子串：n（n+1）/2非空真子串：n（n+1）/2 - 1 17.以下关于final关键字说法错误的是（） A.final是java中的修饰符，可以修饰类、接口、抽象类、方法和属性B.final修饰的类肯定不能被继承C.final修饰的方法不能被重载D.final修饰的变量不允许被再次赋值 答案：AC 解析： 1.final修饰变量，则等同于常量2.final修饰方法中的参数，称为最终参数。3.final修饰类，则类不能被继承4.final修饰方法，则方法不能被重写。5.final 不能修饰抽象类6.final修饰的方法可以被重载 但不能被重写 18.下面代码在main()方法中第八行后可以正常使用的是（ ）12345678910public class Test&#123; private int a&#x3D;10; int b&#x3D;20; static int c&#x3D;1; public static void main(String arg[]) &#123; Test t &#x3D; new Test(); &#125; &#125; A.t.aB.this.cC.Test.bD.Test.c 答案：AD 解析：A : 在private 修饰不能在外部类中调用，main 方法属于Test类的方法， 所以 对象 t 可以在他自己的类方法中调用它的privateB ： static 方法中没有this 这么一说C: b不是static变量D: 合理 19.执行如下程序代码char chr = 127;int sum = 200;chr += 1;sum += chr;后，sum的值是 ; （ ）备注：同时考虑c/c++和Java的情况的话 A.72B.99C.328D.327 答案：AC 解析：因为char类型的数据范围为0到127，127+1超过了这个范围，而127的二进制为01111111,加1后按照有符号输出就为-128，所以200-128=72 20.Java是一门支持反射的语言,基于反射为Java提供了丰富的动态性支持，下面关于Java反射的描述，哪些是错误的：( ) A.Java反射主要涉及的类如Class, Method, Filed,等，他们都在java.lang.reflet包下B.通过反射可以动态的实现一个接口，形成一个新的类，并可以用这个类创建对象，调用对象方法C.通过反射，可以突破Java语言提供的对象成员、类成员的保护机制，访问一般方式不能访问的成员D.Java反射机制提供了字节码修改的技术，可以动态的修剪一个类E.Java的反射机制会给内存带来额外的开销。例如对永生堆的要求比不通过反射要求的更多F.Java反射机制一般会带来效率问题，效率问题主要发生在查找类的方法和字段对象，因此通过缓存需要反射类的字段和方法就能达到与之间调用类的方法和访问类的字段一样的效率 答案：A D F 解析：反射指的是在运行时能够分析类的能力的程序。反射机制可以用来：1.在运行时分析类的能力–检查类的结构–所用到的就是java.lang.reflect包中的Field、Method、Constructor，分别用于描述类的与、方法和构造器。A中的Class类在java.lang中。2.在运行时查看对象。3.实现通用的数组操作代码。反射机制的功能：在运行时判断任意一个对象所属的类；在运行时构造任意一个类的对象；在运行时判断任意一个类所具有的成员变量和方法；在运行时调用任意一个对象的方法；生成动态代理。反射机制常见作用：动态加载类、动态获取类的信息（属性、方法、构造器）；动态构造对象；动态调用类和对象的任意方法、构造器；动态调用和处理属性；获取泛型信息（新增类型：ParameterizedType,GenericArrayType等）；处理注解（反射API:getAnnotationsdeng等）。反射机制性能问题：反射会降低效率。void setAccessible(boolean flag):是否启用访问安全检查的开关，true屏蔽Java语言的访问检查，使得对象的私有属性也可以被查询和设置。禁止安全检查，可以提高反射的运行速度。可以考虑使用：cglib/javaassist操作。 推荐大厂笔试内容集合（内有详细解析） 持续更新中…. ProcessOn是一个在线作图工具的聚合平台~ 文末欢迎关注Coder编程公众号，主要分享数据结构与算法、Java相关知识体系、框架知识及原理、Spring全家桶、微服务项目实战、DevOps实践之路、每日一篇互联网大厂面试或笔试题以及PMP项目管理知识等。更多精彩内容正在路上~新建了一个qq群：315211365，欢迎大家进群交流一起学习。谢谢了！也可以介绍给身边有需要的朋友。 文章收录至Github: https://github.com/CoderMerlin/coder-programmingGitee: https://gitee.com/573059382/coder-programming欢迎关注并star~","categories":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/categories/Java/"},{"name":"笔试","slug":"笔试","permalink":"http://yoursite.com/categories/%E7%AC%94%E8%AF%95/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/tags/Java/"},{"name":"笔试","slug":"笔试","permalink":"http://yoursite.com/tags/%E7%AC%94%E8%AF%95/"}]},{"title":"Java基础笔试练习（十八）","slug":"interview/java/B-bishi18","date":"2019-10-06T12:06:00.000Z","updated":"2019-10-06T12:06:00.000Z","comments":true,"path":"2019/10/06/interview/java/B-bishi18/","link":"","permalink":"http://yoursite.com/2019/10/06/interview/java/B-bishi18/","excerpt":"","text":"每天进步一点，不做curd工程师与Api调用工程师欢迎访问个人网站：https://www.coder-programming.cn/ 1.下面有关重载函数的说法中正确的是A.重载函数必须具有不同的返回值类型B.重载函数形参个数必须不同C.重载函数必须有不同的形参列表D.重载函数名可以不同 答案：C 解析：重载：必须同名函数；必须参数表不同（包含参数个数不同；参数类型不同；或参数个数与类型都不同） 2.对于一个类的构造函数，其函数名与类名( )。A.完全相同B.基本相同C.不相同D.无关系 答案：A 解析：对于一个类的构造函数，函数名和类名必须完全相同 3.以下关于Object类的说法正确的是（）A.Java中所有的类都直接或间接继承自Object，无论是否明确的指明，无论其是否是抽象类。B.Java中的接口(interface)也继承了Object类C.利用“==”比较两个对象时，Java调用继承自Object的equals方法，判断是否相等。D.如果类的定义中没有重新定义toString()方法，则该类创建的对象无法使用toStrig()方法。 答案：A 解析：Object 是基类 Java中的所有的类都直接或间接的继承；所以A对从一个class派生的必然是另一个class。Object是一个class，如果interface继承自Object，那么interface必然是一个class，所以B错利用equals()方法进行比较时 会调用== 可以看equals()方法的源码，可以这样说， == 比equal更加强大，所以C错toString()方法是Object类中 即使不重写也能使用 所以D错 4.有这样一段程序：1234567891011121314public class Test&#123; public static void main(String [] args)&#123; List list&#x3D;new ArrayList(); list.add(&quot;a&quot;); list.add(&quot;b&quot;); list.add(&quot;a&quot;); Set set&#x3D;new HashSet(); set.add(&quot;a&quot;); set.add(&quot;b&quot;); set.add(&quot;a&quot;); System.out.println(list.size()+&quot;,&quot;+set.size()); &#125;&#125; 请问运行主要的程序会打印出的是什么（） A.2,2B.2,3C.3,2D.3,3 答案：C 解析：list有序可重复，set无序不可重复 5.Web程序中，当前用户上下文信息应该保存在下面哪个对象中（）A.pageB.requestC.sessionD.Application 答案：C 解析：重点在 当前用户 ， application能被同一个应用程序的所有用户访问，所以当前用户的信息就不宜保存在application中session会话对象，一个会话只可能是一个用户的，生命周期默认30分钟，也可以自行定义，当前会话结束（如关闭浏览器），当前session被销毁。所以当前用户的信息应该保存在session中 6.抽象类和接口的区别，一下说法错误的是A.接口是公开的，里面不能有私有的方法或变量，是用于让别人使用的，而抽象类是可以有私有方法或私有变量的。B.abstract class 在 Java 语言中表示的是一种继承关系，一个类只能使用一次继承关系。但是，一个类却可以实现多个interface，实现多重继承。接口还有标识（里面没有任何方法，如Remote接口）和数据共享（里面的变量全是常量）的作用。C.在abstract class 中可以有自己的数据成员，也可以有非abstarct的成员方法，而在interface中，只能够有静态的不能被修改的数据成员（也就是必须是 static final的，不过在 interface中一般不定义数据成员），所有的成员方法默认都是 public abstract 类型的。D.abstract class和interface所反映出的设计理念不同。其实abstract class表示的是has-a关系，interface表示的是is-a关系。 答案：D 解析：jdk1.9以后，接口是可以有私有属性的is a是继承（抽象类），has a是组合（接口） 7.Java的跨平台特性是指它的源代码可以在多个平台运行。A.对B.错 答案：B 解析：语言跨平台是编译后的文件跨平台，而不是源程序跨平台。Java源代码首先经过编译器生成字节码，即class文件，该class文件与平台无关，而class文件经过解释执行之后翻译成最终的机器码，这是平台相关的。 8. 如果一个接口Cup有个方法use()，有个类SmallCup实现接口Cup，则在类SmallCup中正确的是？ ( )A.void use() { …}B.protected void use() { …}C.public void use() { …}D.以上语句都可以用在类SmallCup中 答案：C 解析：既然是实现接口，就要实现接口的所以方法，相当于重写方法，方法的重写需要满足：三同一大一小（方法名、返回值类型、形参相同；访问权限&gt;=重写前；抛出异常&lt;=重写前） 9.已知如下类说明：12345678public class Test&#123; private float f&#x3D;1.0f; int m&#x3D;12; static int n&#x3D;1; public static void main(String args[])&#123; Test t&#x3D;new Test(); &#125;&#125; 如下哪些使用是正确的（） A.t.f = 1.0B.this.nC.Test.mD.Test.n 答案：D 解析：答案：DA：编译不成功，因为float浮点类型默认是double类型 所以float f=1.0f;（必须加上f 强调定义的是float）此处是精度由高(double)向低(float)转型所以会报错 但是若是float f=1;这里是默认类型是Int 类型 精度由低(int)向高转型(float)不丢失精度不会报错。B：this的使用时针对在方法内部使局部变量等值于实例变量而使用的一个关键字，此处的n是静态变量而非实例变量 所以this的调用会出错（试想一下，static本来是全类中可以使用的，是全局的，你非得this去调用，这不是区分局部变量和实例变量的分水线吗？但是此处是全局的，不需要区分）C：m是实例变量，什么是实例变量：就是需要new 一个对象出来才能使用的，这里直接用类名就调用了，jvm怎么知道m是谁？D：类变量可以通过类直接调用 10.在try的括号里面有return一个值，那在哪里执行finally里的代码？A.不执行finally代码B.return前执行C.return后执行 答案：B 解析： 1、不管有木有出现异常，finally块中代码都会执行；2、当try和catch中有return时，finally仍然会执行；3、finally是在return后面的表达式运算后执行的（此时并没有返回运算后的值，而是先把要返回的值保存起来，不管finally中的代码怎么样，返回的值都不会改变，仍然是之前保存的值），所以函数返回值是在finally执行前确定的；4、finally中最好不要包含return，否则程序会提前退出，返回值不是try或catch中保存的返回值。 11.多个线程可同时操作一个数据，为了保证该数据的准确性，可将操作该数据的部分改为 ()?A.同步B.异步C.只读D.只写 答案：A 解析： 答案：A对该数据加锁，放在同步代码块中synchronize(){} 12.下列关于计算机系统和Java编程语言的说法，正确的是（）A.计算机是由硬件、操作系统和软件组成，操作系统是缺一不可的组成部分。B.Java语言编写的程序源代码可以不需要编译直接在硬件上运行。C.在程序中书写注释不会影响程序的执行，可以在必要的地方多写一些注释。D.Java的集成开发环境（IDE），如Eclipse，是开发Java语言必需的软件工具。 答案：C 解析：软件分为系统软件和应用软件 13.java用（）机制实现了进程之间的同步执行A.监视器B.虚拟机C.多个CPUD.异步调用 答案：A 解析：同步的两种方式：同步块和同步方法对于同步来说都是使用synchronized方法每一个对象都有一个监视器，或者叫做锁。 14.变量a是一个64位有符号的整数，初始值用16进制表示为：0x7FFFFFFFFFFFFFFF;变量b是一个64位有符号的整数，初始值用16进制表示为：0x8000000000000000。则a+b的结果用10进制表示为多少？A.1B.-1C.2^63+2^62+…+2^2+2^1+2^0D.–(2^63+2^62+…+2^2+2^1+2^0) 答案：B 解析：0x7FFFFFFFFFFFFFFF + 0x8000000000000000 = 0xFFFFFFFFFFFFFFFF 转为源码 = -1 15.下列说法正确的是( )A.volatile,synchronized都可以修改变量，方法以及代码块B.volatile，synchronized 在多线程中都会存在阻塞问题C.volatile能保证数据的可见性，但不能完全保证数据的原子性，synchronized即保证了数据的可见性也保证了原子性 D.volatile解决的是变量在多个线程之间的可见性、原子性，而sychroized解决的是多个线程之间访问资源的同步性 答案：C 解析：关键字volatile是线程同步的轻量级实现，所以volatile性能肯定比synchronized要好，并且只能修改变量，而synchronized可以修饰方法，以及代码块。多线程访问volatile不会发生阻塞，而synchronized会出现阻塞volatile能保证数据的可见性，但不能保证原子性；而synchronized可以保证原子性，也可以间接保证可见性，因为它会将私有内存和公共内存中的数据做同步关键字volatile解决的下变量在多线程之间的可见性；而synchronized解决的是多线程之间资源同步问题 16.Which keyword can protect a class in a package from accessibility by the classes outside the package but not package inside ?A.privateB.protectedC.finalD.don’t use any keyword at all (make it default) ？ 答案：D 解析：略 17.下面有关servlet service描述错误的是？A.不管是post还是get方法提交过来的连接，都会在service中处理B.doGet/doPost 则是在 javax.servlet.GenericServlet 中实现的C.service()是在javax.servlet.Servlet接口中定义的D.service判断请求类型，决定是调用doGet还是doPost方法 答案：B 解析：doGet/doPost 则是在 javax.servlet.http.HttpServlet 中实现的 18.如果希望监听TCP端口9000，服务器端应该怎样创建socket?A.new Socket(“localhost”,9000);B.new ServerSocket(9000);C.new Socket(9000);D.new ServerSocket(“localhost”,9000); 答案：B 解析：ServerSocket (int port)Creates a server socket, bound to the specified port. Socket(InetAddress address, int port)Creates a stream socket and connects it to the specified port number at the specified IP address. 19.关于身份证号，以下正确的正则表达式为（ ）A.isIDCard=/^[1-9]\\d{7}((0\\d)|(1[0-2]))(([0|1|2]\\d)|3[0-1])\\d{3}$/;B.isIDCard=/^[1-9]\\d{7}((9\\d)|(1[0-2]))(([0|1|2]\\d)|3[9-1])\\d{3}$/;C.isIDCard=/^[1-9]\\d{5}[1-9]\\d{3}((0\\d)|(1[0-2]))(([0|1|2]\\d)|3[0-1])\\d{4}$/;D.isIDCard=/^[1-9]\\d{5}[1-9]\\d{3}((9\\d)|(1[9-2]))(([0|1|2]\\d)|3[9-1])\\d{4}$/; 答案：AC 解析：略，关于正则表达式的内容，可关注我个人微信公众号查看相关文章 20.下列哪些操作会使线程释放锁资源？A.sleep()B.wait()C.join()D.yield() 答案：BC 解析： 1.sleep()方法 在指定时间内让当前正在执行的线程暂停执行，但不会释放“锁标志”。不推荐使用。 sleep()使当前线程进入阻塞状态，在指定时间内不会执行。 2.wait()方法 在其他线程调用对象的notify或notifyAll方法前，导致当前线程等待。线程会释放掉它所占有的“锁标志”，从而使别的线程有机会抢占该锁。 当前线程必须拥有当前对象锁。如果当前线程不是此锁的拥有者，会抛出IllegalMonitorStateException异常。 唤醒当前对象锁的等待线程使用notify或notifyAll方法，也必须拥有相同的对象锁，否则也会抛出IllegalMonitorStateException异常。 waite()和notify()必须在synchronized函数或synchronized block中进行调用。如果在non-synchronized函数或non-synchronized block中进行调用，虽然能编译通过，但在运行时会发生IllegalMonitorStateException的异常。 3.yield方法 暂停当前正在执行的线程对象。 yield()只是使当前线程重新回到可执行状态，所以执行yield()的线程有可能在进入到可执行状态后马上又被执行。 yield()只能使同优先级或更高优先级的线程有执行的机会。 4.join方法join()等待该线程终止。 等待调用join方法的线程结束，再继续执行。如：t.join();//主要用于等待t线程运行结束，若无此句，main则会执行完毕，导致结果不可预测 推荐大厂笔试内容集合（内有详细解析） 持续更新中…. ProcessOn是一个在线作图工具的聚合平台~ 文末欢迎关注Coder编程公众号，主要分享数据结构与算法、Java相关知识体系、框架知识及原理、Spring全家桶、微服务项目实战、DevOps实践之路、每日一篇互联网大厂面试或笔试题以及PMP项目管理知识等。更多精彩内容正在路上~新建了一个qq群：315211365，欢迎大家进群交流一起学习。谢谢了！也可以介绍给身边有需要的朋友。 文章收录至Github: https://github.com/CoderMerlin/coder-programmingGitee: https://gitee.com/573059382/coder-programming欢迎关注并star~","categories":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/categories/Java/"},{"name":"笔试","slug":"笔试","permalink":"http://yoursite.com/categories/%E7%AC%94%E8%AF%95/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/tags/Java/"},{"name":"笔试","slug":"笔试","permalink":"http://yoursite.com/tags/%E7%AC%94%E8%AF%95/"}]},{"title":"Java基础笔试练习（十七）","slug":"interview/java/B-bishi17","date":"2019-10-05T12:06:00.000Z","updated":"2019-10-05T12:06:00.000Z","comments":true,"path":"2019/10/05/interview/java/B-bishi17/","link":"","permalink":"http://yoursite.com/2019/10/05/interview/java/B-bishi17/","excerpt":"","text":"每天进步一点，不做curd工程师与Api调用工程师欢迎访问个人网站：https://www.coder-programming.cn/ 1. 程序Demo.java编译运行后输出的结果是：( )？12345678910111213public class Demo&#123; int x&#x3D;1； int y； public static void main（String [] args）&#123; int z&#x3D;2; Demo t&#x3D;new Demo(); System.out.println(t.x+t.y+z); &#125;&#125; A.3B.12C.1D.5 答案：A 解析：这题考的是默认初始化问题，但是可以引出另外一个问题：局部变量参与运算前是必须要初始化的，比如下面的代码就会编译出错，提示y必须要初始化。 2.HashSet子类依靠()方法区分重复元素。A.toString(),equals()B.clone(),equals()C.hashCode(),equals()D.getClass(),clone() 答案：C 解析：HashSet内部使用Map保存数据，即将HashSet的数据作为Map的key值保存，这也是HashSet中元素不能重复的原因。而Map中保存key值前，会去判断当前Map中是否含有该key对象，内部是先通过key的hashCode，确定有相同的hashCode之后，再通过equals方法判断是否相同。 3. Java 语言中创建一个对象使用的关键字是（）A.classB.interfaceC.newD.create 答案：C 解析：没有对象怎么办，new一个对象 4.Java Application(Java 应用程序)源程序文件编译后的字节码文件的扩展名是( )。A.javaB.classC.exeD.jar 答案：B 解析：1， Java文件经过JVM编译成字节码文件，即.class文件，将字节码文件在不同的操作系统中运行时，操作系统再将字节码文件编译成机器码文件。这就是Java跨平台2， JAR 文件就是 Java Archive File，顾名思意，它的应用是与 Java 息息相关的，是 Java 的一种文档格式。JAR 文件非常类似 ZIP 文件——准确的说，它就是 ZIP 文件，所以叫它文件包。JAR 文件与 ZIP 文件唯一的区别就是在 JAR 文件的内容中，包含了一个 META-INF/MANIFEST.MF 文件，这个文件是在生成 JAR 文件的时候自动创建的 5.以下多线程对int型变量x的操作，哪几个不需要进行同步（ ）?A.x=y;B.x++;C.++x;D.x=1; 答案：D 解析：原子性：指该操作不能再继续划分为更小的操作。Java中的原子操作包括： 1、除long和double之外的基本类型的赋值操作 2、所有引用reference的赋值操作 3、java.concurrent.Atomic.* 包中所有类的一切操作 6.有这么一段程序：123456789public class Test&#123; public String name&#x3D;&quot;abc&quot;; public static void main(String[] args)&#123; Test test&#x3D;new Test(); Test testB&#x3D;new Test(); System.out.println(test.equals(testB)+&quot;,&quot;+test.name.equals(testB.name)); &#125; &#125; 请问以上程序执行的结果是（） ? A.true,trueB.true,falseC.false,trueD.false,false 答案：C 解析： 7.下列描述中，错误的是A.SQL语言又称为结构化查询语言B.java中”static”关键字表明一个成员变量或者是成员方法可以在没有所属的类的实例变量的情况下被访问C.面向对象开发中，引用传递意味着传递的并不是实际的对象，而是对象的引用，因此，外部对引用对象所做的改变不会反映到所引用的对象上D.java是强类型语言，javascript是弱类型语言E.面向对象的三大特性包括：封装，继承，多态 答案：C 解析：值传递，传递的是原来值的副本。引用传递，除了一些特殊的（String，包装类属于不可变类），一般的引用类型在进行传递的时候，一开始形参和实参都是指向同一个地址的，这个时候形参对对象的改变会影响到实参。 8.能单独和finally语句一起使用的块是( )A.tryB.catchC.throwD.throws 答案：A 解析：处理异常常用的两种方式：1、try…catch(捕获处理机制)；2、throws(冒泡处理机制).注意细节：使用try…catch块捕获时可以没有catch块,但当没用catch块的时候必须得有finally块.故选A） 9.关于修饰语的使用，以下哪一项是正确的? （）A.如果没有为成员声明指定可访问性修饰符（public，protected和private），则该成员只能访问其类的包中的类及其类的子类的任何位置B.您无法指定局部变量的可访问性。它们只能在声明它们的区域内访问C.类的子类必须与它们扩展的类位于同一个包中D)上面提到的都不是 答案：B 解析：没有被public，protected，private修饰的类成员，只有同一个包里的类中可以访问，其余都不行； 10.代码行float t=5.1; int i=t; ,不正确的是A.代码不能编译B.代码编译, i被设置为5C.第二行若改为 int i=(byte)t ，并结合D选项，则可编译D.第一行若改为 float t=5.1f ，并结合C选项，则可编译 答案：B 解析：题目要求是不正确的 11.以下代码的输出的正确结果是()123456public class Test &#123;public static void main(String args[]) &#123;String s &#x3D; &quot;祝你考出好成绩！&quot;;System.out.println(s.length());&#125;&#125; A.24B.16C.15D.8 答案：D 解析：略 12.与其等价表示是哪一项（）？123public interface IService &#123;String NAME&#x3D;&quot;default&quot;;&#125; A.public String NAME=”default”;B.public static String NAME=”default”;C.private String NAME=”default”;D.public static final String NAME=”default”; 答案：D 解析：为什么是public：因为接口必然是要被实现的，如果不是public，这个属性就没有意义了；为什么是static：因为如果不是static，那么由于每个类可以继承多个接口，那就会出现重名的情况；为什么是final：这是为了体现java的开闭原则，因为接口是一种模板，既然是模板，那就对修改关闭，对扩展开放。 13.下列关于包（package）的描述，正确的是（）A.包（package）是Java中描述操作系统对多个源代码文件组织的一种方式。B.import语句将所对应的Java源文件拷贝到此处执行。C.包（package）是Eclipse组织Java项目特有的一种方式。D.定义在同一个包（package）内的类可以不经过import而直接相互使用。 答案：D 解析：1、为了更好地组织类，Java提供了包机制。包是类的容器，用于分隔类名空间。如果没有指定包名，所有的示例都属于一个默认的无名包。Java中的包一般均包含相关的类，java是跨平台的，所以java中的包和操作系统没有任何关系，java的包是用来组织文件的一种虚拟文件系统。A错2、import语句并没有将对应的java源文件拷贝到此处仅仅是引入，告诉编译器有使用外部文件，编译的时候要去读取这个外部文件。B错3、Java提供的包机制与IDE没有关系。C错4、定义在同一个包（package）内的类可以不经过import而直接相互使用。 14.Java中用正则表达式截取字符串中第一个出现的英文左括号之前的字符串。比如：北京市（海淀区）（朝阳区）（西城区），截取结果为：北京市。正则表达式为（）A.”.?(?=\\()”B.”.?(?=()”C.”.(?=\\()”D.”.(?=()” 答案：A 解析：略，个人公众号中有对正则表达式的详细介绍。 15.以下代码段执行后的输出结果为（）？123456789101112131415161718public class Test &#123; public static void main(String[] args) &#123; System.out.println(test()); &#125; private static int test() &#123; int temp &#x3D; 1; try &#123; System.out.println(temp); return ++temp; &#125; catch (Exception e) &#123; System.out.println(temp); return ++temp; &#125; finally &#123; ++temp; System.out.println(temp); &#125; &#125; &#125; A.1,2,2B.1,2,3C.1,3,3D.1,3,2 答案：D 解析：执行顺序为：输出try里面的初始temp：1；temp=2；保存return里面temp的值：2；执行finally的语句temp：3，输出temp：3；返回try中的return语句，返回存在里面的temp的值：2；输出temp：2 16.检查程序，是否存在问题，如果存在指出问题所在，如果不存在，说明输出结果。1234567891011121314package algorithms.com.guan.javajicu; public class Inc &#123; public static void main(String[] args) &#123; Inc inc &#x3D; new Inc(); int i &#x3D; 0; inc.fermin(i); i&#x3D; i ++; System.out.println(i); &#125; void fermin(int i)&#123; i++; &#125; &#125; A.0B.1C.2D.3 答案：A 解析：这道题两个考点：1.值传递与引用传递的区别2.i++与++i的区别 关于第一点：int基本类型属于值传递。所以i的值并没有发生改变。i还是为0 关于第二点：Java使用了中间缓存变量机制：i=i++;等同于：temp=i； (等号右边的i)i=i+1; (等号右边的i)i=temp; (等号左边的i)而i=++i;则等同于：i=i+1;temp=i;i=temp; 如果将代码中的 i= ++i;可以看到打印的结果是1. 17.下面程序执行的结果为（ ）123456789void main( )&#123;char ch1,ch2;ch1 &#x3D;&#39;D&#39;+&#39;8&#39;－&#39;3&#39;;ch2 &#x3D;&#39;9&#39;－&#39;1&#39;;printf(&quot;%c %d\\n&quot;,ch1,ch2);&#125; A.I ‘8’B.I 8C.G ‘8’D.其他几项都不对 答案：B 解析：c语言的题目，ASCII值的运算，A=65,0=48（以此类推）。ch1=68+56-51=73然后以char类型输出所以是I，ch2=57-49=8以整型输出所以是8 18.CMS垃圾回收器在那些阶段是没用用户线程参与的A.初始标记B.并发标记C.重新标记D.并发清理 答案：AC 解析：用户线程（user-level threads）指不需要内核支持而在用户程序中实现的线程，其不依赖于操作系统核心，应用进程利用线程库提供创建、同步、调度和管理线程的函数来控制用户线程。CMS的GC过程有6个阶段（4个并发，2个暂停其它应用程序） 初次标记(STW initial mark) 并发标记(Concurrent marking) 并发可中断预清理(Concurrent precleaning) 最终重新标记(STW remark) 并发清理(Concurrent sweeping) 并发重置(Concurrent reset)在初次标记，重新标志的时候，要求我们暂停其它应用程序，那么这两个阶段用户线程是不会参与的 19.下列哪些操作会使线程释放锁资源？A.sleep()B.wait()C.join()D.yield() 答案：B C 解析：1.sleep()方法在指定时间内让当前正在执行的线程暂停执行，但不会释放“锁标志”。不推荐使用。sleep()使当前线程进入阻塞状态，在指定时间内不会执行。2.wait()方法在其他线程调用对象的notify或notifyAll方法前，导致当前线程等待。线程会释放掉它所占有的“锁标志”，从而使别的线程有机会抢占该锁。当前线程必须拥有当前对象锁。如果当前线程不是此锁的拥有者，会抛出IllegalMonitorStateException异常。唤醒当前对象锁的等待线程使用notify或notifyAll方法，也必须拥有相同的对象锁，否则也会抛出IllegalMonitorStateException异常。waite()和notify()必须在synchronized函数或synchronized block中进行调用。如果在non-synchronized函数或non-synchronized block中进行调用，虽然能编译通过，但在运行时会发生IllegalMonitorStateException的异常。3.yield方法 **暂停当前正在执行的线程对象。yield()只是使当前线程重新回到可执行状态，所以执行yield()的线程有可能在进入到可执行状态后马上又被执行。yield()只能使同优先级或更高优先级的线程有执行的机会。**4.join方法等待该线程终止。等待调用join方法的线程结束，再继续执行。如：t.join();//主要用于等待t线程运行结束，若无此句，main则会执行完毕，导致结果不可预测。 20.Which statement declares a variable a which is suitable for referring to an array of 50 string objects?（Java）A.char a[][];B.String a[]C.String[] a;D.Object a[50];E.String a[50];F.Object a[]; 答案：BCF 解析： 题目翻译：下面哪个语句声明了一个适合于创建50个字符串对象数组的变量？ A：char[][] 定义了二位字符数组。在Java中，使用字符串对char数组赋值，必须使用toCharArray()方法进行转换。所以A错误。B、C：在Java中定义String数组，有两种定义方式：String a[]和String[] a。所以B、C正确。D、E：数组是一个引用类型变量 ，因此使用它定义一个变量时，仅仅定义了一个变量 ，这个引用变量还未指向任何有效的内存 ，因此定义数组不能指定数组的长度。所以D、E错误。F：Object类是所有类的父类。子类其实是一种特殊的父类，因此子类对象可以直接赋值给父类引用变量，无须强制转换，这也被称为向上转型。这体现了多态的思想。所以F正确。 最后选B、C、F 推荐大厂笔试内容集合（内有详细解析） 持续更新中…. ProcessOn是一个在线作图工具的聚合平台~ 文末欢迎关注Coder编程公众号，主要分享数据结构与算法、Java相关知识体系、框架知识及原理、Spring全家桶、微服务项目实战、DevOps实践之路、每日一篇互联网大厂面试或笔试题以及PMP项目管理知识等。更多精彩内容正在路上~新建了一个qq群：315211365，欢迎大家进群交流一起学习。谢谢了！也可以介绍给身边有需要的朋友。 文章收录至Github: https://github.com/CoderMerlin/coder-programmingGitee: https://gitee.com/573059382/coder-programming欢迎关注并star~","categories":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/categories/Java/"},{"name":"笔试","slug":"笔试","permalink":"http://yoursite.com/categories/%E7%AC%94%E8%AF%95/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/tags/Java/"},{"name":"笔试","slug":"笔试","permalink":"http://yoursite.com/tags/%E7%AC%94%E8%AF%95/"}]},{"title":"Java基础笔试练习（十六）","slug":"interview/java/B-bishi16","date":"2019-10-04T12:06:00.000Z","updated":"2019-10-04T12:06:00.000Z","comments":true,"path":"2019/10/04/interview/java/B-bishi16/","link":"","permalink":"http://yoursite.com/2019/10/04/interview/java/B-bishi16/","excerpt":"","text":"每天进步一点，不做curd工程师与Api调用工程师欢迎访问个人网站：https://www.coder-programming.cn/ 1.所谓静态链表就是一直不发生变化的链表()A.对B.错 答案：B 解析：静态链表，数组描述的链表。也有插入和删除操作 2.哈希函数越复杂越好,因为这样随机性好,冲突概率小()A.对B.错 答案：B 解析：哈希函数越复杂，则时间就会越多，因此不是哈希函数越复杂越好，还需要考虑下时间方面 3.二叉树中每个结点有两棵非空子树或有两棵空子树（）。A.对B.错 答案：B 解析：二叉树中每个结点有：①两棵非空子树；②两棵空子树；③一棵子树。 4.关系模型中，一个关键字是 （ ）。A.可由多个任意属性组成 性组B.至多由一个属性组成C.可由一个或多个其值能惟一标识该关系模式中任何元组的属性组成D.以上都不是 答案：C 解析：数据库关键字可由一个或多个其值能唯一标示该关系模式中任何元组的属性组成 5.完全二叉树中编号为 i 的结点存在右孩子，右孩子结点的编号为()。设根结点的编号为 1A.2i-1B.2iC.2i+1D.2i+2 答案：C 解析：左孩子2i 右孩子2i+1, C 6.限制输入到列的值的范围，应使用（ ）约束。A.CHECKB.PRIMARY KEYC.FOREIGN KEYD.UNIQUE 答案：A 解析：数据库的检查约束，可以在插入值的时候检查是否符合设定的取值区域 7.深度为k的二叉树至多有几个结点（）A.2^kB.2^(k-1)C.2^k-1D.2^k+1 答案：C 解析：一棵深度为k，且有2^k-1个节点的二叉树，称为满二叉树。这种树的特点是每一层上的节点数都是最大节点数。而在一棵二叉树中，除最后一层外，若其余层都是满的，并且最后一层或者是满的，或者是在右边缺少连续若干节点，则此二叉树为完全二叉树。具有n个节点的完全二叉树的深度为floor(log2n)+1。深度为k的完全二叉树，至少有2k-1个叶子节点，至多有2k-1个节点。 8.事务日志的用途是？A.事务处理B.完整性约束C.数据恢复D.安全性控制 答案：C 解析：SQL Server使用各数据库的事务日志来恢复事务。事务日志是数据库中已发生的所有修改和执行每次修改的事务的一连串记录。事务日志记录每个事务的开始。它记录了在每个事务期间，对数据的更改及撤消所做更改（以后如有必要）所需的足够信息。主要是恢复时用到数据，所以对日志文件不能轻易删除！ 9.如果一个堆栈的入栈序列是A,B,C,D,E,则堆栈的不可能输出顺序是（）。A.EDCBAB.DECBAC.DCEABD.ABCDE 答案：C 解析：A 可行，ABCDE依次入栈，然后再依次出栈B 可行，A入栈，B入栈，C入栈，D入栈，D出栈，E入栈，E出栈，CBA依次出栈C 不可行，A入栈，B入栈，C入栈，D入栈，D出栈，C出栈，E入栈，E出栈，此时只能B先出栈，得不到ABD 可行，A入栈，A出栈，B入栈，B出栈，C入栈，C出栈，D入栈，D出栈，E入栈，E出栈 10.根据关系数据库规范范理论，关系数据库中的关系要满足第一范式，在部门关系中，因哪个属性而使它不满足第一范式？（）A.部门号B.部门名C.部门总经理D.部门成员 答案：D 解析：针对数据库范式的理解，可以关注我的公众号Coder编程，其中就有文章详细介绍了数据库的三范式。 11.把对关系SC的属性GRADE的修改权授予用户ZHAO的T-SQL语句是（）A.GRANT GRADE ON SC TO ZHAOB.GRANT UPDATE ON SC TO ZHAOC.GRANT UPDATE (GRADE) ON SC TO ZHAOD.GRANT UPDATE ON SC (GRADE) TO ZHAO 答案：C 解析：GRANT UPDATE (COLUMN_NAME) ON TABLE_NAME TO USER_NAME 12. 由计算机、操作系统、 DBMS 、数据库、应用程序及用户等组成的一个整体叫做 ( ) 。A.文件系统B.数据库系统C.软件系统D.数据库管理系统 答案：B 解析：数据库系统：数据库、数据库管理系统、硬件、操作人员的合在一起的总称。数据库管理系统：用来管理数据及数据库的系统。数据库系统包含数据库管理系统、数据库及数据库开发工具所开发的软件（数据库应用系统） 13.以下正确定义一维数组的选项是( )A.int a[5] = {0, 1, 2, 3, 4, 5};B.char a[] = {0, 1, 2, 3, 4, 5};C.char a = {‘A’, ‘B’, ‘C’};D.int a[5] = “0123”; 答案：B 解析：【A】数组越界。所以错误。 【B】声明char类型，传入了数值数组，而数值会以char类型的ASCII编码写入。所以正确。【C】数组声没明显不符合规范，左侧声明名后应加上[]。所以错误。 【D】这种声名只能用字符型char等。所以错误。 14. 具有 n 个结点的连通图至少有（）条边？A.n-1B.nC.n(n-1)/2D.2n 答案：A 解析：具有 n 个结点的无向连通图至少有 n-1 条边具有 n 个结点的有向连通图至少有 n 条边。 15.MYSQL实现主从复制的日志是哪种？A.READ LOGB.UNDO LOGC.BINLOGD.GENERAL LOG 答案：C 解析：MySQL5.6开始主从复制有两种方式：基于日志（binlog）；基于GTID（全局事务标示符） 16. 给出数据表 score(stu-id,name,math,english,Chinese), 下列语句正确的是（ ）A.Select sum(math),avg(chinese) from scoreB.Select *,sum(english) from scoreC.Select stu-id, sum(math) from scoreD.Delete * from score 答案：A 解析：B中对英语成绩求和，无法再与id 名字 其他成绩进行一一对应，因此无法这样选择C中同样对数学成绩求和后无法与id一一对应不能这样选择D删除整个表可以用delete table score，无该用法 17.已知二叉树后序遍历序列是dabec，中序遍历序列是debac，它的前序遍历序列是（）A.cedbaB.cedabC.cebadD.cebda 答案：A 解析：可以关注我的公众号Coder编程，里面有前中后遍历序列的相关文章。 18.The initial insert of new data into the table will leave most of its large columns NULL, to be filled in later by subsequent updates.记录重未更新. PCTFREE 和 PCTUSED取值多少合适？A.PCTUSED = 99， PCTFREE = 1B.PCTUSED = 40， PCTFREE = 30C.PCTUSED = 40， PCTFREE = 10D.PCTUSED = 80， PCTFREE = 10 答案：B 解析：（1）PCTFREE：为一个块保留的空间百分比，表示数据块在什么情况下可以被insert。（2）PCTUSED：是指当块里的数据低于多少百分比时，又可以重新被insert。形象举例说明：假如：一个杯子一共可装10分水:PCTFREE = 10,说明杯子装到9分水，就不能再装了，即:不能进行insert操作，但可以进行update操作。PCTUSED = 40，说明杯子中的水喝到4分一下，就可以往里面装水，即：进行insert操作。可是为什么是40和30？ pctfree这个参数定义了一个块保留空间的百分比，保留空间是为了将来可能发生的更新操作，因为更新可能增大被更新行占用的空间，如果此时该块没有可利用空间，那么只有发生row migrate了，从而会降低I/O性能。换句话说，就是当一个块的利用率达到1-pctfree的时候，oracle就将该块从freelist中移除，不再向该块插入数据。所以说pctfree是控制什么时候将块从freelist中移除的。 pctused这个参数控制一个块什么时候被重新启用来插入数据，例如当一个块达到1-pctfree利用率的时候，oracle停止向该块插入数据，同时从freelist移除该块，但是后来发生一些删除操作，使得该块的利用率下降，当该块的利用率降到pctused以下的时候该块就被重新启用来插入数据了，也即是将该块重新加入到freelist列表中，所以说pctused是控制什么时候将一个块重新加入freelist的。 举个例子：比如一个块的pctfree定为10%，pctused定为40%（oracle默认设置）。那么一个块的使用率达到90%（即1-10%）的时候，oracle将该块从freelist中移除，停止使用该块来插入数据（但可更新）。后来该块上发生了一些删除操作，使得该块的利用率下降，当使用率下降到40%以下的时候，oracle重新将该块加入freelist，可用于新的插入。 19.java8中，下面哪个类用到了解决哈希冲突的开放定址法A.LinkedHashSetB.HashMapC.ThreadLocalD.TreeMap 答案：C 解析：ThreadLocalMap中使用开放地址法来处理散列冲突，而HashMap中使用的是分离链表法。之所以采用不同的方式主要是因为：在ThreadLocalMap中的散列值分散得十分均匀，很少会出现冲突。并且ThreadLocalMap经常需要清除无用的对象，使用纯数组更加方便。 20.关于链表，正确的是（）A.无需实现估计空间B.支持随机访问C.增删不必挪动元素D.所需空间与线性表长度成正比，并且地址连续E.插入一个元素所需挪动元素的平均个数为n/2 答案：A C 解析：链表是一种物理存储单元上非连续、非顺序的存储结构。每一个节点里会存到下一个节点的指针。 推荐笔试内容集合 持续更新中…. 文末欢迎关注Coder编程公众号，主要分享数据结构与算法、Java相关知识体系、框架知识及原理、Spring全家桶、微服务项目实战、DevOps实践之路、每日一篇互联网大厂面试或笔试题以及PMP项目管理知识等。更多精彩内容正在路上~新建了一个qq群：315211365，欢迎大家进群交流一起学习。谢谢了！也可以介绍给身边有需要的朋友。 文章收录至Github: https://github.com/CoderMerlin/coder-programmingGitee: https://gitee.com/573059382/coder-programming欢迎关注并star~","categories":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/categories/Java/"},{"name":"笔试","slug":"笔试","permalink":"http://yoursite.com/categories/%E7%AC%94%E8%AF%95/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/tags/Java/"},{"name":"笔试","slug":"笔试","permalink":"http://yoursite.com/tags/%E7%AC%94%E8%AF%95/"}]},{"title":"Java基础笔试练习（十五）","slug":"interview/java/B-bishi15","date":"2019-10-03T12:06:00.000Z","updated":"2019-10-03T12:06:00.000Z","comments":true,"path":"2019/10/03/interview/java/B-bishi15/","link":"","permalink":"http://yoursite.com/2019/10/03/interview/java/B-bishi15/","excerpt":"","text":"每天进步一点，不做curd工程师与Api调用工程师欢迎访问个人网站：https://www.coder-programming.cn/ 1. 有以下代码片段,请问输出的结果是()?123String str1&#x3D;&quot;hello&quot;;String str2&#x3D;&quot;he&quot;+ new String(&quot;llo&quot;);System.out.println(str1&#x3D;&#x3D;str2); A.trueB.都不对C.nullD.false 答案：D 解析：String str1=”hello”; 这样创建字符串是存在于常量池中String str2=new String(“hello”); str2存在于堆中，==是验证两个对象是否是一个（内存地址是否相同）用+拼接字符串时会创建一个新对象再返回。 2.在如下所示的类Test中，共有（）个构造方法。12345678910111213public class Test&#123; private int x; public Test()&#123; x &#x3D; 35; &#125; public void Test(double f)&#123; this.x &#x3D; (int)f; &#125; public Test(double f)&#123; this.x &#x3D; (int)f; &#125; public Test(String s) &#123;&#125;&#125; A.0B.1C.2D.3 答案：D 解析：构造方法形式:类名([形式参数表])构造方法没有返回值，不能添加void，构造方法可以被重载 3.一个以”.java”为后缀的源文件A.只能包含一个类，类名必须与文件名相同B.只能包含与文件名相同的类以及其中的内部类C.只能有一个与文件名相同的类，可以包含其他类D.可以包含任意类 答案：C 解析：略，前面都做过的- -! 4.下面哪些不是Thread类的方法A.start()B.run()C.exit()D.getPriority() 答案：C 解析：线程常用方法：start()： 使该线程开始执行；Java 虚拟机调用该线程的run方法。run()：如果该线程是使用独立的Runnable运行对象构造的，则调用该Runnable对象的run方法；否则，该方法不执行任何操作并返回。join()：等待该线程终止。getPriority()：返回线程的优先级。yield()：暂停当前正在执行的线程对象，并执行其他线程 5.关于 JAVA 堆,下面说法错误的是()A.所有类的实例和数组都是在堆上分配内存的B.对象所占的堆内存是由自动内存管理系统回收C.堆内存由存活和死亡的对象,空闲碎片区组成D.数组是分配在栈中的 答案：D 解析： 对象存储在堆区。 数组是一种对象。 6.一个文件中的字符要写到另一个文件中，首先需要（ ）。A.使用标准输出流System.out.println()。B.建立文件字符输出流。C.建立文件字符输入流。D.标准输入流System.in.read()。 答案：C 解析：一个文件中的字符要写到另一个文件中，首先需要读取这个文件,所以要先建立输入流,然后写到另一个文件,这时再建立输出流.所以要先建立输入流,再建立输出流. 7.尝试编译以下程序会产生怎么样的结果？（）123456789public class MyClass &#123; long var; public void MyClass(long param) &#123; var &#x3D; param; &#125;&#x2F;&#x2F;(1) public static void main(String[] args) &#123; MyClass a, b; a &#x3D;new MyClass();&#x2F;&#x2F;(2) b &#x3D;new MyClass(5);&#x2F;&#x2F;(3) &#125;&#125; A.编译错误将发生在（1），因为构造函数不能指定返回值B.编译错误将发生在（2），因为该类没有默认构造函数C.编译错误将在（3）处发生，因为该类没有构造函数，该构造函数接受一个int类型的参数D.该程序将正确编译和执行 答案：C 解析：构造方法就是：public 类名， 没有方法修饰符,所以 (1) 处就是一个普通方法,所以该类没有带参数构造方法 ，编译报错 8.下面叙述那个是正确的？（）A.java中的集合类（如Vector）可以用来存储任何类型的对象，且大小可以自动调整。但需要事先知道所存储对象的类型，才能正常使用。B.在java中，我们可以用违例（Exception）来抛出一些并非错误的消息，但这样比直接从函数返回一个结果要更大的系统开销。C.java接口包含函数声明和变量声明。D.java中，子类不可以访问父类的私有成员和受保护的成员。 答案：B 解析：A.vector是线程安全的ArrayList，在内存中占用连续的空间。初始时有一个初始大小，当数据条数大于这个初始大小后会重写分配一个更大的连续空间。如果Vector定义为保存Object则可以存放任意类型。B.try{}catch{}会增加额外的开销C.接口中声明的’变量’必须为public final static,所以为常量D.子类可以访问父类受保护的成员 9.下面代码的运行结果是（）?1234public static void main(String[] args)&#123; String s; System.out.println(&quot;s&#x3D;&quot;+s);&#125; A.代码编程成功，并输出”s=”B.代码编译成功，并输出”s=null”C.由于String s没有初始化，代码不能编译通过。D.代码编译成功，但捕获到NullPointException异常 答案：C 解析：局部变量没有默认值 10. 代码 的运行结果是（）?A.在控制台打印hello sunline！B.报异常java.lang.NullPoninterExceptionC.编译报错D.报异常java.lang.RuntimeExcception 答案：C 解析：1、Java 中单实现通过 implements 关键字，多实现通过 extends 关键字2、Java 中单继承通过 extends 关键字，没有多继承3、如果同时出现继承和实现，则必须先继承（extends）再实现（implements） 11.由3 个“1”和 5 个“0”组成的 8 位二进制补码，能表示的最小整数（）A.-126B.-125C.-32D.-3 答案：B 解析：既然求最小整数，那肯定先想到负数，则最高位（符号位）一定为1，原码中肯定是1所在的位数越高，值越小，而补码是由原码取反加1得到的，则在补码中1所在的位数一定要越低，即补码为1000 0011；由补码求得原码：1111 1101=-(64+32+16+8+4+1)=-125; 12.运行代码，结果正确的是：()?123456Boolean flag &#x3D; false;if(flag &#x3D; true)&#123; System.out.println(&quot;true&quot;);&#125;else&#123; System.out.println(&quot;false&quot;);&#125; A.编译错误B.TRUEC.FALSED.什么也没有输出 答案：B 解析：if(flag = true)的时候flag已经是true了，所以输出true；要是为if(flag == true)输出才为false 13.下列哪个选项是合法的标识符？（）A.123B._nameC.classD.first 答案：B D 解析：Java标识符由 数字、字母、下划线(_)、美元符号($) 组成，首位不能是数字 。并且Java关键字不能作为标识符 。 14.Why would a responsible Java programmer want to use a nested class?A.To keep the code for a very specialized class in close association with the class it works with.B.To support a new user interface that generates custom events.C.To impress the boss with his/her knowledge of Java by using nested classes all over the place. 答案：A B 解析：使用嵌套类，其中有几个令人信服的理由：加强封装—考虑两个顶级类，A和B，如果B需要访问A的private成员，通过在A类隐藏B类，那么即使A的成员声明为private，那么B也可以访问它们。更多的是，B本身也可以隐藏于外部。跟可读性，可维护性的代码—在顶级类里嵌套小类，让代码更靠近使用的地方。 15.下面有关Java的说法正确的是（ ）A.一个类可以实现多个接口B.抽象类必须有抽象方法C.protected成员在子类可见性可以修改D.通过super可以调用父类构造函数E.final的成员方法实现中只能读取类的成员变量F.String是不可修改的，且java运行环境中对string对象有一个对象池保存 答案：A C D F 解析：A对：java类单继承，多实现B错：被abstract修饰的类就是抽象类，有没有抽象方法无所谓C错：这道题应该是要考察子类继承父类，并重写父类的protected成员方法，该方法的可见性可以修改，这是对的，因为子类继承父类的方法，访问权限可以相同或往大了改D对。E错：final修饰的方法只是不能重写，static修饰的方法只能访问类的成员变量F对。 16.下列描述正确的是（ ）？A.类不可以多继承而接口可以多实现B.抽象类自身可以定义成员而接口不可以C.抽象类和接口都不能被实例化D.一个类可以有多个基类和多个基接口 答案：A C 解析：1.java支持单继承，却可以实现多个接口。a对d错2.接口没有构造方法，所以不能实例化，抽象类有构造方法，但是不是用来实例化的，是用来初始化的。c对3.抽象类可以定义普通成员变量而接口不可以，但是抽象类和接口都可以定义静态成员变量，只是接口的静态成员变量要用static final public 来修饰。b错 17.关于下面这段Java程序，哪些描述是正确的：（ ）12345678910public class ThreadTest extends Thread &#123; public void run() &#123; System.out.println(&quot;In run&quot;); yield(); System.out.println(&quot;Leaving run&quot;); &#125; public static void main(String []argv) &#123; (new ThreadTest()).start(); &#125;&#125; A.程序运行输出只有In runB.程序运行输出只有Leaving runC.程序运行输出先有In run后有Leaving runD.程序运行输出先有Leaving run后有In runE.程序没有任何输出就退出了F.程序将被挂起，只能强制退出 答案：C 解析：yield()从未导致线程转到等待/睡眠/阻塞状态。在大多数情况下，yield()将导致线程从运行状态转到可运行状态，但有可能没有效果。 18.哪个是不正确的字符常量？A.”\\n”B.”1”C.”a”D.”\\101” 答案：A B C D 解析：四个答案都采用的是双引号关闭，所以是字符串常量而不是字符常量。忽略这个错误，那么这题就没有答案，因为无论是采用特殊字符的转移序列’\\n’还是采用八进制转义’\\101’，都是满足Java语言规范中规定的字符常量格式。 19.JDK提供的用于并发编程的同步器有哪些？A.SemaphoreB.CyclicBarrierC.CountDownLatchD.Counter 答案： A B C 解析：A，Java 并发库 的Semaphore 可以很轻松完成信号量控制，Semaphore可以控制某个资源可被同时访问的个数，通过 acquire() 获取一个许可，如果没有就等待，而 release() 释放一个许可。B，CyclicBarrier 主要的方法就是一个：await()。await() 方法没被调用一次，计数便会减少1，并阻塞住当前线程。当计数减至0时，阻塞解除，所有在此 CyclicBarrier 上面阻塞的线程开始运行。C，直译过来就是倒计数(CountDown)门闩(Latch)。倒计数不用说，门闩的意思顾名思义就是阻止前进。在这里就是指 CountDownLatch.await() 方法在倒计数为0之前会阻塞当前线程。D，Counter不是并发编程的同步器 20.下面关于面向对象的一些理解哪些是错误的( )？A.面向对象的最重要的特性是支持继承、封装和多态B.系统设计应该遵循开闭原则，系统应该稳定不不可修改，但应支持通过继承、组合等方式进行扩展C.函数式的语言必然是面向对象的语言D.面向对象设计时，每个类的职责应该单一，不要再一个类中引入过多的接口E.过程式语言和面向对象的语言各有其优势，过程式语言更加灵活，面向对象语言更加强调抽象和封装F.Java和C++都是静态类型的面向对象编程语言 答案：C 解析：动态类型语言是指在运行期间才去做数据类型检查的语言，也就是说，在用动态类型的语言编程时，永远也不用给任何变量指定数据类型，该语言会在你第一次赋值给变量时，在内部将数据类型记录下来。静态类型语言与动态类型语言刚好相反，它的数据类型是在编译其间检查的，也就是说在写程序时要声明所有变量的数据类型，C/C++是静态类型语言的典型代表，其他的静态类型语言还有C#、JAVA等。 推荐笔试内容集合 持续更新中…. ProcessOn是一个在线作图工具的聚合平台~ 文末 欢迎关注个人微信公众号：Coder编程欢迎关注Coder编程公众号，主要分享数据结构与算法、Java相关知识体系、框架知识及原理、Spring全家桶、微服务项目实战、DevOps实践之路、每日一篇互联网大厂面试或笔试题以及PMP项目管理知识等。更多精彩内容正在路上~新建了一个qq群：315211365，欢迎大家进群交流一起学习。谢谢了！也可以介绍给身边有需要的朋友。 文章收录至Github: https://github.com/CoderMerlin/coder-programmingGitee: https://gitee.com/573059382/coder-programming欢迎关注并star~","categories":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/categories/Java/"},{"name":"笔试","slug":"笔试","permalink":"http://yoursite.com/categories/%E7%AC%94%E8%AF%95/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/tags/Java/"},{"name":"笔试","slug":"笔试","permalink":"http://yoursite.com/tags/%E7%AC%94%E8%AF%95/"}]},{"title":"Java基础笔试练习（十四）","slug":"interview/java/B-bishi14","date":"2019-10-02T12:06:00.000Z","updated":"2019-10-02T12:06:00.000Z","comments":true,"path":"2019/10/02/interview/java/B-bishi14/","link":"","permalink":"http://yoursite.com/2019/10/02/interview/java/B-bishi14/","excerpt":"","text":"每天进步一点，不做curd工程师与Api调用工程师欢迎访问个人网站：https://www.coder-programming.cn/ 1. Java 语言中，负责并发管理的机制是（ ）A.垃圾回收B.虚拟机C.代码安全D.多线程 答案：D 解析：选项A，Java语言中，垃圾回收机制对系统中不使用的内存进行回收，从而使程序员从繁忙的内存管理中解放出来。选项B，Java编写好的程序首先由编译器转换为标准字节代码，然后由虚拟机执行。虚拟机把字节代码程序与各操作系统和硬件分开，使Java程序独立于平台。选项C，Java的代码安全检测体现在多个层次上，在编译层、解释层、平台层分别作不同的安全检查。选项D，多线程是Java程序的并发机制，它能同步共享数、处理不同的事件。 2.下列不属于访问控制符的是（）A.publicB.privateC.protectedD.static 答案：D 解析：public 公有 private私有 protected受保护static表示“全局”或者“静态”的意思，用来修饰成员变量和成员方法，也可以形成静态static代码块。 3.以下的变量定义语句中，合法的是（）A.byte=128B.boolean=nullC.long a=123LD.double=0.9239d 答案：C 解析：略 4.以下哪个不是Collection的子接口？A.ListB.SetC.SortedSetD.Map 答案：D 解析： 5.在使用super和this关键字时，以下描述正确的是（）A.在子类构造方法中使用super（）显示调用父类的构造方法，super（）必须写在子类构造方法的第一行，否则编译不通过B.super（）和this（）不一定要放在构造方法内第一行C.this（）和super（）可以同时出现在一个构造函数中D.this（）和super（）可以在static环境中使用，包括static方法和static语句块 答案：A 解析：使用super()或者this()方法是必须放在构造函数的第一行由于this函数指向的构造函数默认有super()方法，所以规定this()和super()不能同时出现在一个构造函数中。因为staic方法或者语句块没有实例时可以使用，而此时不需要构造实例，所以不能用this()和super() 6. 不考虑反射，String类型变量所指向内存空间中的内容是不能被改变的（ ）A.正确B.错误 答案：A 解析：略 7. 如果一个接口Glass有个方法setColor()，有个类BlueGlass实现接口Glass，则在类BlueGlass中正确的是？ ( )A.protected void setColor() { …}B.void setColor() { …}C.public void setColor() { …}D.以上语句都可以用在类BlueGlass中 答案：C 解析：JAVA 子类重写继承的方法时,不可以降低方法的访问权限，子类继承父类的访问修饰符要比父类的更大，也就是更加开放，假如我父类是protected修饰的，其子类只能是protected或者public，绝对不能是friendly(默认的访问范围)或者private，当然使用private就不是继承了。还要注意的是，继承当中子类抛出的异常必须是父类抛出的异常的子异常，或者子类抛出的异常要比父类抛出的异常要少。 8.下列命令中，用来运行 Java 程序的是（）A.javaB.javadocC.jarD.javac 答案：A 解析：A.java用来运行一个.class文件B.javadoc用来生成api文档C.jar用来生成jar包D.javac用来把.java文件编译为.class文件 9. java 语言使用的字符码集是A.ASCIIB.BCDC.DCBD.Unicode 答案：D 解析：Java语言使用的是Unicode字符集。而ASCII是国际上使用最广泛的字符编码；BCD是一种数字压缩存储编码方法。 10. 如果要建立一个java.scut.computer的包，叙述正确的是？( )A.只需在代码中加入“package java.scut.computer;”一个语句，并且必须放在代码的第一行B.只需在代码中加入“package java.scut;”一个语句C.必须在代码中加入“package java.scut;”和“package java.scut.computer;”两个语句D.在代码中，不一定是第一句，只要是类定义前，加入package语句即可 答案：A 解析：实际上在Java语言规范中，不允许package name以“java”开头，不然会报一个java.lang.SecurityException 的错误。因为假如我们允许包名以java开头，那么我们完全可以编写和jdk标准包下一模一样的类，如Java.lang.Integer。因此在虚拟机进行类或接口解析时可能会发生冲突。一句话总结就是:假如允许包名以java开头，可能会导致命名空间污染的问题。 11. 如下代码的 结果是什么 ?123456789101112class Base &#123; Base() &#123; System.out.print(&quot;Base&quot;); &#125;&#125;public class Alpha extends Base &#123; public static void main( String[] args ) &#123; new Alpha(); &#x2F;&#x2F;调用父类无参的构造方法 new Base(); &#125;&#125; A.BaseB.BaseBaseC.编译失败D.代码运行但没有输出E.运行时抛出异常 答案：B 解析：略 12.假设有以下代码,下列选项中返回false的语句是：()?123String s&#x3D;”hello”;String t&#x3D;”hello”;char c[] &#x3D;&#123;‘h’,’e’,’l’,’l’,’o’&#125;; A.s.equals(t);B.t.equals(c);C.s==t;D.t.equals(new String(“hello”)); 答案：B 解析： String s=”hello”;//首先会在字符串缓冲区找找有没有hello，结果没有找到，就创建了一个hello，然后引用是sString t=”hello”;//会在字符串缓冲区找hello，结果找到了，就返回了引用，也就是s；所以这句话等同于t=s；所以两个引用一样；所以t==s是trueChar c[] ={‘h’,’e’,’l’,’l’,o’’};//这就是一个数组,而且数组在堆上equlse函数可以看源码！比较值相等之前会先比较类型是不是一样；如果类型一样才会比较值；如果类型不一致就直接return false；所以综上所述：ACD返回true Bfalse 13.下列哪个说法是正确的（）A.ConcurrentHashMap使用synchronized关键字保证线程安全B.HashMap实现了Collection接口C.Array.asList方法返回java.util.ArrayList对象D.SimpleDateFormat是线程不安全的 答案：D 解析： A、ConcurrentHashMap实际上时 HashTable的升级版，使用segment来分段和管理锁，并不是synchronized;B、HashMap实现的接口有：Serializable, Cloneable, Map&lt;K,V&gt; ,没有实现CollectionC、Arrays.asList()方法返回的列表是Arrays.ArrayList类型的，并不是java.util.ArrayList；D、正确 14. 假定Base b = new Derived（）; 调用执行b.methodOne（）后，输出结果是什么？12345678910111213141516171819202122public class Base&#123; public void methodOne()&#123; System.out.print(&quot;A&quot;); methodTwo(); &#125; public void methodTwo()&#123; System.out.print(&quot;B&quot;); &#125; &#125; public class Derived extends Base&#123; public void methodOne()&#123; super.methodOne(); System.out.print(&quot;C&quot;); &#125; public void methodTwo()&#123; System.out.print(&quot;D&quot;); super.methodTwo(); &#125; &#125; A.ABDCB.ABC.ABCDD.ABC 答案：A 解析： 程序开始执行，Base b = new Derived（）；new了一个子类调用执行b.methodOne（）后，第一步：因为子类重写了methodOne()方法，故调用的方法是子类的methodOne()方法第二步：进入methodOne()方法后，执行super.methodOne()；调用父类methodOne()方法 输出：A第三步：继续执行父类methodOne()方法中的methodTwo()方法第四步：因为子类重写了methodOne()方法，故调用的方法是子类的methodTwo()方法第五步：调用子类methodTwo()方法，执行super.methodTwo()；回到父类methodTwo()方法中 输出B第六步：输出B后，执行子类methodTwo()中的System.out.print(“D”)； 输出D第七步：回到子类methodOne()，继续往下执行，System.out.print(“C”); 输出C所以结果为：ABDC 15.对于子类的构造函数说明，下列叙述中错误的是（ ）。A.子类不能继承父类的无参构造函数。B.子类可以在自己的构造函数中使用super关键字来调用父类的含参数构造函数，但这个调用语句必须是子类构造函数的第一个可执行语句。C.在创建子类的对象时，若不含带参构造函数，将先执行父类的无参构造函数，然后再执行自己的无参构造函数。D.子类不但可以继承父类的无参构造函数，也可以继承父类的有参构造函数。 答案：D 解析：构造函数不能被继承，构造方法只能被显式或隐式的调用。 如果说有参构造可以被继承，那么在子类中有参构造就可以被重写；那么就无法通过父类的有参构造创建对象了；所以有参构造不能被继承。 16.下面有关JSP内置对象的描述，说法错误的是？A.session对象：session对象指的是客户端与服务器的一次会话，从客户连到服务器的一个WebApplication开始，直到客户端与服务器断开连接为止B.request对象：客户端的请求信息被封装在request对象中，通过它才能了解到客户的需求，然后做出响应C.application对象：多个application对象实现了用户间数据的共享，可存放全局变量D.response对象：response对象包含了响应客户请求的有关信息 答案：C 解析： application对象是共享的，多个用户共享一个，以此实现数据共享和通信JSP内置对象和属性列举如下：1.request对象客户端的请求信息被封装在request对象中，通过它才能了解到客户的需求，然后做出响应。它是HttpServletRequest类的实例。2.response对象response对象包含了响应客户请求的有关信息，但在JSP中很少直接用到它。它是HttpServletResponse类的实例。3.session对象session对象指的是客户端与服务器的一次会话，从客户连到服务器的一个WebApplication开始，直到客户端与服务器断开连接为止。它是HttpSession类的实例.4.out对象out对象是JspWriter类的实例,是向客户端输出内容常用的对象5.page对象page对象就是指向当前JSP页面本身，有点象类中的this指针，它是java.lang.Object类的实例6.application对象application对象实现了用户间数据的共享，可存放全局变量。它开始于服务器的启动，直到服务器的关闭，在此期间，此对象将一直存在；这样在用户的前后连接或不同用户之间的连接中，可以对此对象的同一属性进行操作；在任何地方对此对象属性的操作，都将影响到其他用户对此的访问。服务器的启动和关闭决定了application对象的生命。它是ServletContext类的实例。7.exception对象exception对象是一个例外对象，当一个页面在运行过程中发生了例外，就产生这个对象。如果一个JSP页面要应用此对象，就必须把isErrorPage设为true，否则无法编译。他实际上是java.lang.Throwable的对象8.pageContext对象pageContext对象提供了对JSP页面内所有的对象及名字空间的访问，也就是说他可以访问到本页所在的SESSION，也可以取本页面所在的application的某一属性值，他相当于页面中所有功能的集大成者，它的本 类名也叫pageContext。9.config对象config对象是在一个Servlet初始化时，JSP引擎向它传递信息用的，此信息包括Servlet初始化时所要用到的参数（通过属性名和属性值构成）以及服务器的有关信息（通过传递一个ServletContext对象） 17.表达式(short)10/10.2*2运算后结果是什么类型？A.shortB.intC.doubleD.float 答案：C 解析：强制类型转换的优先级高于+ - * /java 黙认浮点类型为doublefloat数据类型有一个后缀为” f “或” F “。long类型有一个后缀，为” l “ 或者” L “。 18.下列代码执行结果为（）12345678910111213141516public static void main(String args[])throws InterruptedException&#123; Thread t&#x3D;new Thread(new Runnable() &#123; public void run() &#123; try &#123; Thread.sleep(2000); &#125; catch (InterruptedException e) &#123; throw new RuntimeException(e); &#125; System.out.print(&quot;2&quot;); &#125; &#125;); t.start(); t.join(); System.out.print(&quot;1&quot;);&#125; A.21B.12C.可能为12，也可能为21D.以上答案都不对 答案：A 解析：thread.Join把指定的线程加入到当前线程，可以将两个交替执行的线程合并为顺序执行的线程。比如在线程B中调用了线程A的Join()方法，直到线程A执行完毕后，才会继续执行线程B。t.join(); //使调用线程 t 在此之前执行完毕。t.join(1000); //等待 t 线程，等待时间是1000毫秒 19.以下哪个I / O类可以附加或更新文件A.RandomAccessFile()B.OutputStream()C.DataOutputStream()D.None of the above 答案：A 解析：RandomAccessFile直接继承于Java. Lang. Object类，实现了DataInput和DataOutput接口，它既可以作为一个输入流，又可以作为一个输出流 20.Java语言中，下面哪个语句是创建数组的正确语句？()A.float f[][] = new float[6][6];B.float []f[] = new float[6][6];C.float f[][] = new float[][6];D.float [][]f = new float[6][6];E.float [][]f = new float[6][]; 答案：A B D E 解析：略 推荐笔试内容集合 持续更新中…. ProcessOn是一个在线作图工具的聚合平台 文末 欢迎关注个人微信公众号：Coder编程欢迎关注Coder编程公众号，主要分享数据结构与算法、Java相关知识体系、框架知识及原理、Spring全家桶、微服务项目实战、DevOps实践之路、每日一篇互联网大厂面试或笔试题以及PMP项目管理知识等。更多精彩内容正在路上~新建了一个qq群：315211365，欢迎大家进群交流一起学习。谢谢了！也可以介绍给身边有需要的朋友。 文章收录至Github: https://github.com/CoderMerlin/coder-programmingGitee: https://gitee.com/573059382/coder-programming欢迎关注并star~","categories":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/categories/Java/"},{"name":"笔试","slug":"笔试","permalink":"http://yoursite.com/categories/%E7%AC%94%E8%AF%95/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/tags/Java/"},{"name":"笔试","slug":"笔试","permalink":"http://yoursite.com/tags/%E7%AC%94%E8%AF%95/"}]},{"title":"Java基础笔试练习（十三）","slug":"interview/java/B-bishi13","date":"2019-09-30T12:06:00.000Z","updated":"2019-09-30T12:06:00.000Z","comments":true,"path":"2019/09/30/interview/java/B-bishi13/","link":"","permalink":"http://yoursite.com/2019/09/30/interview/java/B-bishi13/","excerpt":"","text":"每天进步一点，不做curd工程师与Api调用工程师欢迎访问个人网站：https://www.coder-programming.cn/ 1. 类Person里面有个方法sleep()，如果直接用Person.sleep()，则方法sleep前面必须用的关键词是？ ( )A.classB.staticC.publicD.final 答案：B 解析：static关键字：针对多个对象共有的成员变量值时所提出的。特点：1、随着类的加载而加载；2、优先于对象存在；3、被类的所有对象共享；4、可以通过类名直接调用。注意事项：1.在静态方法中是没有this关键字的； 2.静态方法只能访问静态的成员变量和静态的成员方法。 2.下列关于Java类中方法的定义，正确的是（）A.若代码执行到return语句，则将当前值返回，而且继续执行return语句后面的语句。B.只需要对使用基本数据类型定义的属性使用getter和setter，体现类的封装性。C.方法的返回值只能是基本数据类型。D.在同一个类中定义的方法，允许方法名称相同而形参列表不同。 答案：D 解析：A、一旦执行到return，就不再执行后续的代码。B、类的封装性可不是这么体现的，数据域和方法都可以被封装。数据域可以是基本数据类型也可以是引用类型。C、方法的返回值可以是引用类型。D、重载，判定方法只有方法名一致，形参列表不同。 3.J2EE中，当把来自客户机的HTTP请求委托给servlet时，会调用HttpServlet的（ ）方法A.serviceB.dogetC.dopostD.init 答案：A 解析：HttpServlet容器响应Web客户请求流程如下：1）Web客户向Servlet容器发出Http请求；2）Servlet容器解析Web客户的Http请求；3）Servlet容器创建一个HttpRequest对象，在这个对象中封装Http请求信息；4）Servlet容器创建一个HttpResponse对象；5）Servlet容器调用HttpServlet的service方法，这个方法中会根据request的Method来判断具体是执行doGet还是doPost，把HttpRequest和HttpResponse对象作为service方法的参数传给HttpServlet对象；6）HttpServlet调用HttpRequest的有关方法，获取HTTP请求信息；7）HttpServlet调用HttpResponse的有关方法，生成响应数据；8）Servlet容器把HttpServlet的响应结果传给Web客户。doGet() 或 doPost() 是创建HttpServlet时需要覆盖的方法. 4.以下不是修饰符final的作用的是( )。A.修饰常量B.修饰不可被继承的类C.修饰不可变类D.修饰不可覆盖的方法 答案：C 解析：final的作用： 修饰变量，变量的引用地址不可变，但是地址中的内容可以变。 修饰方法，方法不可被重写，但是还是可以重载 修饰类，类不可继承。 5.下面有关java的一些细节问题，描述错误的是？A.构造方法不需要同步化B.一个子类不可以覆盖掉父类的同步方法C.定义在接口中的方法默认是public的D.容器保存的是对象的引用 答案：B 解析：B选项中，子类应该是可以置换掉父类的同步方法的。 6.关于依赖注入，下列选项中说法错误的是（）A.依赖注入能够独立开发各组件，然后根据组件间关系进行组装B.依赖注入使组件之间相互依赖，相互制约C.依赖注入提供使用接口编程D.依赖注入指对象在使用时动态注入 答案：B 解析：依赖注入的动机就是减少组件之间的耦合度，使开发更为简洁 7.下面有关java基本类型的默认值和取值范围，说法错误的是？A.字节型的类型默认值是0，取值范围是-2^7—2^7-1B.boolean类型默认值是false，取值范围是true\\falseC.字符型类型默认是0，取值范围是-2^15 —2^15-1D.long类型默认是0，取值范围是-2^63—2^63-1 答案：C 解析：默认值 取值范围 示例字节型 ： 0 -2^7—-2^7-1 byte b=10;字符型 ： ‘ \\u0000′ 0—-2^16-1 char c=’c’ ;short : 0 -2^15—-2^15-1 short s=10;int : 0 -2^31—-2^31-1 int i=10;long : 0 -2^63—-2^63-1 long o=10L;float : 0.0f -2^31—-2^31-1 float f=10.0Fdouble : 0.0d -2^63—-2^63-1 double d=10.0;boolean: false true\\false boolean flag=true; 8.12 A.B.C.D. 答案： 解析： 9.以下对选择语句描述错误的是(）A.根据某一条件重复执行一部分代码直到满足终止条件为止B.可以根据条件控制程序流程，改变程序执行的顺序C.选择语句可以嵌套使用D.当条件满足时就会执行相应的语句 答案：A 解析：流程控制语句分类：顺序结构选择结构:if语句、switch语句循环结构:while语句、for语句 10.java中将ISO8859-1字符串转成GB2312编码，语句为 ？A.new String(“ISO8859-1”.getBytes(“ISO8859-1”),”GB2312”)B.new String(String.getBytes(“GB2312”）, ISO8859-1)C.new String(String.getBytes(“ISO8859-1”))D.new String(String.getBytes(“GB2312”)) 答案：A 解析：答案：A注意这里”ISO8859-1”是一个普通字符串，不要被迷惑了String.getBytes(“ISO8859-1”）表示获取这个字符串的byte数组，然后new String(String.getBytes(“ISO8859-1”），GB2312)是上面的字符数组按照GB2312编码成新的字符串 11.以下代码正确返回结果()?123456Integer a &#x3D; 1;Integer b &#x3D; 1;Integer c &#x3D; 500;Integer d &#x3D; 500;System.out.print(a &#x3D;&#x3D; b);System.out.print(c &#x3D;&#x3D; d); A.true、trueB.true、falseC.false、trueD.false、false 答案：B 解析：nterger的范围时[-128,127]，在这个范围内比较大小，相等为true，超过范围为false 12.jdbc的事务必须在一个数据库连接上完成。编程时必须去掉数据库的自动提交功能。当成功后调用commit，当失败后调用rollback。判断这句话正确与否A.正确B.错误 答案：A 解析：在JDBC编程模式中，一个数据库连接建立时，就处于一个自动提交模式，每一个SQL语句被执行完成后就会被自动提交，反映到数据库中。当需要把几条逻辑上相关的SQL组成的一个事务执行时，就需要关闭事务自动提交模式。如下面的语句所示： con.setAutoCommit(false); // 关闭自动提交模式 一旦关闭了事务自动提交模式，不会有任何SQL语句被提交至数据库系统执行，除非显式的调用提交方法。 13.关于下面的程序Test.java说法正确的是( )。12345678public class Test &#123; static String x&#x3D;&quot;1&quot;; static int y&#x3D;1; public static void main(String args[]) &#123; static int z&#x3D;2; System.out.println(x+y+z); &#125;&#125; A.3B.112C.13D.程序有编译错误 答案：D 解析：被static修饰的变量称为静态变量，静态变量属于整个类，而局部变量属于方法，只在该方法内有效，所以static不能修饰局部变量 14.抽象类方法的访问权限默认都是public。（ ）A.正确B.错误 答案：B 解析：关于抽象类JDK 1.8以前，抽象类的方法默认访问权限为protectedJDK 1.8时，抽象类的方法默认访问权限变为default 关于接口JDK 1.8以前，接口中的方法必须是public的JDK 1.8时，接口中的方法可以是public的，也可以是default的JDK 1.9时，接口中的方法可以是private的 15.下面程序段的时间复杂度是（）12345i &#x3D; k &#x3D; 0;while( k &lt; n )&#123; i ++ ;k +&#x3D; i ;&#125; A.O(n)B.O(n^1/2)C.O(n*i)D.O(n+i) 答案：B 解析：设循环次数为 q， 时间复杂度为T(n), 也就是说，每次给定一个n的时候，根据 T(n)可以算出来时间复杂度， 那么时间复杂度就是 q， 因为其他操作都是常数时间的操作，所以决定时间复杂度的就应该是循环次数。 观察代码，在while循环中，每次 i 会自加1，循环次数 q 也得加 1 ， 也就可以看成每次都是 s 每次都加上 q , 在 s &gt; = n 的时候结束，那么 n 和 q 的关系就是 k=0 k + 1 + 2 + +3 + … + q &lt;= n(q 是循环的次数 )， 那就是 0 + 1 + 2 + +3 + … + q &lt;= n ，根据等差公式算一算就可以得到 T( n ) = n^0.5了 主要就是借着 q 算出来 n 和 T( n) 的关系。 16.以下代码最后输出什么？1234public void test() &#123; int a &#x3D; 10; System.out.println(a++ + a--);&#125; A.19B.20C.21D.22 答案：C 解析：a++ 先把10赋值给a 再+1 所以左边是10 但此时a=11。右边a– 也是先赋值 a=11，再-1。10+11=21 此时a=10。 17.下列关于容器集合类的说法正确的是？A.LinkedList继承自ListB.AbstractSet继承自SetC.HashSet继承自AbstractSetD.WeakMap继承自HashMap 答案：C 解析：a选项linkedlist类是实现了List接口，而不是继承b选项AbstractSet类实现Set接口c选项HashSet继承 AbstractSet类，同时也实现setd选项WeakMap是js里面的 18.以下哪些类是线程安全的（）A.VectorB.HashMapC.ArrayListD.StringBufferE.Properties 答案：ADE 解析：A，Vector相当于一个线程安全的ListB，HashMap是非线程安全的，其对应的线程安全类是HashTableC，Arraylist是非线程安全的，其对应的线程安全类是VectorD，StringBuffer是线程安全的，相当于一个线程安全的StringBuilderE，Properties实现了Map接口，是线程安全的 19.关于struts项目中的类与MVC模式的对应关系，说法错误的是A.Jsp文件实现视图View的功能B.ActionServlet这一个类是整个struts项目的控制器C.ActionForm、Action都属于Model部分D.一个struts项目只能有一个Servlet 答案：C D 解析： 20. Hashtable 和 HashMap 的区别是： （）？A.Hashtable 是一个哈希表，该类继承了 AbstractMap，实现了 Map 接口B.HashMap 是内部基于哈希表实现，该类继承AbstractMap，实现Map接口C.Hashtable 线程安全的，而 HashMap 是线程不安全的D.Properties 类 继承了 Hashtable 类，而 Hashtable 类则继承Dictionary 类E.HashMap允许将 null 作为一个 entry 的 key 或者 value，而 Hashtable 不允许。 答案：B C D E 解析：Hashtable：（1）Hashtable 是一个散列表，它存储的内容是键值对(key-value)映射。（2）Hashtable 的函数都是同步的，这意味着它是线程安全的。它的key、value都不可以为null。（3）HashTable直接使用对象的hashCode。HashMap：（1）由数组+链表组成的，基于哈希表的Map实现，数组是HashMap的主体，链表则是主要为了解决哈希冲突而存在的。（2）不是线程安全的，HashMap可以接受为null的键(key)和值(value)。（3）HashMap重新计算hash值 推荐笔试内容集合 持续更新中….ProcessOn是一个在线作图工具的聚合平台~ 文末 欢迎关注个人微信公众号：Coder编程欢迎关注Coder编程公众号，主要分享数据结构与算法、Java相关知识体系、框架知识及原理、Spring全家桶、微服务项目实战、DevOps实践之路、每日一篇互联网大厂面试或笔试题以及PMP项目管理知识等。更多精彩内容正在路上~新建了一个qq群：315211365，欢迎大家进群交流一起学习。谢谢了！也可以介绍给身边有需要的朋友。 文章收录至Github: https://github.com/CoderMerlin/coder-programmingGitee: https://gitee.com/573059382/coder-programming欢迎关注并star~","categories":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/categories/Java/"},{"name":"笔试","slug":"笔试","permalink":"http://yoursite.com/categories/%E7%AC%94%E8%AF%95/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/tags/Java/"},{"name":"笔试","slug":"笔试","permalink":"http://yoursite.com/tags/%E7%AC%94%E8%AF%95/"}]},{"title":"Java基础笔试练习（十二）","slug":"interview/java/B-bishi12","date":"2019-09-27T12:06:00.000Z","updated":"2019-09-27T12:06:00.000Z","comments":true,"path":"2019/09/27/interview/java/B-bishi12/","link":"","permalink":"http://yoursite.com/2019/09/27/interview/java/B-bishi12/","excerpt":"","text":"每天进步一点，不做curd工程师与Api调用工程师欢迎访问个人网站：https://www.coder-programming.cn/ 1.（C#、JAVA）扩展方法能访问被扩展对象的public成员A.能B.不能 答案：A 解析：翻译一下，子类方法是否能够访问父类中的public成员。 2.如果子类要调用父类的构造函数，则通过super（）调用来实现。A.正确B.错误 答案：A 解析：super关键字在子类内部使用，代表父类对象。 访问父类的属性 super.属性名 访问父类的方法 super.方法名() 子类构造方法需要调用父类的构造方法时，在子类的构造方法体里最前面的位置：super() 3.下列关于Java语言中String和char的说法，正确的是（）A.String是Java定义的一种基本数据类型。B.String是以“\\0”结尾的char类型的数组char[]。C.使用equals()方法比较两个String是否内容一样（即字符串中的各个字符都一样）。D.Char类型在Java语言里面存储的是ASCII码。 答案：C 解析：A 基本数据类型包括byte，short，int，long，float，double，char，boolean，所以A错。B,C语言当中是这样，java不是， String内部是用char[]数组实现的，不过结尾不用\\0。C 对，字符串内容比较用equals方法。D char存储的unicode码，不进可以存储ascII码，汉字也可以。 4.关于JAVA堆，下面说法错误的是（）？A.所有类的实例和数组都是在堆上分配内存的B.堆内存由存活和死亡的对象，空闲碎片区组成C.数组是分配在栈中的D.对象所占的堆内存是由自动内存管理系统回收 答案：C 解析：C应该改为，数组的引用存在栈内存中，而数组对象保存在堆里面。 5. java 接口的修饰符可以为（）A.privateB.protectedC.finalD.abstract 答案：D 解析：接口是通用的，用来描述方法是干什么用的，方法的默认修饰符为public abstract.不可以为final 是因为方法要被重写， 描述符如果为private或者protected，那么子类重写的方法的描述符也可以为private或者protected，这样就是有了访问显示，不符合接口所要达到的的任何人都可以使用了 6.指出下来程序运行的结果是 A.good and abcB.good and gbcC.test ok and abcD.test ok and gbc 答案：B 解析：实参和形参的问题。”ex.change(ex.str, ex.ch)”语句调用”change”方法时，将ex.str变量（实参）的值赋给了”change”方法中的str变量（形参），而将ex.ch（实参）的地址赋给了”change”方法中的ch（形参）。”change”方法运行时，第一条语句改变的是方法中形参的值，对实参没影响，第二条语句由于是直接改变的ch所指地址的值，所以把实参也进行了改变。 7. A 是抽象父类或接口， B ， C 派生自 A ，或实现 A ，现在 Java 源代码中有如下声明： 问以下哪个说法是正确的？（ ）1231. A a0&#x3D;new A();2. A a1 &#x3D;new B();3. A a2&#x3D;new C(); A.第1行不能通过编译B.第1、2行能通过编译，但第3行编译出错C.第1、2、3行能通过编译，但第2、3行运行时出错D.第1行、第2行和第3行的声明都是正确的 答案：A 解析：抽象类和接口不能实例化 8.try块后必须有catch块。（）A.正确B.错误 答案：B 解析：catch可以省略，try的形式有三种：try-catchtry-finallytry-catch-finally但catch和finally语句不能同时省略！ 9. 以下 _____ 不是 Object 类的方法A.clone（）B.finalize()C.toString()D.hasNext() 答案：D 解析：略 10.指出下列程序运行的结果：123456789101112131415public class Example&#123; String str&#x3D;new String(&quot;tarena&quot;); char[]ch&#x3D;&#123;&#39;a&#39;,&#39;b&#39;,&#39;c&#39;&#125;; public static void main(String args[])&#123; Example ex&#x3D;new Example(); ex.change(ex.str,ex.ch); System.out.print(ex.str+&quot; and &quot;); System.out.print(ex.ch); &#125; public void change(String str,char ch[])&#123; &#x2F;&#x2F;引用类型变量，传递的是地址，属于引用传递。 str&#x3D;&quot;test ok&quot;; ch[0]&#x3D;&#39;g&#39;; &#125;&#125; A.tarena and abcB.tarena and gbcC.test ok and abcD.test ok and gbc 答案：B 解析：与第六题类似。 11.以下代码段执行后的输出结果为1234567public class Test &#123; public static void main(String args[]) &#123; int x &#x3D; -5; int y &#x3D; -12; System.out.println(y % x); &#125;&#125; A.-1B.2C.1D.-2 答案：D 解析：取模运算，余数的符号跟被除数符号相同 12.下面有关webservice的描述，错误的是？A.Webservice是跨平台，跨语言的远程调用技术B.Webservice通信机制实质就是json数据交换C.Webservice采用了soap协议（简单对象协议）进行通信D.WSDL是用于描述 Web Services 以及如何对它们进行访问 答案：B 解析：Webservice是跨平台，跨语言的远程调用技术;它的通信机制实质就是xml数据交换;它采用了soap协议（简单对象协议）进行通信 13.关于ASCII码和ANSI码，以下说法不正确的是（）？A.标准ASCII只使用7个bitB.在简体中文的Windows系统中，ANSI就是GB2312C.ASCII码是ANSI码的子集D.ASCII码都是可打印字符 答案：D 解析：A、标准ASCII只使用7个bit，扩展的ASCII使用8个bit。B、ANSI通常使用 0x000x7f 范围的1 个字节来表示 1 个英文字符。超出此范围的使用0x800xFFFF来编码，即扩展的ASCII编码。不同 ANSI 编码之间互不兼容。在简体中文Windows操作系统中，ANSI 编码代表 GBK 编码；在繁体中文Windows操作系统中，ANSI编码代表Big5；在日文Windows操作系统中，ANSI 编码代表 Shift_JIS 编码。C、ANSI通常使用 0x00~0x7f 范围的1 个字节来表示 1 个英文字符，即ASCII码D、ASCII码包含一些特殊空字符 14. Test.main() 函数执行后的输出是（）12345678910111213141516171819202122232425262728293031323334353637public class Test &#123; public static void main(String [] args)&#123; System.out.println(new B().getValue()); &#125; static class A&#123; protected int value; public A(int v) &#123; setValue(v); &#125; public void setValue(int value)&#123; this.value &#x3D; value; &#125; public int getValue()&#123; try&#123; value++; return value; &#125; catch(Exception e)&#123; System.out.println(e.toString()); &#125; finally &#123; this.setValue(value); System.out.println(value); &#125; return value; &#125; &#125; static class B extends A&#123; public B() &#123; super(5); setValue(getValue() - 3); &#125; public void setValue(int value)&#123; super.setValue(2 * value); &#125; &#125; &#125; A.11 17 34B.22 74 74C.6 7 7D.22 34 17 答案：D 解析：略 15.final、finally和finalize的区别中，下述说法正确的有？A.final用于声明属性，方法和类，分别表示属性不可变，方法不可覆盖，类不可继承。B.finally是异常处理语句结构的一部分，表示总是执行。C.finalize是Object类的一个方法，在垃圾收集器执行的时候会调用被回收对象的此方法，可以覆盖此方法提供垃圾收集时的其他资源的回收，例如关闭文件等。D.引用变量被final修饰之后，不能再指向其他对象，它指向的对象的内容也是不可变的。 答案：A B 解析：A，D考的一个知识点，final修饰变量，变量的引用（也就是指向的地址）不可变，但是引用的内容可以变（地址中的内容可变）。B，finally表示总是执行。但是其实finally也有不执行的时候，但是这个题不要扣字眼。 在try中调用System.exit(0)，强制退出了程序，finally块不执行。 在进入try块前，出现了异常，finally块不执行。C，finalize方法，这个选项错就错在，这个方法一个对象只能执行一次，只能在第一次进入被回收的队列，而且对象所属于的类重写了finalize方法才会被执行。第二次进入回收队列的时候，不会再执行其finalize方法，而是直接被二次标记，在下一次GC的时候被GC。放一张图吧 16.关于equals和hashCode描述正确的是()A.两个obj，如果equals()相等，hashCode()一定相等（符合代码规范的情况下）B.两个obj，如果hashCode()相等，equals()不一定相等C.两个不同的obj， hashCode()可能相等D.其他都不对 答案：A B C 解析：地址比较是通过计算对象的哈希值来比较的，hashcode属于Object的本地方法，对象相等（地址相等），hashcode相等，对象不相等，hashcode()可能相等，哈希冲突 17.下面有关java类加载器，说法正确的是？A.引导类加载器（bootstrap class loader）：它用来加载 Java 的核心库，是用原生代码来实现的B.扩展类加载器（extensions class loader）：它用来加载 Java 的扩展库。C.系统类加载器（system class loader）：它根据 Java 应用的类路径（CLASSPATH）来加载 Java 类D.tomcat为每个App创建一个Loader，里面保存着此WebApp的ClassLoader。需要加载WebApp下的类时，就取出ClassLoader来使用 答案：ABCD 解析： jvm classLoader architecture : a、Bootstrap ClassLoader/启动类加载器主要负责jdk_home/lib目录下的核心 api 或 -Xbootclasspath 选项指定的jar包装入工作. B、Extension ClassLoader/扩展类加载器主要负责jdk_home/lib/ext目录下的jar包或 -Djava.ext.dirs 指定目录下的jar包装入工作 C、System ClassLoader/系统类加载器主要负责java -classpath/-Djava.class.path所指的目录下的类与jar包装入工作. B、 User Custom ClassLoader/用户自定义类加载器(java.lang.ClassLoader的子类)在程序运行期间, 通过java.lang.ClassLoader的子类动态加载class文件, 体现java动态实时类装入特性. 18.下面哪项技术可以用在WEB开发中实现会话跟踪实现？A.sessionB.CookieC.地址重写D.隐藏域 答案：ABCD 解析：会话跟踪是一种灵活、轻便的机制，它使Web上的状态编程变为可能。HTTP是一种无状态协议，每当用户发出请求时，服务器就会做出响应，客户端与服务器之间的联系是离散的、非连续的。当用户在同一网站的多个页面之间转换时，根本无法确定是否是同一个客户，会话跟踪技术就可以解决这个问题。当一个客户在多个页面间切换时，服务器会保存该用户的信息。有四种方法可以实现会话跟踪技术：URL重写、隐藏表单域、Cookie、Session。1）.隐藏表单域：，非常适合步需要大量数据存储的会话应用。2）.URL 重写:URL 可以在后面附加参数，和服务器的请求一起发送，这些参数为名字/值对。3）.Cookie:一个 Cookie 是一个小的，已命名数据元素。服务器使用 SET-Cookie 头标将它作为 HTTP响应的一部分传送到客户端，客户端被请求保存 Cookie 值，在对同一服务器的后续请求使用一个Cookie 头标将之返回到服务器。与其它技术比较，Cookie 的一个优点是在浏览器会话结束后，甚至在客户端计算机重启后它仍可以保留其值4）.Session：使用 setAttribute(String str,Object obj)方法将对象捆绑到一个会话 19.下面有关forward和redirect的描述，正确的是() ？A.forward是服务器将控制权转交给另外一个内部服务器对象，由新的对象来全权负责响应用户的请求B.执行forward时，浏览器不知道服务器发送的内容是从何处来，浏览器地址栏中还是原来的地址C.执行redirect时，服务器端告诉浏览器重新去请求地址D.forward是内部重定向，redirect是外部重定向E.redirect默认将产生301 Permanently moved的HTTP响应 答案：B C D 解析： 1.从地址栏显示来说forward是服务器请求资源,服务器直接访问目标地址的URL,把那个URL的响应内容读取过来,然后把这些内容再发给浏览器.浏览器根本不知道服务器发送的内容从哪里来的,所以它的地址栏还是原来的地址.redirect是服务端根据逻辑,发送一个状态码,告诉浏览器重新去请求那个地址.所以地址栏显示的是新的URL. 2.从数据共享来说forward:转发页面和转发到的页面可以共享request里面的数据.redirect:不能共享数据. 3.从运用地方来说forward:一般用于用户登陆的时候,根据角色转发到相应的模块.redirect:一般用于用户注销登陆时返回主页面和跳转到其它的网站等. 4.从效率来说forward:高.redirect:低. 20.下面关于volatile的功能说法正确的是哪个A.原子性B.有序性C.可见性D.持久性 答案：B C 解析：synchronized保证三大性，原子性，有序性，可见性，volatile保证有序性，可见性，不能保证原子性 推荐笔试内容集合 持续更新中….ProcessOn是一个在线作图工具的聚合平台~ 文末 欢迎关注个人微信公众号：Coder编程欢迎关注Coder编程公众号，主要分享数据结构与算法、Java相关知识体系、框架知识及原理、Spring全家桶、微服务项目实战、DevOps实践之路、每日一篇互联网大厂面试或笔试题以及PMP项目管理知识等。更多精彩内容正在路上~新建了一个qq群：315211365，欢迎大家进群交流一起学习。谢谢了！也可以介绍给身边有需要的朋友。 文章收录至Github: https://github.com/CoderMerlin/coder-programmingGitee: https://gitee.com/573059382/coder-programming欢迎关注并star~","categories":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/categories/Java/"},{"name":"笔试","slug":"笔试","permalink":"http://yoursite.com/categories/%E7%AC%94%E8%AF%95/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/tags/Java/"},{"name":"笔试","slug":"笔试","permalink":"http://yoursite.com/tags/%E7%AC%94%E8%AF%95/"}]},{"title":"Java基础笔试练习（十一）","slug":"interview/java/B-bishi11","date":"2019-09-26T12:06:00.000Z","updated":"2019-09-26T12:06:00.000Z","comments":true,"path":"2019/09/26/interview/java/B-bishi11/","link":"","permalink":"http://yoursite.com/2019/09/26/interview/java/B-bishi11/","excerpt":"","text":"每天进步一点，不做curd工程师与Api调用工程师欢迎访问个人网站：https://www.coder-programming.cn/ 1.下面的方法，当输入为2的时候返回值是多少？123456789101112public static int getValue(int i) &#123; int result &#x3D; 0; switch (i) &#123; case 1: result &#x3D; result + i; case 2: result &#x3D; result + i * 2; case 3: result &#x3D; result + i * 3; &#125; return result;&#125; A.0B.2C.4D.10 答案：D 解析：没有break，发生case穿透现象，程序会继续向下执行，直到遇到break或者结束switch语句的大括号为止。 2.Java是从（）语言改进重新设计A.AdaB.C++C.PascalD.BASIC 答案：B 解析：ava是类C语言，从C++改进而来 去掉了指针和多继承，采用自动垃圾回收等 3.一个以”. java”为后缀的源文件，哪些说法是正确的？A.只能包含一个类，类名必须与文件名相同B.只能包含与文件名相同的类，以及其中的内部类C.只能有一个与文件名相同的类，可以包含其他类D.可以包含任意类 答案：C 解析：C。一个与文件名相同的public的类敏感词类可随意多个。 4.在JAVA中，下面关于String类和StringBuffer类的描述正确的是那一个？A.StringBuffer类的对象调用toString（）方法将返回String类型的结果B.两个类都有append（）方法C.可以直接将字符串“test”赋值给声明的String类和StringBuffer类的变量D.两个类的实例的值都能够被改变 答案：A 解析：A. StringBuffer类调用toString（）方法后将转换为String类型 正确B. String类型中没有append（）方法，要追加字符串”+“即可，也没有必要 appendC. 可以直接将字符串“test”复制给声明的Stirng类的变量，而StringBuffer类的不行D. String 实例 是不可变的String 对象/实例 是不可以被改变的。 当new一个String对象时，JVM会在内存中创建一个String对象，当另外一个String对象值与它一样时，会将该对象直接指向对应的地址。 5. 下列关于构造方法不正确的是：（ ）A.类的构造方法和类同名B.一个类可以有多个构造方法C.在实例化对象时必须调用类的构造方法D.构造方法可以和该类其他方法一样被该类对象调用 答案：D 解析：1.构造方法也是类的方法，可以在创建对象时为成员变量赋值2.构造方法可以进行重载，但是参数列表必须不相同，不以返回值和访问级别进行区分3.构造方法没有返回值4.构造方法一定要与定义为public的类同名5.构造方法不能被对象调用，只会创建对象，使用new关键字 6.根据下面的程序代码，哪些选项的值返回true？12345678910111213public class Square &#123; long width; public Square(long l) &#123; width &#x3D; l; &#125; public static void main(String arg[]) &#123; Square a, b, c; a &#x3D; new Square(42L); b &#x3D; new Square(42L); c &#x3D; b; long s &#x3D; 42L; &#125; &#125; A.a == bB.s == aC.b == cD.a.equals(s) 答案：C 解析： 12a &#x3D; new Square(42L); b &#x3D; new Square(42L); 这里new了两个对象，所以a,b不是同一个引用a!=b ,s的类型跟a,b不同类型，所以s!=a,s!=bc = b; 这里b，c是同一个对象的引用，所以b==c是true 7.根据以下代码段,执行new Child(“John”, 10); 要使数据域data得到10，则子类空白处应该填写( )。123456789101112 class Parent &#123; private int data; public Parent(int d)&#123; data &#x3D; d; &#125;&#125;class Child extends Parent&#123; String name; public Child(String s, int d)&#123; ___________________ name &#x3D; s; &#125;&#125; A.data = d;B.super.data = d;C.Parent(d);D.super(d); 答案：D 解析：1.子父类存在同名成员时，子类中默认访问子类的成员，可通过super指定访问父类的成员，格式：super.xx (注：xx是成员名)；2.创建子类对象时，默认会调用父类的无参构造方法，可通过super指定调用父类其他构造方法，格式：s uper(yy) (注：yy是父类构造方法需要传递的参数) 8.Given the following code:() What is the result?12345678910111213141516public class Test &#123; private static int j &#x3D; 0; private static Boolean methodB(int k) &#123; j +&#x3D; k; return true; &#125; public static void methodA(int i) &#123; boolean b; b &#x3D; i &lt; 10 | methodB(4); b &#x3D; i &lt; 10 || methodB(8); &#125; public static void main(String args[]) &#123; methodA(0); System.out.println(j); &#125;&#125; A.The program prints”0”B.The program prints”4”C.The program prints”8”D.The program prints”12”E.The code does not complete. 答案：B 解析：选 B在main函数中先调用methodA（0）在methodA中，第二行b = i &lt; 10 | methodB(4); //中间为与计算符，执行完methodB(4)后，j = 4methodA中，第三行b = i &lt; 10 || methodB(8);//中间为或计算符，因为i &lt; 10 已成立，不需要后续计算所以最后结果输出为4 9.一个文件中的字符要写到另一个文件中，首先需要（ ）？A.System.out.print (buffer[i]);B.FileOutputStream fout = new FileOutputStream(this.filename);C.FileInputStream fin = new FileInputStream(this.filename);D.System.in.read(buffer) 答案：C 解析：程序的逻辑很简单。程序必须打开两个文件，以可读的方式打开一个已有文件和以可写的方式打开一个新文件，后将已有文件中的内容，暂时存放在内存中，再写入新的文件，后关闭所有文件，程序结束。根据题意，首先需要读入一个文件中的字符，需要FileInputStream fin = new FileInputStream(this.filename); 10. 阅读以下 foo 函数，请问它的时间复杂度是：12345678910111213int foo(intarray[], int n, int key)&#123; int n1&#x3D;0,n2&#x3D;n-1,m; while(n1&lt;&#x3D;n2)&#123; m&#x3D;(n1+n2)&#x2F;2; if(array[m]&#x3D;&#x3D;key) return m; if(array[m]&gt;key) n2&#x3D;m-1; else n1&#x3D;m+1; &#125; return -1;&#125; A.O(n2)B.O(n3)C.O(log(n))D.O(n) 答案：C 解析：二分查找时间复杂度为O（logn） ，关注我的微信公众号，里面有关于时间复杂度和空间复杂度介绍的文章。 11.下列关于管道（Pipe）通信的叙述中，正确的是（）？A.进程对管道进行读操作和写操作都可能被阻塞B.一个管道只能有一个进程或一个写进程对其操作C.一个管道可实现双向数据传输D.管道的容量仅受磁盘容量大小限制 答案：A 解析：A.正确，因为管道为空，读操作会被阻塞；管道满了，写操作会被阻塞B.可以有多个进程对其读；也可以有多个进程写，只不过不能同时写。并且题目没有说“同时”，B不对C.匿名管道只能单向；命名管道可以双向；所以C过于绝对D.管道是内存中的，所以D不对 12.要导入java/awt/event下面的所有类，叙述正确的是？()A.import java.awt.和import java.awt.event.*都可以B.只能是import java.awt.C.只能是import java.awt.event.*D.import java.awt.和import java.awt.event.都不可以 答案：C 解析：导包只可以导到当前层，不可以再导入包里面的包中的类 13.对于JVM内存配置参数： -Xmx10240m -Xms10240m -Xmn5120m -XXSurvivorRatio=3,其最小内存值和Survivor区总大小分别是（） A.5120m，1024mB.5120m，2048mC.10240m，1024mD.10240m，2048m 答案：D 解析：-Xmx：最大堆大小-Xms：初始堆大小-Xmn: 年轻代大小-XXSurvivorRatio：年轻代中Eden区与Survivor区的大小比值年轻代5120m， Eden：Survivor=3，Survivor区大小=1024m（Survivor区有两个，即将年轻代分为5份，每个Survivor区占一份），总大小为2048m。-Xms初始堆大小即最小内存值为10240m 14.URL u =new URL(“http://www.123.com&quot;);。如果www.123.com不存在，则返回______。A.http://www.123.comB.””C.nullD.抛出异常 答案：A 解析：new URL()时必须捕获检查异常，但这个异常是由于字符串格式和URL不符导致的，与网址是否存在无关。URL的toString方法返回字符串，无论网址是否存在 15.存根（Stub）与以下哪种技术有关A.交换B.动态链接C.动态加载D.磁盘调度 答案：B 解析：理解为适配器模式，继承该类则不需要实现一个接口全部方法。 16.Java中的集合类包括ArrayList、LinkedList、HashMap等类，下列关于集合类描述正确的是（）A.ArrayList和LinkedList均实现了List接口B.ArrayList的访问速度比LinkedList快C.添加和删除元素时，ArrayList的表现更佳D.HashMap实现Map接口，它允许任何类型的键和值对象，并允许将null用作键或值 答案：A B D 解析：关于D,值对象可以允许null 17.下列说法正确的是（）？A.我们直接调用Thread对象的run方法会报异常，所以我们应该使用start方法来开启一个线程B.一个进程是一个独立的运行环境，可以被看做一个程序或者一个应用。而线程是在进程中执行的一个任务。Java运行环境是一个包含了不同的类和程序的单一进程。线程可以被称为轻量级进程。线程需要较少的资源来创建和驻留在进程中，并且可以共享进程中的资源C.synchronized可以解决可见性问题，volatile可以解决原子性问题D.ThreadLocal用于创建线程的本地变量，该变量是线程之间不共享的 答案：B D 解析：volatile与synchronized的区别：volatile本质是在告诉jvm当前变量在寄存器中的值是不确定的,需要从主存中读取,synchronized则是锁定当前变量,只有当前线程可以访问该变量,其他线程被阻塞住.volatile仅能使用在变量级别,synchronized则可以使用在变量,方法.volatile仅能实现变量的修改可见性,但不具备原子特性,而synchronized则可以保证变量的修改可见性和原子性.volatile不会造成线程的阻塞,而synchronized可能会造成线程的阻塞.volatile标记的变量不会被编译器优化,而synchronized标记的变量可以被编译器优化. 18.对于构造方法，下列叙述正确的是（ ）。A.构造方法的优先级一般比代码块低。B.构造方法的返回类型只能是void型。C.构造方法的主要作用是完成对类的对象的初始化工作。D.一般在创建新对象时，系统会自动调用构造方法。 答案：A C D 解析：A：静态成员变量或静态代码块&gt;main方法&gt;非静态成员变量或非静态代码块&gt;构造方法B：think in java中提到构造器本身并没有任何返回值。C: 构造方法的主要作用是完成对类的对象的初始化工作。D: 一般在创建(new)新对象时，系统会自动调用构造方法。 19.下列有关JAVA异常处理的叙述中正确的是（）A.finally是为确保一段代码不管是否捕获异常都会被执行的一段代码B.throws是用来声明一个成员方法可能抛出的各种非运行异常情况C.final用于可以声明属性和方法，分别表示属性的不可变及方法的不可继承D.throw是用来明确地抛出一个异常情况 答案：A B D 解析：C根本就跟异常处理没有关系，所以不选。 20.character流和byte流的区别不包括（）A.每次读入的字节数不同B.前者带有缓冲，后者没有。C.前者是字符读入，后者是字节读入。D.二者没有区别，可以互换。 答案：A B D 解析：字符流和字节流每次读入的字节数是不确定的，可能相同也可能不相同例FileInputStream 的read() 方法每次读入一个字节，read(byte b[]) 每次读入b.length个字节FileReader 的read()方法每次读入一个字符，read(char cbuf[], int offset, int length)每次读入length个字符另外，字符流和字节流读入一个ASCII字符，字节数是相同的例UTF-8字符编码中一个汉字占三个字节，数字1占一个字节，用字符流读入的数字1长度为一个字节，用字节流读入的数字1长度也为一个字节 推荐Java笔试内容集合 持续更新中…. ProcessOn是一个在线作图工具的聚合平台~ 文末 欢迎关注个人微信公众号：Coder编程欢迎关注Coder编程公众号，主要分享数据结构与算法、Java相关知识体系、框架知识及原理、Spring全家桶、微服务项目实战、DevOps实践之路、每日一篇互联网大厂面试或笔试题以及PMP项目管理知识等。更多精彩内容正在路上~新建了一个qq群：315211365，欢迎大家进群交流一起学习。谢谢了！也可以介绍给身边有需要的朋友。 文章收录至Github: https://github.com/CoderMerlin/coder-programmingGitee: https://gitee.com/573059382/coder-programming欢迎关注并star~","categories":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/categories/Java/"},{"name":"笔试","slug":"笔试","permalink":"http://yoursite.com/categories/%E7%AC%94%E8%AF%95/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/tags/Java/"},{"name":"笔试","slug":"笔试","permalink":"http://yoursite.com/tags/%E7%AC%94%E8%AF%95/"}]},{"title":"Java基础笔试练习（十）","slug":"interview/java/B-bishi10","date":"2019-09-25T12:06:00.000Z","updated":"2019-09-25T12:06:00.000Z","comments":true,"path":"2019/09/25/interview/java/B-bishi10/","link":"","permalink":"http://yoursite.com/2019/09/25/interview/java/B-bishi10/","excerpt":"","text":"每天进步一点，不做curd工程师与Api调用工程师欢迎访问个人网站：https://www.coder-programming.cn/ 1.Java中所有类的父类是（ ）?A.FatherB.DangC.ExceptionD.Object 答案：D 解析：D，java中Object是所有类的父亲,所有类的对象都是Class的实例。 2.在 main() 方法中给出数组buffer和下标i，如果将此下标中的元素显示到控制台上，需要使用（ ）。A.System.out.print (buffer[i]);B.FileOutputStream fout = new FileOutputStream(this.filename);C.FileInputStream fin = new FileInputStream(this.filename);D.System.in.read(buffer)。 答案：A 解析：在main中已经给出字节数组，直接System.out.print();输出即可。BC都是文件输出输入流，D是标准输入流，所以不符合题意。 3. “先进先出”的容器是：( )A.堆栈(Stack)B.队列（Queue）C.字符串(String)D.迭代器(Iterator) 答案：B 解析：堆栈(Stack) ： 如子弹入弹夹一样 先进后出队列（Queue）：如排队过隧道 先进先出 4.下面关于静态方法说明正确的是？A.在静态方法中可用this来调用本类的类方法B.在静态方法中调用本类的静态方法时可直接调用C.在静态方法中只能调用本类中的静态方法D.在静态方法中绝对不能调用实例方法 答案：B 解析：解释一下D.可以通过在静态方法中创建对象，通过对象.调用非静态方法 5.以下定义一维数组的语句中，正确的是：（）？A.int a [10]B.int a []=new [10]C.int a[] int a []=new int [10]D.int a []={1,2,3,4,5} 答案：D 解析：1.int a[10]是错误的,声明的时候不能初始化容量,只有new的时候才可以2.正确的是int a[]=new int[10];3.不能两个声明连在一起4.是正确的 6.有如下代码：请写出程序的输出结果。123456789101112131415161718public class Test&#123; public static void main(String[] args) &#123; int x &#x3D; 0; int y &#x3D; 0; int k &#x3D; 0; for (int z &#x3D; 0; z &lt; 5; z++) &#123; if ((++x &gt; 2) &amp;&amp; (++y &gt; 2) &amp;&amp; (k++ &gt; 2)) &#123; x++; ++y; k++; &#125; &#125; System.out.println(x + ”” +y + ”” +k); &#125;&#125; A.432B.531C.421D.523 答案：B 解析：每次循环z,x,y,k对应数值为：0,1,0,01,2,0,02,3,1,03,4,2,04,5,3,1执行完这次以后，z++为5，不再进入for循环。 7.BufferedReader的父类是以下哪个？A.FilterReaderB.InputStreamReaderC.PipedReaderD.Reader 答案：D 解析： 8.以下代码在编译和运行过程中会出现什么情况 ?12345678910public class TestDemo&#123; private int count; public static void main(String[] args) &#123; TestDemo test&#x3D;new TestDemo(88); System.out.println(test.count); &#125; TestDemo(int a) &#123; count&#x3D;a; &#125;&#125; A.编译运行通过，输出结果是88B.编译时错误，count变量定义的是私有变量C.编译时错误，System.out.println方法被调用时test没有被初始化D.编译和执行时没有输出结果 答案：A 解析：private是私有变量，只能用于当前类中，题目中的main方法也位于当前类，所以可以正确输出 9.类方法中可以直接调用对象变量。（ ）A.正确B.错误 答案：B 解析：静态方法中不能调用对象的变量，因为静态方法在类加载时就初始化，对象变量需要在新建对象后才能使用 10.内部类（也叫成员内部类）可以有4种访问权限。（ ）？A.正确B.错误 答案：A 解析：把内部类理解成类的成员，成员有4种访问权限吧，内部类也是！分别为private、protected、public以及默认的访问权限 11.关于以下application,说法正确是什么？123456789public class Test &#123; static int x&#x3D;10; static &#123;x+&#x3D;5;&#125; public static void main(String[] args) &#x2F;&#x2F;4 &#123; System.out.println(&quot;x&#x3D;&quot;+x); &#125; static&#123;x&#x2F;&#x3D;3;&#125;;&#125;&#x2F;&#x2F;9 A.4行与9行不能通过编译，因为缺少方法名和返回类型B.编译通过，执行结果是：x=5C.编译通过，执行结果是：x=3D.9行不能通过编译，因为只能有一个静态初始化器 答案：B 解析：父类静态代码块–&gt;子类静态代码块–&gt;父类普通代码块–&gt;父类构造方法–&gt;子类代码块–&gt;子类构造方法； 12.java程序内存泄露的最直接表现是（ ）A.频繁FullGcB.jvm崩溃C.程序抛内存控制的ExceptionD.java进程异常消失 答案：C 解析：首先理解一下内存泄漏的概念，内存泄漏就是对象引用消失了，对象内存却没有被回收。A答案：FullGC 是老年代内存空间不足的时候，才会触发的，老年代一般是生命周期较长的对象或者大对象，频繁的 FullGC 不会可能会影响程序性能（因为内存回收需要消耗CPU等资源），但是并不会直接导致内存泄漏。B 答案：JVM奔溃的可能是内存溢出引起的，也可能是其他导致 JVM崩溃的操作，例如设置了错误的JVM参数等。C 答案：内存异常，最常见的 就是 StackOverFlow 了把，内存溢出，其实内存泄漏的最终结果就是内存溢出。所以，基本上C是对的答案。D 答案：Java 进程异常消失，这个明显不对的。 13.以下程序运行后的输出结果是（）?123456789int main()&#123;int a&#x3D;1,b&#x3D;2,m&#x3D;0,n&#x3D;0,k; k&#x3D;(n&#x3D;b&lt;a)&amp;&amp;(m&#x3D;a) ;printf(&quot;%d,%d\\n&quot;,k,m); return 0;&#125; A.0,0B.0,1C.1,0D.1,1 答案：A 解析： 14.下面这条语句一共创建了多少个对象：String s=”welcome”+”to”+360;A.1B.2C.3D.4 答案：A 解析：略，可以参考我的其他文字关于对String的介绍. 15.下面这段程序的输出结果是（）123456789101112public class Main &#123; public static void main(String[] args) &#123; split(12); &#125; public static int split(int number) &#123; if (number &gt; 1) &#123; if (number % 2 !&#x3D; 0) System.out.print(split((number + 1) &#x2F; 2)); System.out.print(split(number &#x2F; 2)); &#125; return number; &#125;&#125; A.12136B.63121C.61213D.11236 答案：A 解析：考察方法进栈与出栈的顺序。先进后出 16.关于Java以下描述正确的有( )？A.Class类是Object类的超类B.Object类是一个final类C.String类是一个final类D.Class类可以装载其它类 答案：C D 解析：A.class类是Object的派生类B.每个类都使用Object类作为超类，而final修饰的类不能被继承 17.以下哪几种是java的基本数据类型。A.StringB.intC.booleanD.Double 答案：BC 解析：Double在java.lang包，是double的一个包装类，不是基本数据类型 18. Java程序的种类有（ ）A.类（Class）B.AppletC.ApplicationD.Servlet 答案：BCD 解析：Java程序的种类有：（a）内嵌于Web文件中，由浏览器来观看的_Applet（b）可独立运行的 Application（c）服务器端的 Servlets 19.关于java中的数组，下面的一些描述，哪些描述是准确的：（）?A.数组是一个对象，不同类型的数组具有不同的类B.数组长度是可以动态调整的C.数组是一个连续的存储结构D.一个固定长度的数组可类似这样定义：int array[100]E.两个数组用equals方法比较时，会逐个便利其中的元素，对每个元素进行比较F.可以二维数组，且可以有多维数组，都是在java中合法的。 答案：A C F 解析：1.数组其实也是一个对象2.定义一个一维数组的方式是：type[] arrayname或者type arrayname[];3.一维数组的初始化：（1）静态初始化 1）int[] arr = new int[]{1, 2, 3} 2）int[] arr = {1, 2, 3}（2）动态初始化 int[] arr = new int[3];4.可以定义多维数组 20.假如某个JAVA进程的JVM参数配置如下：-Xms1G -Xmx2G -Xmn500M -XX:MaxPermSize=64M -XX:+UseConcMarkSweepGC -XX:SurvivorRatio=3,请问eden区最终分配的大小是多少？ A.64MB.500MC.300MD.100M 答案：C 解析：java -Xmx2G -Xms1G -Xmn500M -Xss128k-Xmx2G：设置JVM最大可用内存为2G。-Xms1G：设置JVM初始内存为1G。此值可以设置与-Xmx相同，以避免每次垃圾回收完成后JVM重新分配内存。-Xmn500M：设置年轻代大小为2G。整个JVM内存大小=年轻代大小 + 年老代大小 + 持久代大小。-XX:SurvivorRatio=3:新生代中又会划分为 Eden 区，from Survivor、to Survivor 区。其中 Eden 和 Survivor 区的比例默认是 8:1:1，当然也支持参数调整 -XX:SurvivorRatio=3的话就是3:1:1。故该题为500*（3/5）=300M. 推荐笔试内容集合 持续更新中…. ProcessOn是一个在线作图工具的聚合平台 文末 欢迎关注个人微信公众号：Coder编程欢迎关注Coder编程公众号，主要分享数据结构与算法、Java相关知识体系、框架知识及原理、Spring全家桶、微服务项目实战、DevOps实践之路、每日一篇互联网大厂面试或笔试题以及PMP项目管理知识等。更多精彩内容正在路上~新建了一个qq群：315211365，欢迎大家进群交流一起学习。谢谢了！也可以介绍给身边有需要的朋友。 文章收录至Github: https://github.com/CoderMerlin/coder-programmingGitee: https://gitee.com/573059382/coder-programming欢迎关注并star~","categories":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/categories/Java/"},{"name":"笔试","slug":"笔试","permalink":"http://yoursite.com/categories/%E7%AC%94%E8%AF%95/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/tags/Java/"},{"name":"笔试","slug":"笔试","permalink":"http://yoursite.com/tags/%E7%AC%94%E8%AF%95/"}]},{"title":"Java基础笔试练习（九）","slug":"interview/java/B-bishi09","date":"2019-09-23T12:06:00.000Z","updated":"2019-09-23T12:06:00.000Z","comments":true,"path":"2019/09/23/interview/java/B-bishi09/","link":"","permalink":"http://yoursite.com/2019/09/23/interview/java/B-bishi09/","excerpt":"","text":"每天进步一点，不做curd工程师与Api调用工程师欢迎访问个人网站：https://www.coder-programming.cn/ 1.下面所示的java代码，运行时，会产生（）类型的异常 ？12int Arry_a[] &#x3D; new int[10];System.out.println(Arry_a[10]); A.ArithmeticExceptionB.NullPointExceptionC.IOExceptionD.ArrayIndexOutOfBoundsException 答案：D 解析：定义的数组长度为10，角标即为0-9,访问数组角标10会出现数组角标越界异常 2.下面关于继承的描述正确的是?A.在Java中只允许单一继承B.在Java中一个类只能实现一个接口C.在Java中一个类不能同时继承一个类和实现一个接口D.Java的单一继承使代码不可靠 答案：A 解析：略 3. Java 源程序文件的扩展名为（）A..javaB..classC..exeD..jar 答案：A 解析：略 4.Java 语言用以下哪个类来把基本类型数据封装为对象（）A.包装类B.ClassC.MathD.Object 答案：A 解析：略 5. 下列代码的执行结果是（）12345678910 public class Test &#123; public static int a &#x3D; 1; public static void main(String[] args) &#123; int a &#x3D; 10; a++; Test.a++; Test t&#x3D;new Test(); System.out.println(&quot;a&#x3D;&quot; + a + &quot; t.a&#x3D;&quot; + t.a); &#125;&#125; A.a=10 t.a=3B.a=11 t.a=2C.a=12 t.a=1D.a=11 t.a=1 答案：B 解析：值为1的a属于类变量也叫作成员变量，值为10的a是局部变量 首先a＋＋时就近原则，用局部变量10来加，Text.a直接用类名调用成员变量的情况，只能是static 修饰的成员变量1来加，然后又实例化了对象，在输出中第一个a＝ 用就近原则输出11，第二个t.a 对象只能调用类变量输出2 6.下面有关java classloader说法错误的是?A.Java默认提供的三个ClassLoader是BootStrap ClassLoader，Extension ClassLoader，App ClassLoaderB.ClassLoader使用的是双亲委托模型来搜索类的C.JVM在判定两个class是否相同时，只用判断类名相同即可，和类加载器无关D.ClassLoader就是用来动态加载class文件到内存当中用的 答案：C 解析：JVM在判定两个class是否相同时，不仅要判断两个类名是否相同，而且要判断是否由同一个类加载器实例加载的。 7.以下那个数据结构是适用于”数据必须以相反的顺序存储然后检索” ? （）A.StackB.QueueC.ListD.Link List 答案： A 解析：栈-先进后出(比喻:坐电梯) 队列-先进先出(水管) list-链表(怎么存就怎么取) 8. 在 main() 方法中给出的整型数组，如果将其写到一个文件中，需要（ ）。A.System.out.print (buffer[i]);B.DataOutputStream dout = new DataOutputStream(new FileOutputStream(this.filename));C.DataInputStream din = new DataInputStream(new FileInputStream(this.filename));。D.System.in.read(buffer)。 答案：B 解析：input和output指的是对于程序而言。input是从文件读取进来，output是输出到文件。 9.Please write the output result 。12345678910111213public class Test&#123; public static void changeStr(String str) &#123; str &#x3D; &quot;welcome&quot;; &#125; public static void main(String[] args) &#123; String str &#x3D; &quot;1234&quot;; changeStr(str); System.out.println(str); &#125;&#125; A.1234B.welcomeC.空D.不确定 答案：A 解析：string的值是不可改变的，所有试图更改String的行为都会创建一个新的String. 10.关于String，StringBuilder以及StringBuffer，描述错误的是（）A.对String对象的任何改变都不影响到原对象，相关的任何change操作都会生成新的对象B.StringBuffer是线程安全C.StringBuilder是线程安全D.可以修改StringBuilder和StringBuffer的内容 答案：C 解析：A，java中的字符串存储在字符串常量区，不会改变，发生改变是会新创建一个对象B，StringBuffer是线程安全的StringBuilderC，StringBuilder跟StringBuffer功能相同，区别是StringBuilder不是线程安全的D，StringBuilder和StringBuffer底层都是以字符数组存放的，可以修改内容 11.以下哪个不属于JVM堆内存中的区域（）？A.survivor区B.常量池C.eden区D.old区 答案：B 解析：jvm堆分为：新生代（一般是一个Eden区，两个Survivor区），老年代（old区）。常量池属于 PermGen（方法区） 12.运行下面代码，输出的结果是123456789101112131415161718192021222324class A &#123; public A() &#123; System.out.println(&quot;class A&quot;); &#125; &#123;System.out.println(&quot;I&#39;m A class&quot;); &#125; static &#123;System.out.println(&quot;class A static&quot;); &#125;&#125;public class B extends A &#123; public B() &#123; System.out.println(&quot;class B&quot;); &#125; &#123;System.out.println(&quot;I&#39;m B class&quot;); &#125; static &#123;System.out.println(&quot;class B static&quot;); &#125; public staticvoid main(String[] args) &#123;new B();&#125; A. 1234class A static class B static I&#39;m A class class A I&#39;m B class class B B. 123class A static I&#39;m A class class A class B static I&#39;m B class class B C. 123class A static class B static class A I&#39;m A class class B I&#39;m B class D. 123class A static class A I&#39;m Aclass class B static class B I&#39;m B class 答案：A 解析：①父类静态变量和静态代码块(按照声明顺序)；②子类静态变量和静态代码块(按照声明顺序)；③父类成员变量和代码块(按照声明顺序)；④父类构造器；⑤子类成员变量和代码块(按照声明顺序)；⑥子类构造器。 13.下列语句正确的是：？A.形式参数可被字段修饰符修饰B.形式参数不可以是对象C.形式参数为方法被调用时真正被传递的参数D.形式参数可被视为local variable 答案：D 解析： 14.以下程序输出结果是？123String str &#x3D;&quot;&quot;;System.out.print(str.split(&quot;,&quot;).length); A.0B.1C.出现异常 答案：B 解析：略 15.public class contained in a Java program file must have the same name as the file, except for the extension “.java”.A.FALSEB.TRUE 答案：A 解析：题目的意思是：除去扩展名.java的部分，包含在java文件里的Java里的公共类必须与文件的名字相同。但是公共的内部类是不需要和文件的名字相同的。 16.其中”c.getDeclaredMethods”的作用是:1234567891011121314import java.lang.reflect.Method;public class DumpMethods&#123; public static void main(String[] args) &#123; try &#123; Class c&#x3D;Class.forName(args[0]); Method m[]&#x3D;c.getDeclaredMethods(); for (int i &#x3D; 0; i &lt; m.length; i++) &#123; System.out.println(m[i].toString()); &#125; &#125; catch (Throwable e) &#123; System.err.println(e); &#125; &#125;&#125; A.取得类的公有方法对象B.取得类的所有公有方法名称C.取得类的所有方法对象D.选项都不正确 答案：D 解析：public Method[] getMethods()返回某个类的所有公用（public）方法包括其继承类的公用方法，包括它所实现接口的方法。public Method[] getDeclaredMethods()对象表示的类或接口声明的所有方法，包括公共、保护、默认（包）访问和私有方法，但不包括继承的方法。包括它所实现接口的方法。 17.运行代码，输出的结果是（）12345678910111213141516public class P &#123;public static int abc &#x3D; 123;static&#123;System.out.println(&quot;P is init&quot;);&#125;&#125;public class S extends P &#123;static&#123;System.out.println(&quot;S is init&quot;);&#125;&#125;public class Test &#123;public static void main(String[] args) &#123;System.out.println(S.abc);&#125;&#125; A.P is init 123B.S is init P is init 123C.P is init S is init 123D.S is init 123 答案：A 解析：属于被动引用不会出发子类初始化1.子类引用父类的静态字段，只会触发子类的加载、父类的初始化，不会导致子类初始化2.通过数组定义来引用类，不会触发此类的初始化3.常量在编译阶段会进行常量优化，将常量存入调用类的常量池中， 本质上并没有直接引用到定义常量的类，因此不会触发定义常量的类的初始化。 18.java中Hashtable, Vector, TreeSet, LinkedList哪些线程是安全的？A.HashtableB.VectorC.TreeSetD.LinkedList 答案：AB 解析：HashMap是线程安全的HashMapVector是线程安全的ArrayListTreeSet和LinkedList都不是线程安全的 19.下面哪些赋值语句是正确的（）A.long test=012B.float f=-412C.int other =(int)trueD.double d=0x12345678E.byte b=128 答案：A B D 解析：A和B中long和float，正常定义需要加l和f，但是long和float属于基本类型，会进行转化，所以不会报出异常。AB正确boolean类型不能和任何类型进行转换，会报出类型异常错误。所以C错。D选项可以这样定义，D正确。E选项中，byte的取值范围是-128—127。报出异常： cannot convert from int to byte.所以E选项错误。 20.Thread. sleep()是否会抛出checked exception?A.会B.不会 答案：A 解析：Thread.sleep() 和 Object.wait(),都可以抛出 InterruptedException。这个异常是不能忽略的,因为它是一个检查异常(checked exception) 推荐Java笔试内容集合 持续更新中…. 文末 欢迎关注个人微信公众号：Coder编程获取最新原创技术文章和免费学习资料，更有大量精品思维导图、面试资料、PMP备考资料等你来领，方便你随时随地学习技术知识！ 文章收录至Github: https://github.com/CoderMerlin/coder-programmingGitee: https://gitee.com/573059382/coder-programming欢迎关注并star~","categories":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/categories/Java/"},{"name":"笔试","slug":"笔试","permalink":"http://yoursite.com/categories/%E7%AC%94%E8%AF%95/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/tags/Java/"},{"name":"笔试","slug":"笔试","permalink":"http://yoursite.com/tags/%E7%AC%94%E8%AF%95/"}]},{"title":"Java基础笔试练习（八）","slug":"interview/java/B-bishi08","date":"2019-09-22T12:06:00.000Z","updated":"2019-09-22T12:06:00.000Z","comments":true,"path":"2019/09/22/interview/java/B-bishi08/","link":"","permalink":"http://yoursite.com/2019/09/22/interview/java/B-bishi08/","excerpt":"","text":"每天进步一点，不做curd工程师与Api调用工程师欢迎访问个人网站：https://www.coder-programming.cn/ 1. 以下关于构造函数的描述错误的是 （ ）A.每个类有且只能有一个构造函数。B.构造函数是类的一种特殊函数，它的方法名必须与类名相同C.构造函数的主要作用是完成对类的对象的初始化工作D.一般在创建新对象时，系统会自动调用构造函数 答案： A 解析：类除了无参构造方法，还有有参构造方法，有参构造方法还可以通过重载写出多参的构造方法（2参，3参，4参）方法重载：同一个类中方法名称相同，而参数的类型或个数不同 2.在面向对象编程里，经常使用is-a来说明对象之间的继承关系，下列对象中不具备继承关系的是？A.手机与小米手机B.企业家与雷军C.编程语言与JavaD.中国与北京 答案： D解析：小米手机是一个手机/雷军是一个企业家/java是一个编程语言/北京是一个中国吗？ 3.以下程序运行后的输出结果是（）?12345678main()&#123; int m&#x3D;12,n&#x3D;34; printf(&quot;%d%d&quot;,m++,++n); printf(&quot;%d%d\\n&quot;,n++,++m);&#125; A.12353514B.12353513C.12343514D.12343513 答案： A解析： &gt;m++ 先输出在自加，++m 先自加在输出 4.下列关于功能性注释不正确的说法是()?A.功能性注释嵌在源程序中，用于说明程序段或语句的功能以及数据的状态B.注释用来说明程序段，需要在每一行都要加注释C.可使用空行或缩进，以便很容易区分注释和程序D.修改程序也应修改注释 答案： B解析： 略 5.下面有关java和c++的描述，错误的是？A.java是一次编写多处运行，c++是一次编写多处编译B.c++和java支持多继承C.Java不支持操作符重载，操作符重载被认为是c++的突出特征D.java没有函数指针机制，c++支持函数指针 答案： B解析：JAVA没有指针的概念，被封装起来了，而C++有;JAVA不支持类的多继承，但支持接口多继承，C++支持类的多继承;C++支持操作符重载，JAVA不支持;JAVA的内存管理比C++方便，而且错误处理也比较好;C++的速度比JAVA快。C++更适用于有运行效率要求的情况，JAVA适用于效率要求不高，但维护性要好的情况。 6.应用程序的main方法中有以下语句，则输出的结果( )12345String s1&#x3D;new String（ ” xyz ” ）;String s2&#x3D;new String（ ” xyz ” ）;Boolean b1&#x3D;s1.equals(s2);Boolean b2&#x3D;(s1&#x3D;&#x3D;s2);System .out.print(b1+ ” ” +b2); A.true falseB.false trueC.true trueD.false false 答案： A解析： &gt;String s1=new String（ ” xyz ” ）; //创建了String类型的内容为xyz的s1对象String s2=new String（ ” xyz ” ）; //创建了String类型的内容为xyz的s2对象Boolean b1=s1.equals(s2); //比较s1对象和s2对象的内容相等，返回true。Boolean b2=(s1==s2); //比较s1和s2两个对象的存储地址是否相等，明显两者分别存储在不同的地址，所以返回：false。故答案为：true false 7.执行如下程序，输出结果是（ ）?123456789101112131415161718192021222324252627282930313233343536373839class Test&#123; private int data; int result &#x3D; 0; public void m() &#123; result +&#x3D; 2; data +&#x3D; 2; System.out.print(result + &quot; &quot; + data); &#125; &#125; class ThreadExample extends Thread &#123; private Test mv; public ThreadExample(Test mv) &#123; this.mv &#x3D; mv; &#125; public void run() &#123; synchronized(mv) &#123; mv.m(); &#125; &#125; &#125; class ThreadTest &#123; public static void main(String args[]) &#123; Test mv &#x3D; new Test(); Thread t1 &#x3D; new ThreadExample(mv); Thread t2 &#x3D; new ThreadExample(mv); Thread t3 &#x3D; new ThreadExample(mv); t1.start(); t2.start(); t3.start(); &#125; &#125; A.0 22 44 6B.2 42 42 4C.2 24 46 6D.4 44 46 6 答案： C解析： Test mv =newTest()声明并初始化对data赋默认值使用synchronized关键字加同步锁线程依次操作m()t1.start();使得result=2,data=2,输出即为2 2t2.start();使得result=4,data=4,输出即为4 4t3.start();使得result=6,data=6,输出即为6 6System.out.print(result +” “+ data);是print()方法不会换行,输出结果为2 24 46 6 8. 在 main() 方法中给出的字节数组，如果将其显示到控制台上，需要（ ）。A.标准输出流System.out.println()。B.建立字节输出流。C.建立字节输入流。D.标准输入流System.in.read()。 答案： A解析： 略 9.假设num已经被创建为一个ArrayList对象，并且最初包含以下整数值：[0，0，4，2，5，0，3，0]。 执行下面的方法numQuest(),最终的输出结果是什么？12345678910111213private List&lt;Integer&gt; nums;&#x2F;&#x2F;precondition: nums.size() &gt; 0&#x2F;&#x2F;nums contains Integer objectspublic void numQuest() &#123;int k &#x3D; 0;Integer zero &#x3D; new Integer(0);while (k &lt; nums.size()) &#123;if (nums.get(k).equals(zero))nums.remove(k);k++;&#125;&#125; A.[3, 5, 2, 4, 0, 0, 0, 0]B.[0, 0, 0, 0, 4, 2, 5, 3]C.[0, 0, 4, 2, 5, 0, 3, 0]D.[0, 4, 2, 5, 3] 答案： D解析： 略，一步一步来就能算出 10.以下哪一个正则表达式不能与字符串“https://www.tensorflow.org/”（不含引号）匹配？（）A.[a-z]+://[a-z.]+/B.https[://]www[.]tensorflow[.]org[/]C.[htps]+://www.tensorflow.org/D.[a-zA-Z.:/]+ 答案： B解析： &gt;[://],这是个很明显的陷阱。[ ] 里面是不重复的，所以等价于[:/]如果[ ]后面没有带+号的话，是不会贪婪匹配的，就只能匹配到://中的其中一个 11.关于sleep和wait,以下描述错误的是？A.sleep是线程类的方法，wait是object的方法B.sleep不释放对象锁，wait放弃对象锁C.sleep暂停线程，但监控状态依然保持，结束后会自动恢复D.wait进入等待锁定池，只有针对此对象发出notify方法获得对象锁进入运行状态 答案： D解析：D选项最终是进入就绪状态，而不是运行状态。 12.以下描述正确的是A.CallableStatement是PreparedStatement的父接口B.PreparedStatement是CallableStatement的父接口C.CallableStatement是Statement的父接口D.PreparedStatement是Statement的父接口 答案： B解析：CallableStatement继承自PreparedSatement，PreparedStatement继承自Statement 13.volatile关键字的说法错误的是A.能保证线程安全B.volatile关键字用在多线程同步中，可保证读取的可见性C.JVM保证从主内存加载到线程工作内存的值是最新的D.volatile能禁止进行指令重排序 答案： A解析：出于运行速率的考虑，java编译器会把经常经常访问的变量放到缓存（严格讲应该是工作内存）中，读取变量则从缓存中读。但是在多线程编程中,内存中的值和缓存中的值可能会出现不一致。volatile用于限定变量只能从内存中读取，保证对所有线程而言，值都是一致的。但是volatile不能保证原子性，也就不能保证线程安全。 14.以下表达式中，正确的是（）A.byte i=128B.boolean i=nullC.long i=0xfffLD.double i=0.9239d 答案： C D解析： null表示没有地址；null可以赋值给引用变量，不能将null赋给基本类型变量，例如int、double、float、boolean 15.常用的servlet包的名称是？A.java.servletB.javax.servletC.servlet.httpD.javax.servlet.http 答案： B D解析：JEE5.0中的Servlet相关的就下面这几个包:javax.servletjavax.servlet.jspjava.servlet.jsp.eljava.servlet.jsp.tagext而最用得多的就是javax.servletjavax.servlet.http这两个包了. 16.Java的体系结构包含（ ）。A.Java编程语言B.Java类文件格式C.Java APID.JVM 答案： A B C D解析： 略 17.对于代码 var a = 10.42; 取出 a 的整数部分，以下代码哪些是正确的？A.parseInt(a);B.Math.floor(a);C.Math.ceil(a);D.a.split(‘.’)[0]; 答案： A B解析： &gt;Math.ceil(); ceiling（天花板） 所以向上取整Math.floor();floor（地板）所以向下取整split是对字符串的分割，而10.42编译器自动类型推断中应该是double类型的，所以d错误 18.判断一块内存空间是否符合垃圾收集器收集的标准有哪些？A.给对象赋予了空值null,以下再没有调用过B.对象重新分配了内存空间C.给对象赋予了空值nullD.给对象赋予了新值 答案： A B D解析： 在java语言中，判断一块内存空间是否符合垃圾收集器收集标准的标准只有两个：1.给对象赋值为null，以下没有调用过。2.给对象赋了新的值，重新分配了内存空间。 19.局部内部类可以用哪些修饰符修饰？A.publicB.privateC.abstractD.final 答案： C D解析：局部内部类是放在代码块或方法中的，不能有访问控制修饰符，且不能用static修饰 20.Java.Thread的方法resume()负责重新开始被以下哪个方法中断的线程的执行（）。A.stopB.sleepC.waitD.suspend 答案： D解析：suspend() 和 resume() 方法：两个方法配套使用，suspend()使得线程进入阻塞状态，并且不会自动恢复，必须其对应的 resume() 被调用，才能使得线程重新进入可执行状态 推荐Java笔试内容集合 持续更新中…. 文末 欢迎关注个人微信公众号：Coder编程获取最新原创技术文章和免费学习资料，更有大量精品思维导图、面试资料、PMP备考资料等你来领，方便你随时随地学习技术知识！ 文章收录至Github: https://github.com/CoderMerlin/coder-programmingGitee: https://gitee.com/573059382/coder-programming欢迎关注并star~","categories":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/categories/Java/"},{"name":"笔试","slug":"笔试","permalink":"http://yoursite.com/categories/%E7%AC%94%E8%AF%95/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/tags/Java/"},{"name":"笔试","slug":"笔试","permalink":"http://yoursite.com/tags/%E7%AC%94%E8%AF%95/"}]},{"title":"Java基础笔试练习（七）","slug":"interview/java/B-bishi07","date":"2019-09-21T12:06:00.000Z","updated":"2019-09-21T12:06:00.000Z","comments":true,"path":"2019/09/21/interview/java/B-bishi07/","link":"","permalink":"http://yoursite.com/2019/09/21/interview/java/B-bishi07/","excerpt":"","text":"每天进步一点，不做curd工程师与Api调用工程师欢迎访问个人网站：https://www.coder-programming.cn/ 1.下列程序执行后结果为( )?123456789101112131415161718class A &#123; public int func1(int a, int b) &#123; return a - b; &#125;&#125;class B extends A &#123; public int func1(int a, int b) &#123; return a + b; &#125;&#125;public class ChildClass &#123; public static void main(String[] args) &#123; A a &#x3D; new B(); B b &#x3D; new B(); System.out.println(&quot;Result&#x3D;&quot; + a.func1(100, 50)); System.out.println(&quot;Result&#x3D;&quot; + b.func1(100, 50)); &#125;&#125; A.Result=150Result=150B.Result=100Result=100C.Result=100Result=150D.Result=150Result=100 答案：A解析：其实很简单，涉及转型的题目，分为向上或者向下转型。关键的来了，不论向上或者向下转型，都是一句话，“编译看左边，运行看右边”。也就是编译时候，会看左边引用类型是否能正确编译通过，运行的时候是调用右边的对象的方法。就本题来说，编译时候会发现左边满足条件所以编译通过，运行时候又会调用右边也就是 class B 的方法，所以答案都是150。 2.下列哪个类的声明是正确的？A.protected private number;B.public abstract class Car{}C.abstract private move(){}D.abstract final class HI{} 答案：B 解析：抽象类的目的就是为了让子类实现他本身的方法final修饰的东西不能被更改或继承abstract存在的意义是为了让子类实现方法而存在，final的意义是不让子类进行修改。两者存在互斥关系 3.关于抽象类叙述正确的是？ ( )A.抽象类不能实现接口B.抽象类必须有“abstract class”修饰C.抽象类必须包含抽象方法D.抽象类也有类的特性，可以被实例化 答案：B 解析：A.抽象类是可以实现接口的，而且抽象类也可以继承自抽象类B.对C.抽象类指有abstract修饰的class，其可以包含抽象方法，也可以不包含D.抽象类和接口都是不能被实例化的，只有具体的类才可以被实例化 4.若有定义语句： int a=10 ; double b=3.14 ; 则表达式 ‘A’+a+b 值的类型是（）A.charB.intC.doubleD.float 答案：C 解析：char &lt; short &lt; int &lt; float &lt; double 不同类型运算结果类型向右边靠齐。 5.When is the text “Hi there”displayed?1234567891011121314151617181920public class StaticTest&#123; static &#123; System.out.println(“Hi there”); &#125; public void print() &#123; System.out.println(“Hello”); &#125; public static void main(String args[]) &#123; StaticTest st1 &#x3D; new StaticTest(); st1.print(); StaticTest st2 &#x3D; new StaticTest(); st2.print(); &#125;&#125; A.Never.B.Each time a new object of type StaticTest is created.C.Once when the class is loaded into the Java virtual machine.D.Only when the main() method is executed. 答案：C 解析：类中静态语句块仅在类加载时被执行一次 6.在开发中使用泛型取代非泛型的数据类型（比如用ArrayList取代ArrayList），程序的运行时性能会变得更好。A.对B.错 答案：B 解析：泛型仅仅是java的一颗语法糖，它不会影响java虚拟机生成的汇编代码，在编译阶段，虚拟机就会把泛型的类型擦除，还原成没有泛型的代码，顶多编译速度稍微慢一些，执行速度是完全没有什么区别的。 7.以下说法中正确的有？A.StringBuilder是 线程不安全的B.Java类可以同时用 abstract和final声明C.HashMap中，使用 get(key)==null可以 判断这个Hasmap是否包含这个keyD.volatile关键字不保证对变量操作的原子性 答案：A D 解析：String最慢的原因：String为字符串常量，而StringBuilder和StringBuffer均为字符串变量，即String对象一旦创建之后该对象是不可更改的，但后两者的对象是变量，是可以更改的。String：适用于少量的字符串操作的情况StringBuilder：适用于单线程下在字符缓冲区进行大量操作的情况StringBuffer：适用多线程下在字符缓冲区进行大量操作的情况在线程安全上，StringBuilder是线程不安全的，而StringBuffer是线程安全的 8.下面关于Java package的描述，哪个是正确的:（）A.包不提供将所有类名分区为更易管理的块的机制.B.包提供可见性控制机制.C.包的一个重要属性是包内定义的所有类都可以通过该包外的代码访问D.声明为包的一部分的类的.class文件可以存储在多个目录中. 答案：B 解析： 包的作用:1、把功能相似或相关的类或接口组织在同一个包中，方便类的查找和使用。2、如同文件夹一样，包也采用了树形目录的存储方式。同一个包中的类名字是不同的，不同的包中的类的名字是可以相同的，当同时调用两个不同包中相同类名的类时，应该加上包名加以区别。因此，包可以避免名字冲突。3、包也限定了访问权限，拥有包访问权限的类才能访问某个包中的类。Java使用包（package）这种机制是为了防止命名冲突，访问控制，提供搜索和定位类（class）、接口、枚举（enumerations）和注释（annotation）等。 9.下面代码执行后的结果为（ ）？123456789101112nt main()&#123;int sum&#x3D;0;int i&#x3D;0,j&#x3D;0;for(j&#x3D;0;j&lt;6;j++)&#123;if(j%2)continue;sum++;&#125;printf(&quot;sum&#x3D;%d&quot;,sum);return 0;&#125; A.sum=1B.sum=2C.sum=3D.其他几项都不对 答案：C 解析：吐槽点：1.Java题出现C语言的题目。2.定义变量i 等等（既然出现在360大厂的笔试题中，那么我们抛开吐槽点，我们来看下这道题的考点。）考点：1.continue:continue语句的作用是跳过本次循环体中余下尚未执行的语句，立即进行下一次的循环条件判定，可以理解为仅结束本次循环。2.if(j%2)（包含：if以及取模运算）：也就是求j除以2的余数（取模），if(j%3)判断j对3取余以后是否为0，如果不是0，执行if下面的语句,如果是0，执行另外的语句(例如else下面的语句)做题：1.j=0,0%2=0 sum=12.j=1,1%2=1 sum=13.j=2,2%2=0 sum=24.j=3,3%2=1 sum=25.j=4,4%2=0 sum=36.j=5,5%2=1 sum=3 10. 关于static说法不正确的是（ ） ？A.可以直接用类名来访问类中静态方法(public权限)B.静态块仅在类加载时执行一次C.static方法中不能有用this调用的方法D.不可以用对象名来访问类中的静态方法(public权限) 答案：D 解析：this表示当前类的对象，由static修饰的方法是由类直接调用，不需要创建对象，所以在static里不能用this. 11.访问权限控制从最大权限到最小权限依次为：public、 包访问权限、protected和private （）？A.正确B.错误 答案：B 解析：应该是：public&gt;protected&gt;默认(包访问权限)&gt;private，因为protected除了可以被同一包访问，还可以被包外的子类所访问 12.函数（）把文件位置重定位到文件中的指定位置A.fseekB.freadC.fopenD.fgets 答案：C 解析：略 13.关于spring说法错误的是（）？A.spring是一个轻量级JAVA EE的框架集合B.spring是“依赖注入”模式的实现C.使用spring可以实现声明事务D.spring提供了AOP方式的日志系统 答案：D 解析：spring没有提供AOP方式的日志系统AOP为Aspect Oriented Programming的缩写，意为：面向切面编程，通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术。AOP是OOP的延续，是软件开发中的一个热点，也是Spring框架中的一个重要内容，是函数式编程的一种衍生范型。Spring通过对AOP的支持，借助log4j等Apache开源组件实现了日志系统。 14. 以下JAVA程序代码的输出是?123public static void main(String args[]) &#123;System.out.println(14^3);&#125; A.2744B.13C.17D.11 答案：B 解析：位运算中的异或运算，将14和3分别表示成二进制，即1110和0011做异或。得出结果为1101，转成十进制即为13 15.下列哪一项的实现不可以添加为 TextField 对象的监听器（）？A.MouseMotionListenerB.FocusListenerC.WindowsListenerD.ActionListener 答案：C 解析：SWinng的内容。在单行文本输入区(Textfield)构件上可能发生的事件包括FocusEvent焦点事件，所对应的事件监听器是FocusListener；ActionEvent动作事件，所对应的事件监听器是ActionListener；MouseEvent鼠标事件，所对应的事件监听器是MouseMotionListener； 16. jre 判断程序是否执行结束的标准是（） ？A.所有的前台线程执行完毕B.所有的后台线程执行完毕C.所有的线程执行完毕D.和以上都无关 答案：A 解析：后台线程：指为其他线程提供服务的线程，也称为守护线程。JVM的垃圾回收线程就是一个后台线程。前台线程：是指接受后台线程服务的线程，其实前台后台线程是联系在一起，就像傀儡和幕后操纵者一样的关系。傀儡是前台线程、幕后操纵者是后台线程。由前台线程创建的线程默认也是前台线程。可以通过isDaemon()和setDaemon()方法来判断和设置一个线程是否为后台线程。 17.根据下面的代码，String s = null;会抛出NullPointerException异常的有（）。A.if( (s!=null) &amp; (s.length()&gt;0) )B.if( (s!=null) &amp;&amp; (s.length()&gt;0) )C.if( (s==null) | (s.length()==0) )D.if( (s==null) || (s.length()==0) ) 答案：A C 解析： 逻辑运算符：&amp;&amp;和|| 是按照“短路”方式求值的。如果第一个操作数已经能够确定表达式的值，第二个操作数就不必计算了位移运算符：&amp;和| 运算符应用于布尔值，得到的结果也是布尔值，不按“短路”方式计算。即在得到计算结果之前，一定要计算两个操作数的值。 18.A,B,C,D 中哪些是 setvar的重载？1234public class methodover&#123; public void setVar(int a, int b, float c) &#123;&#125;&#125; A.private void setVar(int a， float c， int b){}B.protected void setVar(int a， int b， float c){}C.public int setVar(int a， float c， int b){return a;}D.public int setVar(int a， float c){return a;} 答案：A C D 解析：重载是在同一个类中，有多个方法名相同，参数列表不同(参数个数不同，参数类型不同),与方法的返回值无关，与权限修饰符无关，B中的参数列表和题目的方法完全一样了。 19.下面有关java的引用类型，说法正确的有？A.对于一个对象来说，只要有强引用的存在，它就会一直存在于内存中B.如果一个对象仅持有虚引用，那么它就和没有任何引用一样，在任何时候都可能被垃圾回收器回收。C.如果一个对象只具有软引用，则内存空间足够，垃圾回收器就不会回收它；如果内存空间不足了，就会回收这些对象的内存D.一旦发现了只具有弱引用的对象，不管当前内存空间足够与否，都会回收它的空间 答案：A B C D 解析：1、强引用：一个对象赋给一个引用就是强引用，比如new一个对象，一个对象被赋值一个对象。2、软引用：用SoftReference类实现，一般不会轻易回收，只有内存不够才会回收。3、弱引用：用WeekReference类实现，一旦垃圾回收已启动，就会回收。4、虚引用：不能单独存在，必须和引用队列联合使用。主要作用是跟踪对象被回收的状态。 20.以下类型为Final类型的为（）？A.HashMapB.StringBufferC.StringD.Hashtable 答案：B F 解析：StringBuilder , StringBuffer ,String都是 final 推荐Java笔试内容集合 欢迎关注，持续更新中…. 文末 欢迎关注个人微信公众号：Coder编程获取最新原创技术文章和免费学习资料，更有大量精品思维导图、面试资料、PMP备考资料等你来领，方便你随时随地学习技术知识！ 文章收录至Github: https://github.com/CoderMerlin/coder-programmingGitee: https://gitee.com/573059382/coder-programming欢迎关注并star~","categories":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/categories/Java/"},{"name":"笔试","slug":"笔试","permalink":"http://yoursite.com/categories/%E7%AC%94%E8%AF%95/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/tags/Java/"},{"name":"笔试","slug":"笔试","permalink":"http://yoursite.com/tags/%E7%AC%94%E8%AF%95/"}]},{"title":"Java基础笔试练习（六）","slug":"interview/java/B-bishi06","date":"2019-09-20T12:06:00.000Z","updated":"2019-09-20T12:06:00.000Z","comments":true,"path":"2019/09/20/interview/java/B-bishi06/","link":"","permalink":"http://yoursite.com/2019/09/20/interview/java/B-bishi06/","excerpt":"","text":"每天进步一点，不做curd工程师与Api调用工程师欢迎访问个人网站：https://www.coder-programming.cn/ 1.在Java中，一个类可同时定义许多同名的方法，这些方法的形式参数个数、类型或顺序各不相同，传回的值也可以不相同。这种面向对象程序的特性称为?A.隐藏B.覆盖C.重载D.Java不支持此特性 答案：C 解析：略 2.编译 Java 源程序文件产生的字节码文件的扩展名为（）？A.javaB.classC.htmlD.exe 答案：B 解析：送分题 3.以下程序的运行结果是（） ？1234567891011public class Increment&#123; public static void main(String args[]) &#123; int a; a &#x3D; 6; System.out.print(a); System.out.print(a++); System.out.print(a); &#125;&#125; A.666B.667C.677D.676 答案：B 解析：a++很好记的，表示先用后+，而++a表示先+后用。看+在前在后，也决定第一步。 4.有以下程序片段且Interesting不是内部类，下列哪个选项不能插入到行1。（ ）12341.2.public class Interesting&#123;3. &#x2F;&#x2F; 省略代码4.&#125; A.import java.awt.*;B.package mypackage;C.class OtherClass{ }D.public class MyClass{ } 答案：D 解析：在同一个java原文件中，可以有多个class类，但是只有有一个公共的 public class 5.Math.round(11.5) 等于多少 (). Math.round(-11.5) 等于多少 ( )?A.11 ,-11B.11 ,-12C.12 ,-11D.12 ,-12 答案：C 解析： floor:意为地板，指向下取整，返回不大于它的最大整数 ceil:意为天花板，指向上取整，返回不小于它的最小整数 round:意为大约，表示“四舍五入”，而四舍五入是往大数方向入。 Math.round(11.5)的结果为12，Math.round(-11.5)的结果为-11而不是-12。 6.一个以“.java”为后缀的源文件A.只能包含一个public类，类名必须与文件名相同B.只能包含与文件名相同的public类以及其中的内部类C.只能有一个与文件名相同的public类，可以包含其他非public类（不考虑内部类）D.可以包含任意public类 答案：C 解析：.java文件可以包含多个类，唯一的限制就是：一个文件中只能有一个public类，并且此public类必须与文件名相同。而且这些类和写在多个文件中没有区别。 7.关于Float，下列说法错误的是() ？A.Float是一个类B.Float在java.lang包中C.Float a=1.0是正确的赋值方法D.Float a= new Float(1.0)是正确的赋值方法 答案：C 解析：1.Float是类，float不是类.2.查看JDK源码就可以发现Byte，Character，Short，Integer，Long，Float，Double，Boolean都在java.lang包中.3.Float正确复制方式是Float f=1.0f,若不加f会被识别成double型,double无法向float隐式转换.4.Float a= new Float(1.0)是正确的赋值方法，但是在1.5及以上版本引入自动装箱拆箱后，会提示这是不必要的装箱的警告，通常直接使用Float f=1.0f. 8.子类要调用继承自父类的方法，必须使用super关键字。A.正确B.错误 答案：B 解析：1、子类构造函数调用父类构造函数用super2、子类重写父类方法后，若想调用父类中被重写的方法，用super3、未被重写的方法可以直接调用。 9.下列属于容器的组件有（）？A.JButtonB.JPanelC.ThreadD.JTextArea 答案：B 解析：JPanel是Java图形用户界面（GUI）工具包中的面板容器类，包含在javax.swing包中，是一种轻量级容器，可以加入到JFrame窗体中。JPanel默认的布局管理器是FlowLayout，其自身可以嵌套组合，在不同子容器中可包含其他组件(component),如JButton、JTextArea、JTextField等，功能是对对窗体上的这些控件进行组合，相当于C++和C#中的Panel类。 10.我们在程序中经常使用“System.out.println()”来输出信息，语句中的System是包名，out是类名，println是方法名。A.对B.错 答案：B 解析：system是java.lang中的一个类，out是System内的一个成员变量，这个变量是一个java.io.PrintStream类的对象，println就是一个方法了。 11.正则表达式中，表示匹配非数字字符的字符是（）？A.\\bB.\\dC.\\BD.\\D 答案：D 解析：大写表示“非”，d表示digit数字。非数字就是\\D, w表示word，非单词就是\\W 12.对于以下代码段，4个输出语句中输出true的个数是( )。123456789class A&#123;&#125;class B extends A&#123;&#125;class C extends A&#123;&#125;class D extends B&#123;&#125;A obj &#x3D; new D();System.out.println(obj instanceof B);System.out.println(obj instanceof C);System.out.println(obj instanceof D);System.out.println(obj instanceof A); A.1B.2C.3D.4 答案：C 解析：D属于B,D属于A,D属于D,D不属于C.所以选C 13.在Java中，HashMap中是用哪些方法来解决哈希冲突的？A.开放地址法B.二次哈希法C.链地址法D.建立一个公共溢出区 答案：C 解析：以上方法都是解决哈希填冲突的策略，但是在java.util.HashMap中，总体来说是使用的链地址法来解决冲突的。当然了，使用链地址法会导致get的效率从o（1）降至o（n），所以在Java8中，使用的是平衡树来解决提高效率的。 14. 关于匿名内部类叙述正确的是？ ( )A.匿名内部类可以继承一个基类，不可以实现一个接口B.匿名内部类不可以定义构造器C.匿名内部类不能用于形参D.以上说法都不正确 答案：B 解析：由于构造器的名字必须与类名相同，而匿名类没有类名，所以匿名类不能有构造器。 15.下下面哪一项不是加载驱动程序的方法？A.通过DriverManager.getConnection方法加载B.调用方法 Class.forNameC.通过添加系统的jdbc.drivers属性D.通过registerDriver方法注册 答案：A 解析：DriverManager.getConnection方法返回一个Connection对象，这是加载驱动之后才能进行的 16.关于以下代码的说明，正确的是（）？123456789101． class StaticStuff2． &#123;3． static int x&#x3D;10；4． static &#123; x+&#x3D;5；&#125;5． public static void main（String args[ ]）6． &#123;7． System.out.println(“x&#x3D;” + x);8． &#125;9． static &#123; x&#x2F;&#x3D;3;&#125;10. &#125; A.4行与9行不能通过编译，因为缺少方法名和返回类型B.9行不能通过编译，因为只能有一个静态初始化器C.编译通过，执行结果为：x=5D.编译通过，执行结果为：x=3 答案：C 解析： 先执行：1 static int x = 10；再执行两个静态块：1 static { x+=5; }2 static { x/=3; }最后执行main()：1 System.out.println(“x=” + x); 所以x = 10 -&gt; x = x +5 = 15 -&gt; x = x / 3 = 5 打印x=5 17.以下集合对象中哪几个是线程安全的（）？A.LinkedListB.ArrayListC.VectorD.Hashtable 答案：C D 解析： 简单记忆线程安全的集合类：喂！SHE！ 喂是指vector，S是指stack,H是指hashtable，E是指：Eenumeration 18.下面哪些可能是重载的基本条件（）（注意：是可能为重载的基本条件）A.参数的类型不同B.参数的顺序不同C.函数的返回值类型不同D.参数的个数不同 答案：A B D 解析： 重载的概念是：方法名称相同，参数个数、次序、类型不同因此重载对返回值没有要求，可以相同，也可以不同但是如果参数的个数、类型、次序都相同，方法名也相同，仅返回值不同，则无法构成重载 19.下面有关 java 类加载器,说法正确的是?()A.引导类加载器(bootstrap class loader):它用来加载 Java 的核心库,是用原生代码来实现的B.扩展类加载器(extensions class loader):它用来加载 Java 的扩展库。C.系统类加载器(system class loader):它根据 Java 应用的类路径(CLASSPATH)来加载 Java 类D.tomcat 为每个 App 创建一个 Loader,里面保存着此 WebApp 的 ClassLoader。需要加载 WebApp 下的类时,就取出 ClassLoader 来使用 答案：A B C D 解析：类的加载是由类加载器完成的，类加载器包括：根加载器(BootStrap)、扩展加载器(Extension)、系统加载器(System)和用户自定义类加载器（ java.lang.ClassLoader 的子类）。从 Java 2 (JDK 1.2)开始，类加载过程采取了父亲委托机制（ PDM ）。 PDM 更好的保证了 Java 平台的安全性，在该机制中， JVM 自带的 Bootstrap 是根加载器，其他的加载器都有且仅有一个父类加载器。类的加载首先请求父类加载器加载，父类加载器无能为力时才由其子类加载器自行加载。 JVM 不会向 Java 程序提供对 Bootstrap 的引用。下面是关于几个类加载器的说明： Bootstrap ：一般用本地代码实现，负责加载 JVM 基础核心类库（ rt.jar ）； Extension ：从 java.ext.dirs 系统属性所指定的目录中加载类库，它的父加载器是 Bootstrap ； system class loader：又叫应用类加载器，其父类是Extension。它是应用最广泛的类加载器。它从环境变量 classpath 或者系统属性 java.class.path 所指定的目录中记载类，是用户自定义加载器的默认父加载器。用户自定义类加载器： java.lang.ClassLoader 的子类 父类委托机制是可以修改的，有些服务器就是自定义类加载器优先的。 20.关于Java的一些概念，下面哪些描述是正确的：( )A.所有的Java异常和错误的基类都是java.lang.Exception, 包括java.lang.RuntimeExceptionB.通过try … catch … finally语句，finally中的语句部分无论发生什么异常都会得到执行C.java中所有的数据都是对象D.Java通过垃圾回收回收不再引用的变量，垃圾回收时对象的finallize方法一定会得到执行E.Java是跨平台的语言，无论通过哪个版本的Java编写的程序都能在所有的Java运行平台中运行F.Java通过synchronized进行访问的同步，synchronized作用非静态成员方法和静态成员方法上同步的目标是不同的 答案：B F 解析：A:Java中所有错误和异常的父类是java.lang.ThrowableB：基本数据类型不是对象，不能用new的方法获取，但是每个基本数据类型都对应着封装类型，这些封装类型为了解决基本数据类型面向对象用的。C:Java垃圾回收器负责回收无用对象占据的内存资源,但对象没有使用new获取了一块特殊区域，这块特殊区域的回收使用finallize（）D：Java跨平台是因为有JVM的存在，Java的三个版本的运行需要各自不同的环境。 推荐Java笔试内容集合 欢迎关注，持续更新中…. 文末 欢迎关注个人微信公众号：Coder编程获取最新原创技术文章和免费学习资料，更有大量精品思维导图、面试资料、PMP备考资料等你来领，方便你随时随地学习技术知识！ 文章收录至Github: https://github.com/CoderMerlin/coder-programmingGitee: https://gitee.com/573059382/coder-programming欢迎关注并star~","categories":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/categories/Java/"},{"name":"笔试","slug":"笔试","permalink":"http://yoursite.com/categories/%E7%AC%94%E8%AF%95/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/tags/Java/"},{"name":"笔试","slug":"笔试","permalink":"http://yoursite.com/tags/%E7%AC%94%E8%AF%95/"}]},{"title":"Java基础笔试练习（五）","slug":"interview/java/B-bishi05","date":"2019-09-19T12:06:00.000Z","updated":"2019-09-19T12:06:00.000Z","comments":true,"path":"2019/09/19/interview/java/B-bishi05/","link":"","permalink":"http://yoursite.com/2019/09/19/interview/java/B-bishi05/","excerpt":"","text":"每天进步一点，不做curd工程师与Api调用工程师欢迎访问个人网站：https://www.coder-programming.cn/ 1.以下关于Integer与int的区别错误的是？A.int是java提供的8种原始数据类型之一B.Integer是java为int提供的封装类C.int的默认值为0D.Integer的默认值为1 答案：D 解析：略 2.给定以下方法声明，调用执行mystery（1234）的输出结果？1234567891011&#x2F;&#x2F;precondition: x &gt;&#x3D;0public void mystery (int x)&#123;System.out.print(x % 10); if ((x &#x2F; 10) !&#x3D; 0)&#123;mystery(x &#x2F; 10);&#125;System.out.print(x % 10);&#125; A.1441B.43211234C.3443D.12344321 答案：B 解析：递归调用 3.下面不是类及类成员的访问控制符的是( )。（不考虑内部类的情况）A.publicB.privateC.staticD.protected 答案：C 解析：类访问控制符只有三种：public ，private， protected static和访问控制无关 4.下列修饰符中与访问控制权限无关的是？（ ）A.privateB.publicC.protectedD.final 答案：D 解析：private : 修饰私有变量public : 修饰公有变量protected: 修饰受保护变量没有final, final用于保护变量不受改变 5.局部变量能否和成员变量重名？A.可以，局部变量可以与成员变量重名，这时可用“this”来指向成员变量B.可以，这时可用“local”关键字来指向局部变量C.不能，局部变量不能与成员变量重名D.不能，在一个类中不能有重名变量，不管是成员变量还是函数中的局部变量 答案：A 解析：JAVA访问变量采用就近原则，局部变量与成员变量重名时，局部变量比较近，使用局部变量 6.下列说法正确的是()A.在类方法中可用this来调用本类的类方法B.在类方法中调用本类的类方法可直接调用C.在类方法中只能调用本类的类方法D.在类方法中绝对不能调用实例方法 答案：B 解析：在类方法中调用本类的类方法可直接调用。 实例方法也叫做对象方法。类方法是属于整个类的，而实例方法是属于类的某个对象的。由于类方法是属于整个类的，并不属于类的哪个对象，所以类方法的方法体中不能有与类的对象有关的内容。即类方法体有如下限制：(1) 类方法中不能引用对象变量；(2) 类方法中不能调用类的对象方法；(3) 在类方法中不能使用super、this关键字。(4)类方法不能被覆盖。如果违反这些限制，就会导致程序编译错误。与类方法相比，对象方法几乎没有什么限制：(1) 对象方法中可以引用对象变量，也可以引用类变量；(2) 对象方法中可以调用类方法；(3) 对象方法中可以使用super、this关键字。 7.关于依赖注入，下列选项中说法错误的是（）？A.依赖注入能够独立开发各组件，然后根据组件间关系进行组装B.依赖注入提供使用接口编程C.依赖注入使组件之间相互依赖，相互制约D.依赖注入指对象在使用时动态注入 答案：C 解析：依赖注入目的是减少组件之间的耦合度，使开发变得简单。 8.运行下面代码，输出的结果是（）123456789101112131415161718class A &#123; public A() &#123; System.out.println(&quot;class A&quot;); &#125; &#123; System.out.println(&quot;I&#39;m A class&quot;); &#125; static &#123; System.out.println(&quot;class A static&quot;); &#125;&#125;public class B extends A &#123; public B() &#123; System.out.println(&quot;class B&quot;); &#125; &#123; System.out.println(&quot;I&#39;m B class&quot;); &#125; static &#123; System.out.println(&quot;class B static&quot;); &#125; public static void main(String[] args) &#123; new B(); &#125;&#125; A. 123456class A static class B static I&#39;m A class class AI&#39;m B class class B B. 123456class A staticI&#39;m A classclass Aclass B staticI&#39;m B classclass B C. 123456class A staticclass B staticclass AI&#39;m A class class BI&#39;m B class D. 123456class A staticclass AI&#39;m A classclass B staticclass BI&#39;m B class 答案：A 解析：此题考虑 Java 中构造器、初始化块、静态初始化块的执行顺序。 静态初始化块 &gt; 初始化块 &gt; 构造器父类 &gt; 子类综合下来顺序就是： 父类静态初始化块子类静态初始化块父类初始化块父类构造器子类初始化块子类构造器需要注意静态初始化块是在类第一次加载的时候就会进行初始化。 9.下面哪个标识符是合法的？A.”9HelloWorld”B.”_Hello World”C.”Hello*World”D.”Hello$World” 答案：D 解析：标识符是以字母开头的字母数字序列：数字是指0~9，字母指大小写英文字母、下划线（_)和美元符号（$），也可以是Unicode字符集中的字符，如汉字；字母、数字等字符的任意组合，不能包含+、- 等字符；不能使用关键字；大小写敏感由此可以看出：A：不可以数字开头B：用下划线开头符合，但是中间有空格C:不能包含“”排除ABC，答案即是D 10.以下程序执行的结果是：1234567891011121314151617181920class X&#123; Y y&#x3D;new Y(); public X()&#123; System.out.print(&quot;X&quot;); &#125;&#125;class Y&#123; public Y()&#123; System.out.print(&quot;Y&quot;); &#125;&#125;public class Z extends X&#123; Y y&#x3D;new Y(); public Z()&#123; System.out.print(&quot;Z&quot;); &#125; public static void main(String[] args) &#123; new Z(); &#125;&#125; A.ZYXXB.ZYXYC.YXYZD.XYZX 答案：C 解析：1.父类静态代码块 （java虚拟机加载类时，就会执行该块代码，故只执行一次）2 .子类静态代码块 （java虚拟机加载类时，就会执行该块代码，故只执行一次）3. 父类属性对象初始化4.父类普通代码块（每次new,每次执行 ）5. 父类构造函数（每次new,每次执行）6.子 类 属性对象初始化7.子类普通代码块（每次new,每次执行 ）8.子 类构造函数（每次new,每次执行） 11.以下声明合法的是A.default String sB.public final static native int w( )C.abstract double dD.abstract final double hyperbolicCosine( ) 答案：B 解析：A：java的访问权限有public、protected、private和default的，default不能修饰变量C：普通变量不能用abstract修饰，abstract一般修饰方法和类D：被定义为abstract的类需要被子类继承，但是被修饰为final的类是不能被继承和改写的心存疑问可以实验一下，看是否能通过编译. 12.java用（）机制实现了进程之间的同步执行A.虚拟机B.多个CPUC.异步调用D.监视器 答案：D 解析：同步执行，需要监视器，即锁。 13.What is displayed when the following is executed;123double d1&#x3D;-0.5;System.out.println(&quot;Ceil d1&#x3D;&quot;+Math.ceil(d1));System.out.println(&quot;floor d1&#x3D;&quot;+Math.floor(d1)); A.Ceil d1=-0.0 floor d1=-1.0B.Ceil d1=0.0 floor d1=-1.0C.Ceil d1=-0.0 floor d1=-0.0D.Ceil d1=0.0 floor d1=0.0E.Ceil d1=0 floor d1=-1 答案：A 解析： 14.有关下述Java代码描述正确的选项是____。12345678public class TestClass &#123; private static void testMethod()&#123; System.out.println(&quot;testMethod&quot;); &#125; public static void main(String[] args) &#123; ((TestClass)null).testMethod(); &#125;&#125; A.编译不通过B.编译通过，运行异常，报NullPointerExceptionC.编译通过，运行异常，报IllegalArgumentExceptionD.编译通过，运行异常，报NoSuchMethodExceptionE.编译通过，运行异常，报ExceptionF.运行正常，输出testMethod 答案：F 解析：1）此处是类对方法的调用，不是对象对方法的调用。2）方法是static静态方法，直接使用”类.方法”即可，因为静态方法使用不依赖对象是否被创建。null可以被强制类型转换成任意类型（不是任意类型对象），于是可以通过它来执行静态方法。3）非静态的方法用”对象.方法”的方式，必须依赖对象被创建后才能使用，若将testMethod()方法前的static去掉，则会报 空指针异常 。此处也验证了2）的观点当然，不管是否静态方法，都是已经存在的，只是访问方式不同。 15.下面哪些具体实现类可以用于存储键，值对，并且方法调用提供了基本的多线程安全支持：()A.java.util.ConcurrentHashMapB.java.util.MapC.java.util.TreeMapD.java.util.SortMapE.java.util.HashtableF.java.util.HashMap 答案：A E 解析： ConcurrentHashMap简称CHM,CHM 允许并发的读和线程安全的更新操作。在执行写操作时，CHM 只锁住部分的 Map，并发的更新是通过内部根据并发级别将 Map 分割成小部分实现的，高的并发级别会造成时间和空间的浪费，低的并发级别在写线程多时会引起线程间的竞争，CHM 的所有操作都是线程安全，CHM 返回的迭代器是弱一致性， fail-safe 并且不会抛出ConcurrentModificationException 异常，CHM不允许null的键值。可以使用 CHM 代替 HashTable，但要记住 CHM 不会锁住整个 Map 除了Hashtable，其他是非线性安全的。 16.JavaWEB中有一个类，当会话种邦定了属性或者删除了属性时，他会得到通知，这个类是：( )A.HttpSessionAttributeListenerB.HttpSessionBindingListenerC.HttpSessionObjectListenerD.HttpSessionListener;E.HttpSessionF.HttpSessionActivationListener 答案：A 解析：HttpSessionAttributeListener：可以实现此侦听器接口获取此web应用程序中会话属性列表更改的通知；HttpSessionBindingListener：当该对象从一个会话中被绑定或者解绑时通知该对象，这个对象由HttpSessionBindingEvent对象通知。这可能是servlet程序显式地从会话中解绑定属性的结果，可能是由于会话无效，也可能是由于会话超时；HttpSessionObjectListener：没有该接口API；HttpSessionListener：当web应用程序中的活动会话列表发生更改时通知该接口的实现类，为了接收该通知事件，必须在web应用程序的部署描述符中配置实现类；HttpSessionActivationListener：绑定到会话的对象可以侦听容器事件，通知它们会话将被钝化，会话将被激活。需要一个在虚拟机之间迁移会话或持久会话的容器来通知所有绑定到实现该接口会话的属性。 17.在java中重写方法应遵循规则的包括（）A.访问修饰符的限制一定要大于被重写方法的访问修饰符B.可以有不同的访问修饰符C.参数列表必须完全与被重写的方法相同D.必须具有不同的参数列表 答案：B C 解析：方法重写 参数列表必须完全与被重写方法的相同； 返回类型必须完全与被重写方法的返回类型相同； 访问权限不能比父类中被重写的方法的访问权限更低。例如：如果父类的一个方法被声明为public，那么在子类中重写该方法就不能声明为protected。 父类的成员方法只能被它的子类重写。 声明为final的方法不能被重写。 声明为static的方法不能被重写，但是能够被再次声明。 子类和父类在同一个包中，那么子类可以重写父类所有方法，除了声明为private和final的方法。 子类和父类不在同一个包中，那么子类只能够重写父类的声明为public和protected的非final方法。 重写的方法能够抛出任何非强制异常，无论被重写的方法是否抛出异常。但是，重写的方法不能抛出新的强制性异常，或者比被重写方法声明的更广泛的强制性异常，反之则可以。 构造方法不能被重写。 如果不能继承一个方法，则不能重写这个方法。 方法重载 被重载的方法必须改变参数列表(参数个数或类型或顺序不一样)； 被重载的方法可以改变返回类型； 被重载的方法可以改变访问修饰符； 被重载的方法可以声明新的或更广的检查异常； 方法能够在同一个类中或者在一个子类中被重载。 无法以返回值类型作为重载函数的区分标准。 18.What might cause the current thread to stop or pause executingA.An InterruptedException is thrown.B.The thread executes a wait() call.C.The thread constructs a new Thread.D.A thread of higher priority becomes ready.E.The thread executes a waitforID()call on a MediaTracker. 答案：A B E 解析：略 19.下列说法错误的有（ ）A.Java面向对象语言容许单独的过程与函数存在B.Java面向对象语言容许单独的方法存在C.Java语言中的非静态方法属于类中的成员（member）D.Java语言中的方法必定隶属于某一类（对象），调用方法与C语言的过程或C++语言的函数相同 答案：A B C D 解析：Java的静态方法属于类的成员，实例方法属于对象的成员。 20.下列流当中，属于处理流的是：（）A.FilelnputStreamB.lnputStreamC.DatalnputStreamD.BufferedlnputStream 答案：C D 解析：此题考察对于java流的理解节点流是实际工作的流，处理流（我们叫包装流可能容易理解一点）设计的目的是让对流中数据的操作，转化成我们能更简单明了的看懂的数据（而不是二进制的字节等）的操作，但实际上增加了很多类，是io流变的更复杂字节流必是一个接点流，字符流就是一个操作流使用时，必须是有一个结点流，然后才能用操作流来包装结点流，即把结点流当参数传个操作流 注：以上笔试题均来自网络，由笔者整理得出 推荐Java笔试内容集合 欢迎关注，持续更新中…. 文末 欢迎关注个人微信公众号：Coder编程获取最新原创技术文章和免费学习资料，更有大量精品思维导图、面试资料、PMP备考资料等你来领，方便你随时随地学习技术知识！ 文章收录至Github: https://github.com/CoderMerlin/coder-programmingGitee: https://gitee.com/573059382/coder-programming欢迎关注并star~","categories":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/categories/Java/"},{"name":"笔试","slug":"笔试","permalink":"http://yoursite.com/categories/%E7%AC%94%E8%AF%95/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/tags/Java/"},{"name":"笔试","slug":"笔试","permalink":"http://yoursite.com/tags/%E7%AC%94%E8%AF%95/"}]},{"title":"Java基础笔试练习（四）","slug":"interview/java/B-bishi04","date":"2019-09-18T12:06:00.000Z","updated":"2019-09-18T12:06:00.000Z","comments":true,"path":"2019/09/18/interview/java/B-bishi04/","link":"","permalink":"http://yoursite.com/2019/09/18/interview/java/B-bishi04/","excerpt":"","text":"每天进步一点，不做curd工程师与Api调用工程师欢迎访问个人网站：https://www.coder-programming.cn/ 1.编译Java Application 源程序文件将产生相应的字节码文件，这些字节码文件的扩展名为( )。A.javaB.classC.htmlD.exe 答案：B 解析：Java源程序的后缀名为“.java”,经过编译之后生成的字节码文件后缀名为“.class” 2. 问以下哪个说法是正确的？（）A 派生出子类 B, B 派生出子类 C,并且在 java 源代码有如下声明： A a0=new A(); A a1=new B(); A a2=new C(); A.只有第一行能通过编译B.第1、2行能通过编译，但第3行编译出错C.第1、2、3行能通过编译，但第2、3行运行时出错D.第1行，第2行和第3行的声明都是正确的 答案：D 解析：这个题考了两个点： 继承的传递性。 多态，父类引用指向子类对象。 3.以下哪个接口的定义是正确的？（ ）A.interface B{ void print() { } ;}B.interface B{ static void print() ;}C.abstract interface B extends A1, A2 //A1、A2为已定义的接口{ abstract void print(){ };}D.interface B{ void print();} 答案：D 解析：A，接口中方法的默认修饰符时public abstract，抽象方法可是没有方法体的，没有大括号{}B，JDK8中，接口中的方法可以被default和static修饰，但是！！！被修饰的方法必须有方法体。C，注意一下，接口是可以多继承的。整个没毛病，和A选项一样，抽象方法不能有方法体 4.以下会产生信息丢失的类型转换是( ）A.float a=10B.int a=（int）8846.0C.byte a=10； int b=-aD.double d=100 答案：B 解析：会产生信息丢失不如说丢失精度，这样可能更容易明白，而精度丢失只会发生在从大范围到小范围的转换。上面四个选项，只有 B 是从 double 到 int ，也就是从大范围到小范围。 5.以下代码的输出的正确结果是123456public class Test &#123; public static void main(String args[]) &#123; String s &#x3D; &quot;祝你考出好成绩！&quot;; System.out.println(s.length()); &#125;&#125; A.24B.16C.15D.8 答案：D 解析：java的String底层是char数组，它的length()返回数组大小，而unicode中一个汉字是可以用一个char表示的。 一个汉字等于一个字符字符是char，一个汉字也等于二个字节，字节是byte。 6.java中，StringBuilder和StringBuffer的区别，下面说法错误的是？A.StringBuffer是线程安全的B.StringBuilder是非线程安全的C.StringBuffer对 String 类型进行改变的时候其实都等同于生成了一个新的 String 对象，然后将指针指向新的 String 对象。D.效率比较String&lt;StringBuffer&lt;StringBuilder，但是在 String S1 = “This is only a” + “ simple” + “ test”时，String效率最高。 答案：C 解析：效率：String(大姐，出生于JDK1.0时代) 不可变字符序列&lt;StringBuffer(二姐，出生于JDK1.0时代) 线程安全的可变字符序列&lt;StringBuilder(小妹，出生于JDK1.5时代) 非线程安全的可变字符序列。Java中的String是一个类，而并非基本数据类型。string是值传入，不是引用传入。StringBuffer和StringBuilder可以算是双胞胎了，这两者的方法没有很大区别。但在线程安全性方面，StringBuffer允许多线程进行字符操作。这是因为在源代码中StringBuffer的很多方法都被关键字synchronized修饰了，而StringBuilder没有。StringBuilder的效率比StringBuffer稍高，如果不考虑线程安全，StringBuilder应该是首选。另外，JVM运行程序主要的时间耗费是在创建对象和回收对象上。关于D:因为进行字符串加运算时实际上是在堆中开辟大量空间，为了避免资源耗尽java编译器自动将String变量变为StringBulider而后进行append处理。 7.下列关于修饰符混用的说法，错误的是( )A.abstract不能与final并列修饰同一个类B.abstract类中不应该有private的成员C.abstract方法必须在abstract类或接口中D.static方法中能直接调用类里的非static的属性 答案：D 解析：1、abstract不能与final并列修饰同一个类 对的。2、abstract类中不应该有private的成员 对的 ：abstract类中可以有private 但是不应该有。3、abstract方法必须在abstract类或接口中 对的 ： 若类中方法有abstract修饰的，该类必须abstract修改。接口方法默认public abstract。4、static方法中能处理非static的属性 错误 ：在JVM中static方法在静态区，静态区无法调用非静态区属性。 8.如下语句通过算术运算和逻辑运算之后i和 j的结果是（ ）12345int i&#x3D;0;int j&#x3D;0;if((++i&gt;0)||(++j&gt;0))&#123;&#x2F;&#x2F;打印出i和j的值。&#125; A.i=0;j=0B.i=1;j=1C.i=0;j=1D.i=1;j=0 答案：D 解析：考察的是短路逻辑的用法，即：当第一个逻辑表达式可以确定结果时，将不再进行剩余表达式的运算。 9.以下是java concurrent包下的4个类，选出差别最大的一个A.SemaphoreB.ReentrantLockC.FutureD.CountDownLatch 答案：C 解析：A、Semaphore：类，控制某个资源可被同时访问的个数;B、ReentrantLock：类，具有与使用synchronized方法和语句所访问的隐式监视器锁相同的一些基本行为和语义，但功能更强大；C、Future：接口，表示异步计算的结果；D、CountDownLatch： 类，可以用来在一个线程中等待多个线程完成任务的类。 10.下面有关java实例变量,局部变量,类变量和final变量的说法，错误的是？A.实例变量指的是类中定义的变量，即成员变量，如果没有初始化，会有默认值。B.局部变量指的是在方法中定义的变量，如果没有初始化，会有默认值C.类变量指的是用static修饰的属性D.final变量指的是用final 修饰的变量 答案：B 解析：B.定义在类中的变量是类的成员变量，可以不进行初始化，Java会自动进行初始化，如果是引用类型默认初始化为null,如果是基本类型例如int则会默认初始化为0局部变量是定义在方法中的变量，必须要进行初始化。被static关键字修饰的变量是静态的，静态变量随着类的加载而加载，所以也被称为类变量被final修饰的变量是常量 11.关于JAVA的垃圾回收机制，下面哪些结论是正确？A.程序可以任意指定释放内存的时间B.JAVA程序不能依赖于垃圾回收的时间或者顺序C.程序可明确地标识某个局部变量的引用不再被使用D.程序可以显式地立即释放对象占有的内存 答案：B 解析：java提供了一个系统级的线程，即垃圾回收器线程。用来对每一个分配出去的内存空间进行跟踪。当JVM空闲时，自动回收每块可能被回收的内存，GC是完全自动的，不能被强制执行。程序员最多只能用System.gc()来建议执行垃圾回收器回收内存，但是具体的回收时间，是不可知的。当对象的引用变量被赋值为null，可能被当成垃圾。 12.JSP分页代码中，哪个步骤次序是正确的？A.先取总记录数，得到总页数，最后显示本页的数据。B.先取所有的记录，得到总页数，再取总记录数，最后显示本页的数据。C.先取总页数，得到总记录数，再取所有的记录，最后显示本页的数据。D.先取本页的数据，得到总页数，再取总记录数，最后显示所有的记录。 答案：A 解析：1、count(*)得到总记录数2、计算总页数3、获取所有记录(个人感觉这一步不需要，可以直接获取指定页数数据)4、过滤显示本页数据 13.关于访问权限说法正确的是 ？ ( )A.外部类前面可以修饰public,protected和privateB.成员内部类前面可以修饰public,protected和privateC.局部内部类前面可以修饰public,protected和privateD.以上说法都不正确 答案：B 解析：(1)对于外部类而言，它也可以使用访问控制符修饰，但外部类只能有两种访问控制级别：public和默认。因为外部类没有处于任何类的内部，也就没有其所在类的内部、所在类的子类两个范围，因此 private 和 protected 访问控制符对外部类没有意义。(2)内部类的上一级程序单元是外部类，它具有 4 个作用域：同一个类（ private ）、同一个包（ protected ）和任何位置（ public ）。(3)因为局部成员的作用域是所在方法，其他程序单元永远不可能访问另一个方法中的局部变量，所以所有的局部成员都不能使用访问控制修饰符修饰。 14.以下代码执行的结果显示是多少（ ）？1234567891011121314151617181920212223public class Demo &#123; class Super&#123; int flag&#x3D;1; Super()&#123; test(); &#125; void test()&#123; System.out.println(&quot;Super.test() flag&#x3D;&quot;+flag); &#125; &#125; class Sub extends Super&#123; Sub(int i)&#123; flag&#x3D;i; System.out.println(&quot;Sub.Sub()flag&#x3D;&quot;+flag); &#125; void test()&#123; System.out.println(&quot;Sub.test()flag&#x3D;&quot;+flag); &#125; &#125; public static void main(String[] args) &#123; new Demo().new Sub(5); &#125;&#125; A.Sub.test() flag=1,Sub.Sub() flag=5B.Sub.Sub() flag=5,Sub.test() flag=5C.Sub.test() flag=0,Sub.Sub() flag=5D.Super.test() flag=1,Sub.Sub() flag=5 答案：A 解析： 在继承中代码的执行顺序为：1.父类静态对象，父类静态代码块2.子类静态对象，子类静态代码块3.父类非静态对象，父类非静态代码块4.父类构造函数5.子类非静态对象，子类非静态代码块6.子类构造函数对于本题来说：在只想new Sub(5)的时候，父类先初始化了int flag=1，然后执行父类的构造函数Super（），父类构造函数中执行的test（）方法，因子类是重写了test（）方法的，因此父类构造函数中的test（）方法实际执行的是子类的test（）方法，所以输出为Sub.test() flag=1，接着执行子类构造函数Sub(5) 将flag赋值为5，因此输出结果Sub.Sub() flag=5。最终选择了A。 15.Java多线程有几种实现方法？A.继承Thread类B.实现Runnable接口C.实现Thread接口D.以上都不正确 答案：AB 解析：AB.多线程一共有三种实现方式方式1：继承Thread类，并重写run()方法方式2：实现Runnable接口，实现run()方法方式3：实现Callable接口，线程结束后可以有返回值，但是该方式是依赖于线程池的。 16.在Jdk1.7中，下述说法中抽象类与接口的区别与联系正确的有哪些？A.抽象类中可以有普通成员变量，接口中没有普通成员变量。B.抽象类和接口中都可以包含静态成员常量。C.一个类可以实现多个接口，但只能继承一个抽象类D.抽象类中可以包含非抽象的普通方法，接口中的方法必须是抽象的，不能有非抽象的普通方法。 答案：A B C D 解析：总结一下 一个子类只能继承一个抽象类,但能实现多个接口 抽象类可以有构造方法,接口没有构造方法 抽象类可以有普通成员变量,接口没有普通成员变量 抽象类和接口都可有静态成员变量,抽象类中静态成员变量访问类型任意,接口只能public static final(默认) 抽象类可以没有抽象方法,抽象类可以有普通方法,接口中都是抽象方法 抽象类可以有静态方法,接口不能有静态方法 抽象类中的方法可以是public、protected;接口方法只有public 17.根据下面这个程序的内容，判断哪些描述是正确的：（ ）1234567891011121314public class Test &#123; public static void main(String args[]) &#123; String s &#x3D; &quot;tommy&quot;; Object o &#x3D; s; sayHello(o); &#x2F;&#x2F;语句1 sayHello(s); &#x2F;&#x2F;语句2 &#125; public static void sayHello(String to) &#123; System.out.println(String.format(&quot;Hello, %s&quot;, to)); &#125; public static void sayHello(Object to) &#123; System.out.println(String.format(&quot;Welcome, %s&quot;, to)); &#125;&#125; A.这段程序有编译错误B.语句1输出为:Hello, tommyC.语句2输出为:Hello, tommyD.语句1输出为:Welcome, tommyE.语句2输出为:Welcome, tommyF.根据选用的Java编译器不同，这段程序的输出可能不同 答案：CD 解析：略 18.Java特性中,abstract class和interface有什么区别（）A.抽象类可以有构造方法，接口中不能有构造方法B.抽象类中可以有普通成员变量，接口中没有普通成员变量C.抽象类中不可以包含静态方法，接口中可以包含静态方法D.一个类可以实现多个接口，但只能继承一个抽象类。 答案：A B D 解析：接口中的成员变量被隐式的声明为public static final ，jdk1.8后接口中可以有静态方法而且存在方法体 19.关于下面代码片段叙述正确的是（）代码片段： 12345byte b1&#x3D;1,b2&#x3D;2,b3,b6; final byte b4&#x3D;4,b5&#x3D;6; b6&#x3D;b4+b5; b3&#x3D;(b1+b2); System.out.println(b3+b6); A.输出结果：13B.语句：b6=b4+b5编译出错C.语句：b3=b1+b2编译出错D.运行期抛出异常 答案：C 解析：C.被final修饰的变量是常量，这里的b6=b4+b5可以看成是b6=10；在编译时就已经变为b6=10了。而b1和b2是byte类型，java中进行计算时候将他们提升为int类型，再进行计算，b1+b2计算后已经是int类型，赋值给b3，b3是byte类型，类型不匹配，编译不会通过，需要进行强制转换。Java中的byte，short，char进行计算时都会提升为int类型。 20.下列那些方法是线程安全的(所调用的方法都存在)A. 123456public class MyServlet implements Servlet &#123;public void service (ServletRequest req, ServletResponse resp) &#123; BigInteger I &#x3D; extractFromRequest(req); encodeIntoResponse(resp,factors);&#125;&#125; B. 123456789101112public class MyServlet implements Servlet &#123;private long count &#x3D;0;public long getCount() &#123;return count;&#125;public void service (ServletRequest req, ServletResponse resp) &#123;BigInteger I &#x3D; extractFromRequest(req);BigInteger[] factors &#x3D; factor(i);count ++;encodeIntoResponse(resp,factors);&#125;&#125; C. 123456789public class MyClass &#123;private int value;public synchronized int get() &#123;return value;&#125;public synchronized void set (int value) &#123;this.value &#x3D; value;&#125;&#125; D. 123456789101112public class Factorizer implements Servlet &#123;private volatile MyCache cache &#x3D; new MyCache(null,null);public void service(ServletRequest req, ServletResponse resp) &#123;BigInteger i &#x3D; extractFromRequest(req);BigInteger[] factors &#x3D; cache.getFactors(i);if (factors &#x3D;&#x3D; null) &#123;factors &#x3D; factor(i);cache &#x3D; new MyCache(i,factors);&#125;encodeIntoResponse(resp,factors);&#125; 答案：A C D 解析：A：没有成员（没有共享资源），线程安全；B：假设存在线程1和线程2，count初始值为0，当线程1执行count++中count+1（此时未写回最终计算值），这时线程2执行count++中读取count，发生数据错误，导致线程1线程2的结果都为1，而不是线程1的结果为1，线程2的结果为2，线程不安全；C：成员私有，对成员的set get方法都加重量级锁，线程安全； D：volatile有两个作用：可见性（volatile变量的改变能使其他线程立即可见，但它不是线程安全的，参考B）和禁止重排序；这里是可见性的应用，类中方法对volatile修饰的变量只有赋值，线程安全； 欢迎指正。 推荐笔试内容集合 持续更新中…. 文末 欢迎关注个人微信公众号：Coder编程获取最新原创技术文章和免费学习资料，更有大量精品思维导图、面试资料、PMP备考资料等你来领，方便你随时随地学习技术知识！ 文章收录至Github: https://github.com/CoderMerlin/coder-programmingGitee: https://gitee.com/573059382/coder-programming欢迎关注并star~","categories":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/categories/Java/"},{"name":"笔试","slug":"笔试","permalink":"http://yoursite.com/categories/%E7%AC%94%E8%AF%95/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/tags/Java/"},{"name":"笔试","slug":"笔试","permalink":"http://yoursite.com/tags/%E7%AC%94%E8%AF%95/"}]},{"title":"Java基础笔试练习（三）","slug":"interview/java/B-bishi03","date":"2019-09-17T12:06:00.000Z","updated":"2019-09-17T12:06:00.000Z","comments":true,"path":"2019/09/17/interview/java/B-bishi03/","link":"","permalink":"http://yoursite.com/2019/09/17/interview/java/B-bishi03/","excerpt":"","text":"每天进步一点，不做curd工程师与Api调用工程师欢迎访问个人网站：https://www.coder-programming.cn/ 1.下列InputStream类中哪个方法可以用于关闭流？A.skip（）B.close（）C.mark（）D.reset（） 答案：B 解析：inputstream的close方法用来关闭流skip()用来跳过一些字节mark（）用来标记流reset（）复位流 2.下面语句正确的是（）A.x+1=5B.i++=1C.a++b=1D.x+=1 答案：D 解析：选D，+=，-=，*=，/=最常见。ABC都编译错误。 3.下面关于继承的描述正确的是？A.在Java中只允许单一继承B.在Java中一个类只能实现一个接口C.在Java中一个类不能同时继承一个类和实现一个接口D.Java的单一继承使代码不可靠 答案：A 解析：略 4.下列哪种说法是正确的？A.实例方法可直接调用超类的实例方法B.实例方法可直接调用超类的类方法C.实例方法可直接调用本类的类方法D.实例方法可直接调用其他类的实例方法 答案：C 解析：a.实例方法可以调用超类公有实例方法b.实例方法可以直接调用超类的公有类方法d.实例方法可以通过类名调用其他类的类方法 5.A派生出子类B，B派生出子类C，并且在java源代码中有如下声明：1231.A a0&#x3D;new A();2.A a1&#x3D;new B();3.A a2&#x3D;new C(); 以下哪个说法是正确的？ A.第1行,第2行和第3行的声明都是正确的B.第1,2,3行都能通过编译，但第2,3行运行时出错C.第1,2行能通过编译，但第3行编译出错D.只有第1行能通过编译 答案：A 解析：一句话 向上转型是无条件的 6.java中，静态变量static在不同线程的不同实例中地址是否一样？他们储存在什么区域？（）A.地址一样，在堆栈区。B.地址不一样，在堆栈区。C.地址一样，在全局区。D.地址不一样，在全局区。 答案：C 解析：static变量存储在方法区，线程共享，全局区是方法区的一部分，其实用排除法也可以知道 static变量不可能位于堆栈区 7.下面代码的输出结果是什么？1234567891011121314public class ZeroTest &#123; public static void main(String[] args) &#123; try&#123; int i &#x3D; 100 &#x2F; 0; System.out.print(i); &#125;catch(Exception e)&#123; System.out.print(1); throw new RuntimeException(); &#125;finally&#123; System.out.print(2); &#125; System.out.print(3); &#125;&#125; A.3B.123C.1D.12 答案：D 解析：1、inti = 100/ 0; 会出现异常，会抛出异常，System.out.print(i)不会执行，2、catch捕捉异常，继续执行System.out.print(1);3、当执行 thrownewRuntimeException(); 又会抛出异常，这时，除了会执行finally中的代码，其他地方的代码都不会执行 8.以下代码将打印出?1234567public static void main(String args[]) &#123; List Listlist1 &#x3D; new ArrayList(); Listlist1.add(0); List Listlist2 &#x3D; Listlist1; System.out.println(Listlist1.get(0) instanceof Integer); System.out.println(Listlist2.get(0) instanceof Integer);&#125; A.编译错误B.true trueC.true falseD.false false 答案：B 解析：collection类型的集合（ArrayList,LinkedList）只能装入对象类型的数据，该题中装入了0，是一个基本类型，但是JDK5以后提供了自动装箱与自动拆箱，所以int类型自动装箱变为了Integer类型。编译能够正常通过。将list1的引用赋值给了list2，那么list1和list2都将指向同一个堆内存空间。instanceof是Java中关键字，用于判断一个对象是否属于某个特定类的实例，并且返回boolean类型的返回值。显然，list1.get(0)和list2.get(0)都属于Integer的实例 9. 在运行时，由java解释器自动引入，而不用import语句引入的包是()。A.java.langB.java.systemC.java.ioD.java.util 答案：A 解析：ava.lang包是java语言包，是自动导入的。java.util包是java的工具包，需要手动导入。java.sql包，JDBC接口类，需要手动导入。java.io;各种输入输入流，需要手动导入。 10.下面这三条语句123System.out.println(“is ”+ 100 + 5)；System.out.println(100 + 5 +“ is”)；System.out.println(“is ”+ (100 + 5))； 的输出结果分别是？ ( ) A.is 1005, 1005 is, is 1005B.is 105, 105 is, is 105C.is 1005, 1005 is, is 105D.is 1005, 105 is, is 105 答案：D 解析：1.”is”说明后面的内容都会被强制转换为string，所以是最后结果是拼接起来的2.100+5先得到105，然后与is拼接3.先算括号内的 11.Given:12345678910public class IfTest&#123; public static void main(string[]args)&#123; int x&#x3D;3; int y&#x3D;1; if(x&#x3D;y) System.out.println(“Not equal”); else System.out.println(“Equal”); &#125;&#125; What is the result? A.The output is “Equal”B.The output in “Not Equal”C.An error at line 5 causes compilation to fall.D.The program executes but does not print a message. 答案：C 解析：这个题考查两个知识点。1、Java中，赋值是有返回值的 ，赋什么值，就返回什么值。比如这题，x=y，返回y的值，所以括号里的值是1。2、Java跟C的区别，C中赋值后会与0进行比较，如果大于0，就认为是true；而Java不会与0比较，而是直接把赋值后的结果放入括号。 12.在一个基于分布式的游戏服务器系统中，不同的服务器之间，哪种通信方式是不可行的（）？A.管道B.消息队列C.高速缓存数据库D.套接字 答案：A 解析：管道( pipe )：管道是一种半双工的通信方式，数据只能单向流动，而且只能在具有亲缘关系的进程间使用。进程的亲缘关系通常是指父子进程关系。 13.下列程序的运行结果1234567891011public void getCustomerInfo() &#123; try &#123; &#x2F;&#x2F; do something that may cause an Exception &#125; catch (java.io.FileNotFoundException ex) &#123; System.out.print(&quot;FileNotFoundException!&quot;); &#125; catch (java.io.IOException ex) &#123; System.out.print(&quot;IOException!&quot;); &#125; catch (java.lang.Exception ex) &#123; System.out.print(&quot;Exception!&quot;); &#125;&#125; A.IOException!B.IOException!Exception!C.FileNotFoundException!IOException!D.FileNotFoundException!IOException!Exception! 答案：A 解析：题目说抛出一个异常，但是没说具体是什么异常，那么就要分情况了：1.如果抛出一个FileNotFoundException(或其子类)，那么最终结果就打印FileNotFoundException2.如果抛出一个IOException,或者IOException的子类(不包含FileNotFoundException及其子类)，那么最终结果就打印IOException3.如果抛出一个Exception(不包含IOException及其子类),那么最终结果就打印Exception.以上，所以3个皆有可能.但是，不管是哪一种情况，只会输出其中之一。从答案上来看，B,C，D的输出情况是不存在的。因此选A 14.如下代码的输出结果是什么？12345678910111213public class Test &#123; public int aMethod()&#123; static int i &#x3D; 0; i++; return i; &#125;public static void main(String args[])&#123; Test test &#x3D; new Test(); test.aMethod(); int j &#x3D; test.aMethod(); System.out.println(j); &#125;&#125; A.0B.1C.2D.编译失败 答案：D 解析：静态变量只能在类主体中定义，不能在方法中定义 15.下面有关servlet和cgi的描述，说法错误的是？A.servlet处于服务器进程中，它通过多线程方式运行其service方法B.CGI对每个请求都产生新的进程，服务完成后就销毁C.servlet在易用性上强于cgi，它提供了大量的实用工具例程，例如自动地解析和解码HTML表单数据、读取和设置HTTP头、处理Cookie、跟踪会话状态等D.cgi在移植性上高于servlet，几乎所有的主流服务器都直接或通过插件支持cgi 答案：D 解析：选择D，servlet处于服务器进程中，它通过多线程方式运行其service方法，一个实例可以服务于多个请求，并且其实例一般不会销毁，而CGI对每个请求都产生新的进程，服务完成后就销毁，所以效率上低于servlet。 16.下列关于构造方法的叙述中，错误的是（）A.java语言规定构造方法名与类名必须相同B.java语言规定构造方法没有返回值，但不同void声明C.java语言规定构造方法不可以重载D.java语言规定构造方法只能通过new自动调用 答案：CD 解析：关于答案d,通过this也可以调用 17.What is Static Method in Java（）A.It is a method which belongs to the class and not to the object(instance)B.A static method can access only static data. It can not access non-static data (instance variables)C.A static method can call only other static methods and can not call a non-static method from it.D.A static method can not be accessed directly by the class name and doesn’t need any object 答案：ABC 解析： A：静态方法是一个属于类而不属于对象(实例)的方法。（√）B：静态方法只能访问静态数据。无法访问非静态数据(实例变量)。（√）C：静态方法只能调用其他静态方法，不能从中调用非静态方法。（√）D：静态方法不能通过类名直接访问，也不需要任何对象。（×） 静态方法可以直接用类名访问。 18.下列哪种情况会调用拷贝构造函数（）A.用派生类的对象去初始化基类对象时B.将类的一个对象赋值给该类的另一个对象时C.函数的形参是类的对象，调用函数进行形参和实参结合时D.函数的返回值是类的对象，函数执行返回调用时 答案：A C D 解析： 复制构造函数被调用的三种情况 1.定义一个对象时，以本类另一个对象作为初始值，发生复制构造； 2.如果函数的形参是类的对象，调用函数时，将使用实参对象初始化形参对象，发生复制构造； 3.如果函数的返回值是类的对象，函数执行完成返回主调函数时，将使用return语句中的对象初始化一个临时无名对象，传递给主调函数，此时发生复制构造。 19.Java对象的初始化方式有（ ）A.初始化块B.构造器C.定义变量时指定初始化值D.其它各项都不对 答案：A B C 解析： 对象的初始化方式：1.new时初始化 ；2.静态工厂 newInstance；3.反射Class.forName()；4.clone方式；5.反序列化； 20.截止JDK1.8版本,java并发框架支持锁包括?A.读写锁B.自旋锁C.X锁D.乐观锁E.排他锁 答案：A B D 解析： 1、自旋锁 ,自旋，jvm默认是10次吧，有jvm自己控制。for去争取锁2、阻塞锁 被阻塞的线程，不会争夺锁。3、可重入锁 多次进入改锁的域4、读写锁5、互斥锁 锁本身就是互斥的6、悲观锁 不相信，这里会是安全的，必须全部上锁7、乐观锁 相信，这里是安全的。8、公平锁 有优先级的锁9、非公平锁 无优先级的锁10、偏向锁 无竞争不锁，有竞争挂起，转为轻量锁11、对象锁 锁住对象12、线程锁13、锁粗化 多锁变成一个，自己处理14、轻量级锁 CAS 实现15、锁消除 偏向锁就是锁消除的一种16、锁膨胀 jvm实现，锁粗化17、信号量 使用阻塞锁 实现的一种策略18、排它锁：X锁，若事务T对数据对象A加上X锁，则只允许T读取和修改A，其他任何事务都不能再对A加任何类型的锁，直到T释放A上的锁。这就保证了其他事务在T释放A上的锁之前不能再读取和修改A。 注：以上笔试题均来自网络，由笔者整理得出 推荐笔试内容集合 欢迎关注，持续更新中…. 文末 欢迎关注个人微信公众号：Coder编程获取最新原创技术文章和免费学习资料，更有大量精品思维导图、面试资料、PMP备考资料等你来领，方便你随时随地学习技术知识！ 文章收录至Github: https://github.com/CoderMerlin/coder-programmingGitee: https://gitee.com/573059382/coder-programming欢迎关注并star~","categories":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/categories/Java/"},{"name":"笔试","slug":"笔试","permalink":"http://yoursite.com/categories/%E7%AC%94%E8%AF%95/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/tags/Java/"},{"name":"笔试","slug":"笔试","permalink":"http://yoursite.com/tags/%E7%AC%94%E8%AF%95/"}]},{"title":"Java基础笔试练习（二）","slug":"interview/java/B-bishi02","date":"2019-09-16T12:06:00.000Z","updated":"2019-09-16T12:06:00.000Z","comments":true,"path":"2019/09/16/interview/java/B-bishi02/","link":"","permalink":"http://yoursite.com/2019/09/16/interview/java/B-bishi02/","excerpt":"","text":"每天进步一点，不做curd工程师与Api调用工程师欢迎访问个人网站：https://www.coder-programming.cn/ 1. HashMap的数据结构是怎样的？A.数组B.链表C.数组+链表D.二叉树 答案：C 解析： JDK8以后，HashMap的数据结构是数组+链表+红黑树 2. 在 JAVA 编程中，Java 编译器会将 Java 程序转换为（ ）？A.字节码B.可执行代码C.机器代码D.以上都不对 答案：A 解析： 编译器将Java源代码编译成字节码class文件 类加载到JVM里面后，执行引擎把字节码转为可执行代码 执行的过程，再把可执行代码转为机器码，由底层的操作系统完成执行。 3.下面有关JVM内存，说法错误的是？A.程序计数器是一个比较小的内存区域，用于指示当前线程所执行的字节码执行到了第几行，是线程隔离的B.Java方法执行内存模型，用于存储局部变量，操作数栈，动态链接，方法出口等信息，是线程隔离的C.方法区用于存储JVM加载的类信息、常量、静态变量、即时编译器编译后的代码等数据，是线程隔离的D.原则上讲，所有的对象都在堆区上分配内存，是线程之间共享的 答案：C 解析：运行时数据区包括：虚拟机栈区，堆区，方法区，本地方法栈，程序计数器 虚拟机栈区：也就是我们常说的栈区，线程私有，存放基本类型，对象的引用和 returnAddress ，在编译期间完成分配。 堆区：JAVA 堆，也称 GC 堆，所有线程共享，存放对象的实例和数组， JAVA 堆是垃圾收集器管理的主要区域。 方法区：所有线程共享，存储已被虚拟机加载的类信息，常量，静态变量，即时编译器编译后的代码等数据。这个区域的内存回收目标主要是针对常量池的对象的回收和对类型的卸载。 程序计数器：线程私有，每个线程都有自己独立的程序计数器，用来指示下一条指令的地址。 JAVA中，下列语句哪一个正确（） A.class中的constructor不可省略B.constructor必须与class同名，但方法不能与class同名C.constructor在一个对象被new时执行D.一个class只能定义一个constructor 答案：C 解析：A 省略构造函数,编译器会自动生成。D 构造函数可以重载B 方法是可以和类名同名的，和构造方法唯一的区别就是，构造方法没有返回值。 5.在JAVA中，假设A有构造方法A(int a)，则在类A的其他构造方法中调用该构造方法和语句格式应该为（）A.this.A(x)B.this(x)C.super(x)D.A(x) 答案：B 解析：this的作用其中一个就是在一个构造方法中调用另一个构造方法，格式为this(参数)；super是调用父类的方法；A(a)这种形式是在new一个类时使用。 6.下列选项中属于面向对象程序设计语言特征的是（）A.继承性B.多态性C.相似性D.封装性 答案： A B D 解析：面对对象三大特征：封装，继承，多态 7.以下哪个正确？A.abstract类只能用来派生子类，不能用来创建abstract类的对象。B.final类不但可以用来派生子类，也可以用来创建final类的对象。C.abstract不能与final同时修饰一个类。D.abstract类定义中可以没有abstract方法。 答案：A C D 解析：1、abstract类不能用来创建abstract类的对象；2、final类不能用来派生子类，因为用final修饰的类不能被继承；3、如2所述，final不能与abstract同时修饰一个类，abstract类就是被用来继承的；4、类中有abstract方法必须用abstract修饰，但abstract类中可以没有抽象方法，接口中也可以有abstract方法。 8. JAVA反射机制主要提供了以下哪些功能？A.在运行时判断一个对象所属的类B.在运行时构造一个类的对象C.在运行时判断一个类所具有的成员变量和方法D.在运行时调用一个对象的方法 答案：A B C D 解析：Java反射机制主要提供了以下功能： 在运行时判断任意一个对象所属的类；在运行时构造任意一个类的对象；在运行时判断任意一个类所具有的成员变量和方法；在运行时调用任意一个对象的方法；生成动态代理。因此，答案为：ABCD 9.以下关于Histroy对象的属性或方法描述正确的是（）A.bcak回到浏览器载入历史URL地址列表的当前URL的前一个URLB.go表示刷新当前页面C.length保存历史URL地址列表的长度信息D.forward转到浏览器载入历史URL地址列表的当前URL的下一个URL。 答案：A D 解析： 选A、D。考察的是浏览器的内置对象管理模型，简称BOM(Browser Object Model)中的Histroy属性和方法。 length 返回浏览器历史列表中的URL数量。所以C中表述的长度信息是错误的。 back() 加载 history列表中的前一个URL。 forward() 加载 history 列表中的下一个URL。 go() 加载history列表中的某个具体页面。所以B的表述刷新当前页面是错误的。 10.1234567891011121314151617181920212223242526272829303132public class NameList&#123; private List names &#x3D; new ArrayList(); public synchronized void add(String name) &#123; names.add(name); &#125; public synchronized void printAll() &#123; for (int i &#x3D; 0; i &lt; names.size(); i++) &#123; System.out.print(names.get(i) + ””); &#125; &#125; public static void main(String[]args) &#123; final NameList sl &#x3D; new NameList(); for (int i &#x3D; 0; i &lt; 2; i++) &#123; new Thread() &#123; public void run() &#123; sl.add(“A”); sl.add(“B”); sl.add(“C”); sl.printAll(); &#125; &#125; .start(); &#125; &#125;&#125; Which two statements are true if this class is compiled and run? A.An exception may be thrown at runtime.B.The code may run with no output, without exiting.C.The code may run with no output, exiting normally(正常地).D.The code may rum with output “A B A B C C “, then exit.E.The code may rum with output “A B C A B C A B C “, then exit.F.The code may ruin with output “A A A B C A B C C “, then exit.G.The code may ruin with output “A B C A A B C A B C “, then exit. 答案：E G 解析： 在每个线程中都是顺序执行的，所以sl.printAll();必须在前三句执行之后执行，也就是输出的内容必有（连续或非连续的）ABC。而线程之间是穿插执行的，所以一个线程执行 sl.printAll();之前可能有另一个线程执行了前三句的前几句。E答案相当于线程1顺序执行完然后线程2顺序执行完。G答案则是线程1执行完前三句add之后线程2插一脚执行了一句add然后线程1再执行 sl.printAll();输出ABCA。接着线程2顺序执行完输出ABCABC输出加起来即为ABCAABCABC。 11. 关于容器下面说法正确的是？ ( )A.列表(List)和集合(Set)存放的元素都是可重复的。B.列表(List)和集合(Set)存放的元素都是不可重复的。C.映射(Map)&lt;key,value&gt;中key是可以重复的。D.映射(Map)&lt;key,value&gt;中value是可以重复的。 答案：D 解析：列表（List）的元素是有序、可重复的；集合（Set）的元素是无序、不可重复的。 12.以下说法错误的是?（）A.数组是一个对象B.数组不是一种原生类C.数组的大小可以任意改变D.在Java中，数组存储在堆中连续内存空间里 答案：C 解析：在java中,数组是一个对象,不是一种原生类,对象所以存放在堆中,又因为数组特性,是连续的,只有C不对 13.下列哪个修饰符可以使在一个类中定义的成员变量只能被同一包中的类访问？A.privateB.无修饰符C.publicD.protected 答案：B 解析： 14.关于以下程序代码的说明正确的是?12345678910111213141516public class HasStatic &#123; private static int x &#x3D; 100; public static void main(String args[]) &#123; HasStatic hs1 &#x3D; new HasStatic(); hs1.x++; HasStatic hs2 &#x3D; new HasStatic(); hs2.x++; hs1 &#x3D; new HasStatic(); ; hs1.x++; HasStatic.x--; System.out.println(&quot;x&#x3D;&quot; + x); &#125;&#125; A.程序通过编译，输出结果为：x=103B.10行不能通过编译，因为x是私有静态变量C.5行不能通过编译，因为引用了私有静态变量D.程序通过编译，输出结果为：x=102 答案：D 解析：此题选择D。首先要了解static的意思。 static表示“全局”或者“静态”的意思，用来修饰成员变量和成员方法，也可以形成静态static代码块，但是Java语言中没有全局变量的概念。static变量在第一次使用的时候初始化，但只会有一份成员对象。所以这里不仅可以调用，而且每一次调用都确实修改了x的值，也就是变化情况是这样的：x=101x=102x=103x=102 15.如何放掉一个指定占据的内存空间？（）A.调用free()方法B.代用system.gc()方法C.赋值给该项对象的引用为nullD.程序员无法明确强制垃圾回收器运行 答案：D 解析：在《java虚拟机》一书中明确讲了，释放掉占据的内存空间是由gc完成，但是程序员无法明确强制其运行，该空间在不被引用的时候不一定会立即被释放，这取决于GC本身，无法由程序员通过代码控制。 16.一般情况下，以下哪个选项不是关系数据模型与对象模型之间匹配关系？A.表对应类B.记录对应对象C.表的字段对应类的属性D.表之间的参考关系对应类之间的依赖关系 答案：D 解析：一般关系数据模型和对象数据模型之间有以下对应关系：表对应类，记录对应对象，表的字段对应类的属性 17.下列关于Java并发的说法中正确的是（）A.CopyOnWriteArrayList适用于写多读少的并发场景B.ReadWriteLock适用于读多写少的并发场景C.ConcurrentHashMap的写操作不需要加锁，读操作需要加锁D.只要在定义int类型的成员变量i的时候加上volatile关键字，那么多线程并发执行i++这样的操作的时候就是线程安全的了 答案：B 解析：A，CopyOnWriteArrayList适用于写少读多的并发场景B，ReadWriteLock即为读写锁，他要求写与写之间互斥，读与写之间互斥，读与读之间可以并发执行。在读多写少的情况下可以提高效率C，ConcurrentHashMap是同步的HashMap，读写都加锁D，volatile只保证多线程操作的可见性，不保证原子性 18.以下代码执行后输出结果为（ ）123456789101112131415public class Test&#123; public static Test t1 &#x3D; new Test(); &#123; System.out.println(&quot;blockA&quot;); &#125; static &#123; System.out.println(&quot;blockB&quot;); &#125; public static void main(String[] args) &#123; Test t2 &#x3D; new Test(); &#125; &#125; A.blockAblockBblockAB.blockAblockAblockBC.blockBblockBblockAD.blockBblockAblockB 答案：A 解析：静态块：用static申明，JVM加载类时执行，仅执行一次构造块：类中直接用{}定义，每一次创建对象时执行执行顺序优先级：静态块&gt;main()&gt;构造块&gt;构造方法 静态块按照申明顺序执行，先执行Test t1 = new Test();所有先输出blockA，然后执行静态块，输出blockB，最后执行main方法中的Test t2 = new Test();输出blockA。 19.有关hashMap跟hashTable的区别，说法正确的是？A.HashMap和Hashtable都实现了Map接口B.HashMap是非synchronized，而Hashtable是synchronizedC.HashTable使用Enumeration，HashMap使用IteratorD.HashMap允许将 null 作为一个 entry 的 key 或者 value，而 Hashtable 不允许。 答案：ABCD 解析： A正确。Map是一个接口，hashtable,hashmap都是它的实现。B正确。由于Hashtable是线程安全的也是synchronized，所以在单线程环境下它比HashMap要慢。如果你不需要同步，只需要单一线程，那么使用HashMap性能要好过Hashtable。C正确。HashMap的迭代器(Iterator)是fail-fast迭代器，而Hashtable的enumerator迭代器不是fail-fast的。所以当有其它线程改变了HashMap的结构（增加或者移除元素），将会抛出ConcurrentModificationException，但迭代器本身的remove()方法移除元素则不会抛出ConcurrentModificationException异常。但这并不是一个一定发生的行为，要看JVM。这条同样也是Enumeration和Iterator的区别。D正确。 哈希值的使用不同，HashTable直接使用对象的hashCode，代码是这样的： 12int hash &#x3D; key.hashCode();int index &#x3D; (hash &amp; 0x7FFFFFFF) % tab.length; 而HashMap重新计算hash值，而且用与代替求模：int hash = hash(k);int i = indexFor(hash, table.length); 20.以下可以正确获取结果集的有?A.Statement sta=con.createStatement();ResultSet rst=sta.executeQuery(“select * from book”); B.Statement sta=con.createStatement(“select * from book”); ResultSet rst=sta.executeQuery(); C.PreparedStatement pst=con.prepareStatement();ResultSet rst=pst.executeQuery(“select * from book”); D.PreparedStatement pst=con.prepareStatement(“select * from book”);ResultSet rst=pst.executeQuery(); 答案：A D 解析：A,D是正确的；创建Statement是不传参的，PreparedStatement是需要传入sql语句说一下preparedStatement和statement的区别与联系：在JDBC应用中,如果你已经是稍有水平开发者,你就应该始终以PreparedStatement代替Statement.也就是说,在任何时候都不要使用Statement。PreparedStatement 接口继承 Statement,PreparedStatement 实例包含已编译的 SQL 语句,所以其执行速度要快于Statement对象。Statement为一条Sql语句生成执行计划，如果要执行两条sql语句select colume from table where colume=1;select colume from table where colume=2; 会生成两个执行计划一千个查询就生成一千个执行计划！ PreparedStatement用于使用绑定变量重用执行计划 select colume from table where colume=:x; 通过set不同数据只需要生成一次执行计划，可以重用 推荐笔试内容集合 持续更新中…. 文末 欢迎关注个人微信公众号：Coder编程获取最新原创技术文章和免费学习资料，更有大量精品思维导图、面试资料、PMP备考资料等你来领，方便你随时随地学习技术知识！ 文章收录至Github: https://github.com/CoderMerlin/coder-programmingGitee: https://gitee.com/573059382/coder-programming欢迎关注并star~","categories":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/categories/Java/"},{"name":"笔试","slug":"笔试","permalink":"http://yoursite.com/categories/%E7%AC%94%E8%AF%95/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/tags/Java/"},{"name":"笔试","slug":"笔试","permalink":"http://yoursite.com/tags/%E7%AC%94%E8%AF%95/"}]},{"title":"Java基础笔试练习（一）","slug":"interview/java/B-bishi01","date":"2019-09-11T12:06:09.000Z","updated":"2019-09-11T12:06:09.000Z","comments":true,"path":"2019/09/11/interview/java/B-bishi01/","link":"","permalink":"http://yoursite.com/2019/09/11/interview/java/B-bishi01/","excerpt":"","text":"每天进步一点，不做curd工程师与Api调用工程师欢迎访问个人网站：https://www.coder-programming.cn/ 1. 若在某一个类定义中定义有如下的方法： abstract void performDial( ); 该方法属于（） ?A.本地方法B.最终方法C.静态方法D.抽象方法 答案： D 解析： 本地方法：简单地讲，一个native Method就是一个java调用非java代码的接口；native方法表示该方法要用另外一种依赖平台的编程语言实现。 最终方法：final void B(){},这样定义的方法就是最终方法，最终方法在子类中不可以被重写，也就是说，如果有个子类继承了这个最终方法所在的类，那么这个子类中不能出现void B(){}这样的方法。 最终类：final class A {},这样定义的类就是最终类，最终类不能被继承。 abstract修饰抽象类 2.在为传统面向对象语言的程序做单元测试的时候,经常用到mock对象。Mock对象通过反射数。请问反射最大程度破坏了面向对象的以下哪个特性？A.封装B.多态C.继承D.抽象 答案： A 解析：A.封装反射破坏代码的封装性，破坏原有的访问修饰符访问限制 3.以下程序的执行结果是：123456789101112static boolean foo(char c) &#123; System.out.print(c); return true; &#125;public static void main1(String[] args) &#123; int i &#x3D; 0; for (foo(&#39;A&#39;); foo(&#39;B&#39;) &amp;&amp; (i &lt; 2); foo(&#39;C&#39;)) &#123; i++; foo(&#39;D&#39;); &#125;&#125; A.ABDCBDCBB.ABCDABCDC.编译时出错D.运行时抛出异常 答案：A 解析：略，代码敲一遍就知道了= =！ 一个完整的URL地址由(),(),端口和文件四部分组成。 A.协议 用户名B.协议 主机名C.主机名 ipD.以上都不正确 答案：B 解析：URL(Uniform Resource Locator) *，统一资源定位符，能够对因特网的资源进行定位。*URL一般有四部分组成： &lt;协议&gt;://&lt;主机&gt;:&lt;端口&gt;/&lt;路径&gt; 现在最常用的&lt;协议&gt;为http协议。 &lt;主机&gt;是指主机在因特网上的域名。 http协议的默认&lt;端口&gt;为80（可以省略）。 &lt;路径&gt;是指要活的的文件的路径。 5.以下程序的输出结果是？1234567891011121314151617public class Example &#123; String str &#x3D; new String(&quot;good&quot;); char[] ch &#x3D; &#123; &#39;a&#39;, &#39;b&#39;, &#39;c&#39; &#125;; public static void main(String args[]) &#123; Example ex &#x3D; new Example(); ex.change(ex.str, ex.ch); System.out.print(ex.str + &quot; and &quot;); System.out.print(ex.ch); &#125; public static void change(String str, char ch[]) &#123; str &#x3D; &quot;test ok&quot;; ch[0] &#x3D; &#39;g&#39;; &#125;&#125; A.good and abcB.good and gbcC.test ok and abcD.test ok and gbc 答案：B 解析：考察值传递和引用传递。对于值传递，拷贝的值用完之后就会被释放，对原值没有任何影响，但是对于引用传递，拷贝的是对象的引用，和原值指向的同一块地址，即操作的是同一个对象，所以操作之间会相互影响所以对于String str是值传递，操作之间互不影响，原值保持不变。而ch是数组，拷贝的是对象的引用，值发生了改变，因此选择B 6.下面有关servlet service描述错误的是？A.不管是post还是get方法提交过来的连接，都会在service中处理B.doGet/doPost 则是在 javax.servlet.GenericServlet 中实现的C.service()是在javax.servlet.Servlet接口中定义的D.service判断请求类型，决定是调用doGet还是doPost方法 答案：B 解析：doGet/doPost 则是在 javax.servlet.http.HttpServlet 中实现的 7.以下代码运行输出的是1234567891011public class Person&#123; private String name &#x3D; &quot;Person&quot;; int age&#x3D;0;&#125;public class Child extends Person&#123; public String grade; public static void main(String[] args)&#123; Person p &#x3D; new Child(); System.out.println(p.name); &#125;&#125; A.输出：PersonB.没有输出C.编译出错D.运行出错 答案：C 解析：Java中对字段属性是静态绑定，方法成员是动态绑定，这里错在：在子类中试图访问父类的private字段，所以编译不通过，将private去掉就可访问，不是动态绑定的问题，它本来就属于静态绑定。 8. 在 myjsp.jsp 中，关于下面的代码说法错误的是： ( )&lt;%@ page language=”java” import=”java.util.*” errorPage=”error.jsp” isErrorPage=”false” %&gt; A.该页面可以使用 exception 对象B.该页面发生异常会转向 error.jspC.存在 errorPage 属性时，isErrorPage 是默认为 falseD.error.jsp 页面一定要有isErrorPage 属性且值为 true 答案：A 解析：exception是JSP九大内置对象之一，其实例代表其他页面的异常和错误。只有当页面是错误处理页面时，即isErroePage为true时，该对象才可以使用。对于C项，errorPage的实质就是JSP的异常处理机制,发生异常时才会跳转到errorPage指定的页面，没必要给errorPage再设置一个errorPage。所以当errorPage属性存在时， isErrorPage属性值为false 9.Java对象的初始化方式有（ ）A.初始化块B.构造器C.定义变量时指定初始化值D.其它各项都不对 答案：A B C 解析： 对象的初始化方式：1.new时初始化 ；2.静态工厂 newInstance；3.反射Class.forName()；4.clone方式；5.反序列化； 推荐Java笔试内容集合 持续更新中…. 文末 欢迎关注个人微信公众号：Coder编程获取最新原创技术文章和免费学习资料，更有大量精品思维导图、面试资料、PMP备考资料等你来领，方便你随时随地学习技术知识！ 文章收录至Github: https://github.com/CoderMerlin/coder-programmingGitee: https://gitee.com/573059382/coder-programming欢迎关注并star~","categories":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/categories/Java/"},{"name":"笔试","slug":"笔试","permalink":"http://yoursite.com/categories/%E7%AC%94%E8%AF%95/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/tags/Java/"},{"name":"笔试","slug":"笔试","permalink":"http://yoursite.com/tags/%E7%AC%94%E8%AF%95/"}]},{"title":"PMP备考指南之第二章：项目运作环境","slug":"pmp/PMP03","date":"2019-04-24T00:30:00.000Z","updated":"2019-04-24T00:30:00.000Z","comments":true,"path":"2019/04/24/pmp/PMP03/","link":"","permalink":"http://yoursite.com/2019/04/24/pmp/PMP03/","excerpt":"","text":"每天进步一点，不做curd工程师与Api调用工程师欢迎关注个人博客网站：https://www.coder-programming.cn/ 本文已同步至 GitHub/Gitee/公众号，感兴趣的同学帮忙点波关注~ 第二章：项目运作环境1. 事业环境因素、组织过程资产事业环境因素 Enterprise Environmental Factors:是项目团队不能控制的，将对项目产生影响、限制或指令作用的各种条件。可能提高或限制项目管理的灵活性，也可能对项目结果产生积极或消极影响。包括： 1）组织文化、结构和治理；2）设施和资源的地理分布；3）基础设施：现有设施、设备、组织通讯渠道、IT 硬件、可用性和性能等4）信息技术软件：进度计划软件工具、配置管理系统、其他在线自动化系统的网络接口、工作授权系统等5）资源可用性：合同和采购制约因素、已批准的供应商、分包商和合作协议等）6）员工能力：现有人力资源的专业知识、技能、能力和特定知识 （以上6条来自组织内部） 7）市场条件：竞争者、市场份额、品牌认知、商标等8）社会和文化影响与问题：政治氛围、行为规范、道德、观念等9）法律限制：与安全、数据保护、商业行为、雇佣与采购等有关的国家和地方法律法规10）商业数据库：标杆对照结果、标准化的成本估算数据、行业风险研究信息、风险数据库等11）学术研究：行业研究、出版物、标杆对照结果等12）政府或行业标准：与产品、生产、环境、质量、工艺等有关的监管机构法规和标准13）财务考虑因素：货币汇率、利率、通货膨胀率、关税、地理位置等14）物理环境因素：工作条件、天气、制约因素等 （以上 8 条来自组织外部 ） 2. 组织文化与风格（内部的事业环境因素） 文化与风格是经过长期积淀而形成的群体现象，组织文化由组织成员的共同经验积淀而成。 共同的愿景、使命、价值观、信念和期望； 规章、政策、方法和程序； 对领导力、层级体系和职权关系的看法； 行为准则、职业道德； 风险承受力； 运营环境等等。 事业环境因素 ： 有来自组织内的、也有组织外的，都是项目团队不能控制、无法避免的。 3. 组织过程资产一定是组织内部的。组织过程资产是执行组织所特有并使用的计划、流程、政策、程序和知识库，包括来自任何项目参与组织的，可用于执行或治理项目的任何产物、实践或知识。 包括两大类： 过程、政策与程序（通常由 PMO 更新） 组织知识库（通常由项目更新）。 3.1 过程、政策与程序组织用于执行工作的流程与程序。 3.1.1 启动和规划：1）指南和标准，用于裁剪的标准流程和程序以满足项目的特定要求2）特定的组织标准，例如各种政策（如 HR、HSE、安保与保密、质量、采购和环境等政策）3）产品和项目生命周期、方法与程序（如项目管理方法、评估指标、过程审计、改进目标、核对单、组织内使用的标准化的过程定义等）4）模板（如项目管理计划、项目文件、项目登记册、报告格式、合同模板、风险分类、风险描述模板、概率与影响定义、概率和影响矩阵、以及干系人登记册模板等）5） 预先批准的供应商清单和各种合同协议类型（如总价合同、成本补偿合同和工料合同） 3.1.2 执行和监控：1） 变更控制程序2） 风险控制程序3） 跟踪矩阵4） 财务控制程序5） 问题与缺陷管理程序6） 资源的可用性控制和分配管理7） 组织对沟通的要求8） 确定工作优先顺序、批准工作与签发工作授权的程序9）模板（如风险登记册、问题日志和变更日志）10）标准化的指南、工作指示、建议书评价准则和绩效测量准11）产品、服务或成果的核实和确认程序 3.1.3 收尾项目收尾指南和要求（如项目终期审计、项目评价、可交付成果验收、合同收尾、资源分配，以及向生产和（或）运营部门转移知识等） 3.2 组织知识库组织用来存取信息的知识库。 包括：1）配置管理知识库；2）财务数据库；3）历史信息与经验教训知识库；（项目收尾时，要总结经验教训、更新组织过程资产，供将来的项目参考。这是考点）4）问题与缺陷管理数据库；5）测量指标数据库；6）以往项目的项目档案； 4. 如何区分组织过程资产和事业环境因素？第 1，是组织内部的还是外部的，如果是外部的，一定是事业环境因素；如果是组织内部，可能是组织过程资产，也可能是事业环境因素。第 2，项目经理是否可以选择，组织过程资产是可以选择用或不用；事业环境因素是不容项目经理选择的。第 3，以“程序”结尾的词大多是组织过程资产；以“系统”结尾的词大多是事业环境因素 5.组织结构组织结构/组织形式定义：人员的职责、权限和相互关系的安排；是一种事业环境因素。可能影响人力资源的可用性和项目的执行方式。三大类：职能型、矩阵型（弱矩阵、平衡矩阵、强矩阵）、项目导向型，所以一共是五种组织结构。五种组织结构我们一个个介绍： 5.1 职能型组织 职能经理就是部门经理角色，职能经理掌握人员绩效、完全掌握项目预算。pm 是兼职，pm极小或没有权力。 职能型组织 优点：员工只有一个上级、单线沟通、职责分工明确。职能型组织 缺点：跨部门沟通困难，部门利益高于项目，员工以自己的本职工作为重点，妨碍客户参与项目，因此对项目的反应速度特别慢。 5.2 弱矩阵型组织 pm 权力小于职能经理比起职能型组织，弱矩阵的优点：加强了部门间沟通.pm 是项目联络员或协调员。 项目联络员和协调员有区别：项目联络员：联络沟通作用，没有权力，需要职能经理做决定。项目协调员：有一定的决策权、可以向高层经理汇报,打小报告。所以两者最大的区别在于：是否能够做决策。职能经理完全掌握预算，pm 是兼职 5.3 平衡矩阵组织 PM 权力几乎等于职能经理 优点：资源使用效率高 缺点：员工要听 2 个领导pm 和职能经理共同掌握预算，pm 兼职。平衡矩阵可以叫项目经理了，弱矩阵和职能型里叫项目协调员或项目联络员。缺省组织架构：如果 pmp 考试中，题目没有特别声明是什么组织类型，就默认是平衡矩阵。 5.4 强矩阵组织 pm 拥有中到高的权力。强矩阵型组织中，PM 和项目管理行政人员都是全职，并且拥有全权管理项目预算的权力。这是强矩阵组织和职能型、弱矩阵、平衡矩阵最大的不同。 PM 的汇报上级不再是职能经理，而是项目经理的经理。 矩阵式组织：优点：兼顾项目与职能工作，资源使用率更高，比职能型组织部门间沟通更好缺点：一个员工有 2 个汇报对象（pm 和职能经理），沟通复杂。 5.5 项目型组织 Pm 拥有高到几乎全部的职权，对预算完全掌握，pm 和项目管理行政人员都是全职。优点：pm 权力充分，团队职责清晰，沟通容易，对项目的反应速度非常快。缺点：员工缺乏归属感、缺乏事业的连续性和保障，资源配置重复使用效率低。 三大类组织结构总结如下： 1）职能型：适合专业技能单一、在部门内开展简单项目活动；2）矩阵型：适合跨部门、跨专业的项目，提高资源的使用效率；3）项目型：适合项目难度高、风险大，需要团队全身心投入，pm 最大限度的掌握项目资源。 项目管理办公室（ Project Management Office ， PMO ）1、定义：是对与项目相关的治理过程进行标准化，并促进资源、方法论、工具和技术共享的一个组织部门。2、按照对项目控制权力的大小来分，支持型、控制型、指令型。PMO的职责范围可大可小，从提供项目管理支持服务，到直接管理一个或多个项目。 1）支持型：担当顾问角色，为各位项目经理提供项目模板、最佳实践、培训、经验教训等资源支持，权力很小，打打酱油玩的 PMO。 2）控制型：PMO 权力居中 3）指令型：直接管理和控制项目，控制权力最大的是指令型。 3、PM 和 PMO 角色差异：PM——Project Manager 项目经理PMO——Project Management Office 项目管理办公室1）项目经理关注特定的项目目标（单个项目），PMO 关注项目集（多个项目）范围的变更；2）项目经理控制分配给本项目资源，PMO 优化利用所有项目所共享的组织资源；3）项目经理管理单个项目的制约因素（范围、进度、成本、质量等），PMO 站在企业的高度对方法论、标准、整体风险/机会、测量指标和项目间的依赖关系进行管理。从以上总结的三点我们能感觉出来 PMO 是 PM 的上级领导。 6. 练习题一个项目经理刚接手一个新项目，该项目和他以前做过的一个项目类似。为了借鉴以前项目的经验，他应该先查看哪份文件？ A、项目章程B、项目管理计划C、历史信息D、合同 参考答案：C。为了借鉴项目的经验，应该查看历史信息。历史信息属于组织过程资产，里面有以往项目的成功经验与失败教训。 发起人因费用超标要终止项目，关键干系人不同意，关键干系人认为项目不能仅仅用钱衡量。项目经理需要做一个经验教训总结报告，该文件属于以下哪一项？ A、组织过程资产B、项目管理计划C、风险管理计划D、事业环境因素 参考答案：A。经验教训总结报告存档在组织过程资产中。 在实施一个新的 it 系统后，公司遭遇持续不满。项目经理应该做什么来改进未来类似项目的满意度？ A.建立一个通用的软件模块代码库B.确保更新项目管理信息系统（pmis）数据并可用C.安排一次与公司其他项目经理的会议D.创建一个经验教训知识库 答案：D。要改进未来项目的满意度，需要参考过去的成功经验和失败的教训。组织过程资产的价值 某公司建立了一个项目管理办公室，用于协调和管理其众多项目。公司的 PMO 提出了一个具体的项目组织结构建议，并作为标准在全公司实施。该组织结构特点是设置了享有中高级权力（包括控制项目预算）的全职项目经理和全职管理人员。该 PMO 提出了何种组织结构？ A、 强矩阵B、 弱矩阵C、 项目型D、 职能型 答案：A。中高级权力的 PM，管理人员是全职，这是强矩阵组织结构。 很小或没有职权的项目经理属于下列哪一种组织类型组成部分？ A、 弱矩阵B、 职能型C、 强矩阵D、 平衡矩阵 答案：B。很小或没有权力的 PM 是职能型。 你在不同文化、不同部门间，负责一个项目，请问在什么组织类型中？ A、项目型B、职能型C、矩阵型D、完全项目型 答案：C。矩阵型：适合跨部门、跨专业的项目，提高资源的使用效率； 关注公众号，随时随地获取编程知识，面试题，PMP等相关资料","categories":[{"name":"PMP","slug":"PMP","permalink":"http://yoursite.com/categories/PMP/"}],"tags":[{"name":"PMP","slug":"PMP","permalink":"http://yoursite.com/tags/PMP/"}]},{"title":"PMP备考指南之第一章：引论","slug":"pmp/PMP02","date":"2019-04-23T00:30:00.000Z","updated":"2019-04-23T00:30:00.000Z","comments":true,"path":"2019/04/23/pmp/PMP02/","link":"","permalink":"http://yoursite.com/2019/04/23/pmp/PMP02/","excerpt":"","text":"每天进步一点，不做curd工程师与Api调用工程师欢迎关注个人博客网站：https://www.coder-programming.cn/ 本文已同步至 GitHub/Gitee/公众号，感兴趣的同学帮忙点波关注~ 第一章 引论1、“项目管理知识体系”：应该包含所有行业、应用领域项目管理的具体知识、技能、方法和实践。2、我们发的这本巨厚的书叫“项目管理知识体系指南”简称“PMBOK 指南”，PMBOK 指南的目的： 收录项目管理知识体系中被“普遍公认”的“良好做法”的那一部分。 形成的一个项目管理标准和框架，提供一套项目管理专业的通用词汇；适用于所有领域、行业的项目管理。 标准实践中可以加以选择和裁剪； PMBOK 指南只讨论单个项目的管理 PMBOK 指南只讨论项目管理的共性 它是一套项目管理的指南，并不是具体的方法论。 1. 什么是项目？项目是：为创造独特的产品、服务或成果而进行的临时性工作。 pmbok 告诉我们项目有三大特性：临时性、独特性、渐进明细。 1）项目的过程是临时的，但临时并不意味着时间短。比如：修建体育场鸟巢是个项目，这个项目用了好几年时间，这个时间很长。过程是临时的，指的是项目有明确的起点和终点，起点是立项的时候。终点是： 目标达成（正常收尾） 不能达到目标项目终止（有可能是没钱了） 项目需求不复存在 客户或发起人希望终止等等 2）结果的独特性：项目创造的可交付成果是独特的，所以导致项目的不确定性和风险。项目创造出来的结果，PMBOK 里叫做可交付成果。可交付成果：可以是有形的产品，也可以是无形的服务能力、知识。比如：咱们参加PMP 培训这是一个项目，参加考试后得到的 PMP 的培训证书这是有形的产品，所掌握的项目管理知识这是无形的。这些都是可交付成果。 3）渐进明细：项目的计划不可能一步到位，随着项目的进展信息越来越详细具体、估算越来越准确，而持续改进和细化计划。由于可能发生变化，应该在整个项目生命周期中，反复开展制定项目管理计划工作，对计划进行渐进明细。 1.1 商业价值是指组织所从事业务的整体价值，包括全部的有形和无形价值。 1）有形价值包括：货币资产、固定设施、股东权益、物品器材等 2）无形价值包括：商誉、品牌认知度、公共利益、商标等 对持续运营的有效管理可以创造商业价值。对项目的投资可以提升创造商业价值的能力。 2. 什么是项目管理？ 项目管理是将知识、技能、工具与技术应用于项目活动，以满足项目的要求。项目管理通过合理运用和整合 49 个项目管理过程得以实现。 49个项目管理过程归类于五大过程组：启动、规划、执行、监控、收尾。项目可能各种各样，但是项目管理的过程和过程组是通用的。 项目管理需要满足并平衡相互制约的多重因素，比如：范围、质量、进度、预算、资源、风险。 2.1 项目集管理、项目组合管理： 项目集：是一组相互关联且被协调管理的项目、子项目集和项目集活动。项目集重点关注项目间的依赖关系，找到管理这些依赖关系的最佳方法。比如：参加英文培训+大学英语考试 CET 四六级、托福、雅思考试。这是一组项目集。互相有关联性都是英语培训考试、有依赖关系。 项目组合：是为了实现战略目标组合在一起管理的项目、项目集、子项目组合和运营工作。为实现战略目标或便于管理而组合在一起的项目，不一定彼此有依赖关系或直接相关，但可共享资源、供应商、技术等，关注资源的优先分配。比如：周杰伦自己的本行是歌手，应该唱歌开演唱会，但是现在还做一些与本行没有关系的事，开餐厅、卖古董、开健身房等等，这些事不一定直接相关，但它是关注资源（周杰伦的钱）的优先分配，到底钱先用来开餐厅还是开健身房？并且共享了周杰伦这位共同的雇主。 项目集、项目组合和项目之间的关系：项目组合中可以包含若干项目集或项目，项目集可以包含若干项目。 3. 项目与战略规划项目是组织实现战略目标的常用手段。这句话的意思是说做任何一个项目，都要和组织的战略目标保持一致，如果和战略目标不一致，这个项目也就没有存在的意义。 出于以下战略考虑来批准项目： 市场需求 战略机会/业务需求 社会需要 环境考虑 客户要求 技术进步 法律要求 3.1 项目与运营运营是支撑日常业务，实现业务战略和战术目标的手段。运营的特性：持续性、重复性。项目的特性：临时性、独特性。 运营的目标是为了维持经营，运营工作中会产生项目需求，某些运营无法实现的结果需要通过项目的方式实现；项目的结果可能回到运营中去，变成日常工作内容。因此，项目经理在项目中需要充分考虑来自运营部门的干系人的需求。项目的目标是实现其目标，然后结束项目。 3.2 项目生命周期1 、定义：项目生命周期是指从启动到收尾的一系列阶段，这些阶段通常按顺序排列，阶段通常有时间限制，每一个阶段都是一个子项目，有明确的起点和终点。 通用的项目生命周期结构： 启动项目（概念阶段） 组织与准备（开发/规划阶段） 执行项目工作（实施阶段） 结束项目（收尾阶段） 需要定义多少个阶段，和管理控制要求有关。如果希望管控的更严密些，则可以多定义一些阶段；反之则可以少一些。阶段，是从技术角度来划分的；过程组，从管理的角度来划分项目。既然每一个阶段都是一个子项目，那么就意味着每一个阶段都包括了五大过程组（启动、规划、执行、监控、收尾）。 ​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​ 3.3 项目生命周期的特征：​​​​​​​​​​​​​​​​​​​​​​ 1）成本与人力投入开始时低，执行期间最高，项目收尾结束时迅速回落； 2）项目的风险与不确定性、干系人的影响力，开始最大，逐步减小；项目一开始风险是最大的，因为一开始一切都是未知，随着项目进行中，项目渐进明细，风险和不确定性慢慢减小。干系人影响力一开始最大，产品最初只有雏形干系人很轻易的可以改变它，随着项目进展产品逐步有了明确特性，干系人如果要改变它是很困难的，变更的代价非常高，因此干系人的影响力是减小的。 3）变更的代价，开始时最小，项目收尾时最大。因为随着项目的进行成本投入越来越多，变更付出的代价也会越来越大。 3 、阶段与阶段的关系：1）阶段按顺序进行，一个阶段只能在前一阶段完成后开始，称为“顺序关系”。按部就班的特点减少了项目的不确定性，但也排除缩短项目总工期的可能性。 2）为缩短项目工期，一个阶段在前一个阶段完成前开始，称为“交叠关系”。这种做法可能需要额外的资源来并行开展工作，可能增加风险和返工的机会。阶段的结束，以阶段性可交付成果的移交为标志，阶段结束时间点可称为：里程碑、阶段关口、阶段审查、阶段门、关键决策点。 3.4 五种类型的生命周期：1）预测型生命周期：也叫完全计划型，一个阶段一个阶段的按部就班执行，适用于对项目结果了解很充分的项目。 先做需求分析，再做概要设计、详细设计、然后编码、测试、最后发布，按照计划去做，基本没有变更。 2）迭代型生命周期：通过一系列重复的循环活动、来不断优化产品功能。比如：磨刀，每一轮迭代都要把刀磨的更加锋利。 3）增量型生命周期：在预定的时间内渐进地增加产品的功能。例如：开发多功能洗衣机，第一个阶段开发出一个功能（漂洗），第二个阶段开发出第二个功能（甩干），第三个阶段开发出第三个功能（烘干）。 4）适应型生命周期（也叫变更驱动、敏捷方法）：迭代型和增量型的混合。最终目标和交付的成果也难以事先确定，管理过程也经常有变化,需要应对快速变化的环境。例如：秘书为领导写稿，秘书先根据领导的最初要求写出第一个版本的草稿（可交付成果）。领导看了以后提出意见（新的需求），秘书再根据意见写出第二个草稿（可交付成果），交给领导查看。如此多次迭代，直到写出让领导满意的稿子。相当于一边提需求，一边交付。 5）混合型生命周期：瀑布与敏捷的混合，充分了解或有确定需求的项目要素遵循预测型开发生命周期，而仍在发展中的要素遵循适应型开发生命周期。例如：硬件部分用预测型，软件部分用适应型。 3.5 项目管理过程1、过程是为创建预定的产品、服务或成果而执行的一系列相互关联的行动和活动。过程将会是以后我们面对 PMP 讲义主要内容，组织过程资产和事业环境因素即使没有列出也需要参考。事业环境因素（EEFs）限制项目的灵活性，组织过程资产（OPAs）为裁剪过程提供指南和准则。 2、过程由输入、工具与技术、输出三部分构成 Input 输入Tools &amp; Technique 工具与技术Output 输出 输入、工具与技术、输出简称为 ITTOI 输入，需要什么？TT 用什么方法和手段？O 输出，产生什么？ 比如：制作红茶的过程；输入：茶叶、水等；工具与技术：发酵、加热、烹、煮；输出：红茶。 3、PMI 把项目管理分为 49 个过程；那么这 49 个过程间是怎么样联系的呢？ 一个过程的输出会成为另一个过程的输入。比如我们刚才讲的例子，制作红茶的过程。输出是：红茶。对于另一个过程“制作珍珠奶茶”，此时“红茶”又作为输入了。 输入：红茶、珍珠、水工具与技术：混合搅拌、煮输出：珍珠奶茶 这是制作珍珠奶茶的过程。 49个项目管理过程被分在5大过程组中，启动、规划、执行、监控、收 尾。PMP学习重点将围绕这49个过程的ITTO展开。 49 个项目管理过程被分在 5 大过程组中，启动、规划、执行、监控、收尾。PMP学习重点将围绕这 49 个过程的 ITTO 展开。 1 ）启动过程组： 定义一个新项目或一个新阶段；过程组目的：保证干系人期望与项目目的的一致性，让干系人明了项目范围和目标，明白他们在项目和阶段中的参与，实现他们的期望。 启动过程组的两个过程：识别干系人、制定项目章程。 识别干系人：是要识别他们的参与度、期望、影响力以及对项目成功的影响。 制定项目章程：一般由项目经理编写，项目管理团队协助编写。由发起人、PMO 或项目组合治理委员会等公司高层领导来批准。一旦项目章程获得批准，项目也就得到了正式的授权。 2 ）规划过程组 明确项目范围，为实现目标制定行动方案；过程组目的：制定用于指导项目实施的项目管理计划和项目文件。过程组作用：为成功完成项目或阶段确定战略、战术及行动方案及路线。随着收集和掌握的项目信息或特性不断增多，以及发生的重大变更，项目可能需要进一步规划。项目管理计划的逐渐细化叫“渐进明细”，表明项目规划和文档编制是反复进行的秩序性活动。在规划项目、制定项目管理计划和项目文件时，项目团队应当征求所有干系人的意见，鼓励所有干系人的参与。 3）执行过程组 完成项目管理计划中确定的工作，满足项目规范要求；过程组需要：按照项目管理计划来协调人员与资源，管理干系人期望，以及整合并实施项目活动。执行的结果可能引发计划更新和基准重建，执行的偏差可能影响项目管理计划或项目文件，需要加以仔细分析，并制定适当的管理应对措施。项目的大部分预算将花费在执行过程组中。 4）监控过程组 跟踪、审查和调整项目进展与绩效，启动有必要的变更；过程组作用：定期对项目绩效进行测量和分析，从而识别与项目管理计划的偏差。控制变更，推荐纠正措施、制定预防措施等等。 5）收尾过程组 完结所有过程组的活动，正式结束项目或阶段。 逻辑上五个过程组是按顺序进行的，但实际上有交叉部分，监控过程组贯穿整个生命周期。阶段是从技术角度来分解项目；过程是从管理角度来分解项目。 4. 十五矩阵把 49 个项目管理过程归入十大项目管理知识领域和五大项目管理过程组。 1、最左边，纵向按照十大知识领域：项目整合管理、项目范围管理、项目时间管理、项目成本管理、项目质量管理、项目资源管理、项目沟通管理、项目风险管理、项目采购管理、项目干系人管理； 在 pmbok 第六版当中第 13 章叫相关方管理，但是考虑到干系人这个词在项目管理界用了10 多年，我们依然认为 “ 干系人 ” 更加的专业，仍然把 13 章叫做干系人管理，特此声明 第四章 项目整合管理：协调子计划的接口管理；第五章 项目范围管理：确定项目哪些工作该做、哪些不该做；第六章 项目进度管理：确保项目工作按时完成；第七章 项目成本管理：确保项目工作按照预算完成；第八章 项目质量管理：确保项目工作到达要求；第九章 项目资源管理：做好实物资源和项目团队的管理；第十章 项目沟通管理：有团队就需要沟通，做好沟通管理；第十一章 项目风险管理：项目有不确定的、有可能发生的事件，做好风险管理；第十二章 项目采购管理：有些工作自己不能做需要外包，做好采购管理；第十三章 项目干系人管理：项目是满足干系人的要求，做好干系人管理。 2、最上方，横向按照项目管理过程五大过程组：启动过程组、规划过程组、执行过程组、监控过程组、收尾过程组；右边，灰色和白色填充处一共 49 个过程，是以后学习 PMP 理论的重点内容； 3、第四章项目整合管理知识领域包含:4.1 制定项目章程、4.2 制定项目管理计划、4.3 指导与管理项目执行、4.4 管理项目知识、4.5 监控项目工作、4.6 实施整体变更控制、4.7 结束项目或阶段 7 个过程。 4.1 制定项目章程过程属于启动过程组4.2 制定项目管理计划过程属于规划过程组4.3 指导与管理项目执行过程、4.4 管理项目知识，两个过程属于执行过程组4.5 监控项目工作、4.6 实施整体变更控制，两个过程属于监控过程组4.7 结束项目或阶段过程属于收尾过程组 以此类推，一共有 49 个过程。可以看出之所以叫十五矩阵，是因为“十”十大知识领域，“五”五大过程组。之后的章节我们将围绕49个过程和过程的输入、工具与技术、输出展开。49个过程必须熟悉，要知道他们分别属于哪个知识领域，他们分别属于哪个过程组 5. 练习题公司里面有 A、B、C 三个项目。这些项目根据公司的目标，按照一套相同的标准化分优先顺序。项目 B 的优先级较高，因为它将会扩大公司的市场份额，减少对不可靠供应商的依赖性。这是在执行什么活动？ A、 项目组合管理B、 项目集管理C、 项目管理D、 份额管理 答案：A。题干说：关注资源的优先分配、减少依赖性。这是关键词 某个技术重组项目的计划处于计划编制阶段已经数月，在此期间，这项技术已得到显著的进步。这项目预计在这个月开始，而且必须更新范围管理计划来反映技术上的变化。项目经理必须向关键干系人详细说明项目范围存在的可能变更。项目经理理解项目的不确定性水平将会处于下列哪一种情况？ A、保持在预计和计划水平B、增加C、开始是增加，然后减少D、减少 答案：D。项目一开始风险最大，因为一开始一切都是未知，随着项目进行中，项目渐进明细，风险和不确定性慢慢减小。 以下哪项陈述最准确描述了项目？ A、项目范围变更的代价在项目的最初阶段最大B、项目干系人的影响在整个项目期间是相同的C、在项目执行阶段成本和人力投入量达到顶峰D、项目的下一阶段永远不应该开始，直到前一个阶段的可交付成果被完全审查和批准 答案：C。 项目范围变更的代价在项目的最初阶段是最小的，排除 A。项目干系人的影响在整个项目期间开始时最大，之后递减。排除 B 阶段可能交叠进行，排除 D。 在一个快速变化环境中工作的项目经理，将收集到的需求清单排列优先顺序进行工作计划。让优先级最高的可交付成果 3 周内完成。项目经理正在使用哪一种项目生命周期方法？ A、适应B、预测C、直觉D、反复 答案 A，题干关键字“快速变化环境中”工作的 PM，这是适应型敏捷开发。快速变化就不可能用预测型，排除 B。 下列哪项陈述反映了项目的风险程度？ A、 项目初始阶段的风险最小B、 风险在整个项目期间保持恒定C、 项目实施过程中风险最大D、 项目初始阶段风险最大 答案：D。项目的风险与不确定性，开始最大，逐步减小； 下列哪项最好地描述了项目利害关系者介入项目规划时所造成的影响？ A、耗时,使得规划过程变慢B、只对内部服务合同有帮助C、通常有助于制订完整、准确的项目计划D、不需要，因为项目利害关系者通常不想介入 答案：C。在规划项目、制定项目管理计划和项目文件时，项目团队应当征求所以干系人的意见，鼓励所有干系人的参与。 项目经理正在负责一个十分复杂的大型项目，与项目团队成员讨论后决定分阶段予以实施，并定下了第一个阶段为设计阶段。请问在设计阶段中应进行哪些项目管理过程组？ A、启动和规划过程组B、规划和执行过程组C、启动、规划、执行、监控、收尾过程组D、启动、执行、收尾过程组 答案：C。每个阶段都是一个子项目，都应该进行五大过程组。阶段＝子项目 在项目的什么时间点，项目经理将会审查控制措施？ A、在计划编制阶段B、在启动和执行阶段C、在项目收尾阶段D、在项目过程中持续审查 答案：D。监控过程组贯穿整个项目始终。 执行过程组的主要目标是什么？ A. 跟踪并审查项目进度B. 管理利害关系者的期望C. 满足项目规范D．监控进度表 答案:C.执行过程组定义：完成项目管理计划中的工作，满足项目规范要求。 关注公众号，随时随地获取编程知识，面试题，PMP等相关资料","categories":[{"name":"PMP","slug":"PMP","permalink":"http://yoursite.com/categories/PMP/"}],"tags":[{"name":"PMP","slug":"PMP","permalink":"http://yoursite.com/tags/PMP/"}]},{"title":"PMP备考指南之相关事项介绍","slug":"pmp/PMP01","date":"2019-04-22T00:30:00.000Z","updated":"2019-04-22T00:30:00.000Z","comments":true,"path":"2019/04/22/pmp/PMP01/","link":"","permalink":"http://yoursite.com/2019/04/22/pmp/PMP01/","excerpt":"","text":"每天进步一点，不做curd工程师与Api调用工程师欢迎关注个人博客网站：https://www.coder-programming.cn/ 本文已同步至 GitHub/Gitee/公众号，感兴趣的同学帮忙点波关注~ PMP是当今IT、通信、建筑、等高新技术行业的热门资格认证，无论是技术升级管理，还是管理者的能力提升，都离不开PMP的理论体系。今天就来介绍下PMP备考前的相关内容。 PMP认证的报名条件1、申请者具有学士学位或同等的大学学历，并且须至少具有4500小时的项目管理相关经历。PMI要求申请者需至少3年以上，具有4500小时的项目管理经历(计算方法：不重叠累积)。仅在申请日之前6年之内的经历有效。 2、申请者虽不具备学士学位或同等大学学历，但持有中学文凭或同等中学学历证书， 并且至少具有7500小时的项目管理经历(计算方法：不重叠累积)。PMI要求申请者需至少5年以上，具有7500小时的项目管理经历。仅在申请日之前8年之内的经历有效。 3、具备PMI授权培训机构颁发的35PDU培训证书(必须由PMI或中国外专局授权的培训机构出具)。报考者可以在资格申请后的一年内，申请考试。 PMP考试时间PMP每年有4次的考试机会，分别是 3月30日、6月22日、9月7日、12月7日。而PMP认证考试报名时间一般是在PMP考试前两个半月截止，建议大家提前做好时间计划! 考试费用一、初考：2018年PMP认证考试初考需要交纳3900元人民币。（培训费另算） 二、重考：未通过PMP考试的考生，建议及时报名参加重考，因为考生只有一年的资格期来通过考试，在资格期内，有2-3次的考试机会。重考者需要交纳重考费。重考费为2500元人民币。（培训费另算） 注：缴费方式只能使用汇款/转账。 PMP 考试介绍 它是笔试，200 道选择题，都是单选题，四选一； 不做选择，算答错。选了多个，也算错； 中英文对照，对于中国考生看中文就可以了，但是有些题的翻译不咋样，所以当读到题 目有些别扭、或者觉得选项与题目都有点不符的时候，应该对照一下英文； 200 题里面有 25 题不计分，是 PMI 用来测试本次考试是否太难、或太容易、或者争议 非常大的题目。但是这 25 题并不知道是哪些，随机散乱的分布在试卷中。所以 200 题的 PMP 考试，131 及以上算是及格，我们清晖要求 140 以上。 答题时间：9：00～13：00，共计 4 个小时。 PMP 考试试题分布 过程组 比例 题目数量 启动过程组 13% 26 题 规划过程组 24% 48 题 执行过程组 30% 60 题 监控过程组 25% 50 题 收尾过程组 8% 16 题 1、题目也是随机分布，不按过程组顺序。2、从 2017 年 9 月份的考试开始，PMI 对 PMP 的成绩显示进行了调整，不再用之前的 P\\M\\B 三个等级来体现成绩，而是以：Needs Improvement（需要提高） \\ Below Target（低 于目标） \\ Targer（目标水平） \\ Above Target（高于目标） 四个标准来分别体现五个过程 组的成绩状态。考题类型：1、直接考输入、工具、输出的题，这类题较少，5 题以内。2、情景题：PM 在管理一个项目，前一个阶段如何„.后一个阶段„客户提出变更，问 PM 下 一步应该怎么办？3、过程描述题：描述了某一处理过程，问这是应用的哪一项技术？项目团队采用的是哪一 种工具？项目经理使用的是哪种风险应对策略？4、计算题：挣值管理、风险管理、三点估算、关键路径时差等等。5、管理常识题：墨菲定律、彼得原理等6、冷僻题：比如 KISS 法则：Keep It Simple and Stupid 简约并不简单。 PMI 理念1 、项目经理是整合者，是在做整合管理。项目经理对项目管理负责，“管理”是你的核心任务，项目经理并不需要亲自去做所有 事情，比如：并不需要亲自写代码、并不需要负责所有风险、并不需要解决所有问题，PMI 讲究团队合作。 2 、项目经理必须被授权。就像我们做项目首先需要立项，获得项目批准书。没有被授权的项目经理就像没有拿到 “圣旨”，就没有权力调动或使用资源。各个公司可能叫法不同，有的叫立项报告。但是 PMI 统一把项目批准书称为“项目章程”。项目章程的批准就意味着项目经理被授权了。 3 、项目经理要积极主动，鼓励干系人的参与。项目经理不能简单地服从领导安排，也不能消极拖延工作。 4 、拒绝镀金，拒绝多此一举。镀金：是项目人员为了“讨好”客户而“画蛇添足”做的项目活动。PMI 觉得镀金的 项目是失败的，反对镀金。比如客户要 PM 去买包烟，PM 买了烟后又私自决定给客户配了 个打火机。这就是镀金了，客户并不需要打火机，也许客户自己有更高级的“ZIPPO”。镀金，是画蛇添足、因为浪费了资源。镀金，PMI 是明令禁止。 5 、项目团队必须得到尊重、重视、并且要及时沟通，反对免费加班。 6 、做项目时有两个因素必须考虑：组织过程资产、事业环境因素。组织过程资产：比如，项目做完了，收尾时候把成功经验和失败教训记录在组织过程资 产中，下一个项目启动时要参考组织过程资产。组织过程资产当中，不仅仅包括经验教训， 还有其他，我们后续章节会陆续介绍。事业环境因素：是项目团队无法改变的，比如：公司文化、公司的制度、政治氛围等。 答题技巧1、一定要看清四个选项后，选择一个相对正确的答案。有时候四个选项都没有原则性的错 误，但是要选一个“最”对的. 2、PMP 考试答题不能完全按照自己的实际工作凭经验判断，美国人的思路跟我们有些差异, 答题要从 PMI 理念的角度出发。 比如：实际工作中为了提高客户满意度，会赠送一些增值功能，而这些功能在原本约定的范 围中没有的，这就是镀金。但是 PMI 的态度是非常坚决的，反对镀金。 3、注意区分多余和误导信息，注意题目中问什么，有些题目问：以上都是正确的，除了？ 4、项目经理直接拒绝、和直接服从的肯定要排除，绝对不是答案。项目经理要积极主动。 5、对于项目团队的管理，要注意人性化管理，如团队成员疲劳，应支持休息，反对加班， 一般来说牺牲团队个人休息、休假、离职等请求的选项都不正确。 6、一般不选 PMBOK 中没有出现过的陌生词汇，这样太不专业了； 比如：在月项目状态会上，客户抱怨缺乏与项目进展有关的信息。项目经理应参考下列哪一 份文件？A、进度进展报告B、进度管理计划C、沟通管理计划D、工作绩效报告 题干说“客户抱怨缺乏与项目进展有关的信息”，凭经验判断答案选 A 进度进展报告。但是 PMBOK 并没有“进度进展报告”这个说法，一定不能选 A，选 A 太不专业了，A 就 是用来打酱油的。正确答案 C ，缺乏信息是因为没有沟通导致的。 学习方法与建议距离考试有接近三个月时间。 1 、 学习时间模拟考试前：每天 12 小时复习，模拟考试后：每天 34 小时。绝大多数考试不过的 原因，是学习时间不够。所以请大家务必坚持每天学习。 2 、学习方式模拟考试前：看讲义、看 PMBOK、做单元测试题；模拟考试后：看讲义、看 PMBOK、模拟考试题、单元测试。注：输入、工具、输出简称 ITTO。 3 、学习技巧（1）温故而知新，不仅要多看错题，做完一套题，对的也要重看一遍。因为难免有些题是我们蒙对的，虽然选对了，但是我们并不知道具体原理，为了保证下一次不需要蒙，我们也都要看一遍，保证做过的每一道题，我们都清楚的知道其中的原理，或者同类型的选择方式。（2）要善于总结，对于自己的错题和易混淆题，应该善于对比、总结，自己记录其中的规律。（3）要善于利用碎片化时间进行学习。大家白天上班很忙，晚上也没整块的时间学习，那么就要善于利用上班路上、下班回家路上、中午休息或者晚上睡前的时间多多学习。","categories":[{"name":"PMP","slug":"PMP","permalink":"http://yoursite.com/categories/PMP/"}],"tags":[{"name":"PMP","slug":"PMP","permalink":"http://yoursite.com/tags/PMP/"}]},{"title":"不可不说的Java“锁”事","slug":"java/Lock","date":"2018-11-15T12:06:09.000Z","updated":"2018-11-15T12:06:09.000Z","comments":true,"path":"2018/11/15/java/Lock/","link":"","permalink":"http://yoursite.com/2018/11/15/java/Lock/","excerpt":"面试 乐观锁 VS 悲观锁 … 自旋锁 VS 适应性自旋锁 … 公平锁 VS 非公平锁 …","text":"来源：httpstech.meituan.com20181115java-lock.html 前言Java提供了种类丰富的锁，每种锁因其特性的不同，在适当的场景下能够展现出非常高的效率。本文旨在对锁相关源码（本文中的源码来自JDK 8和Netty 3.10.6）、使用场景进行举例，为读者介绍主流锁的知识点，以及不同的锁的适用场景。 Java中往往是按照是否含有某一特性来定义锁，我们通过特性将锁进行分组归类，再使用对比的方式进行介绍，帮助大家更快捷的理解相关知识。下面给出本文内容的总体分类目录： 1. 乐观锁 VS 悲观锁乐观锁与悲观锁是一种广义上的概念，体现了看待线程同步的不同角度。在Java和数据库中都有此概念对应的实际应用。 先说概念。对于同一个数据的并发操作，悲观锁认为自己在使用数据的时候一定有别的线程来修改数据，因此在获取数据的时候会先加锁，确保数据不会被别的线程修改。Java中，synchronized关键字和Lock的实现类都是悲观锁。 而乐观锁认为自己在使用数据时不会有别的线程修改数据，所以不会添加锁，只是在更新数据的时候去判断之前有没有别的线程更新了这个数据。如果这个数据没有被更新，当前线程将自己修改的数据成功写入。如果数据已经被其他线程更新，则根据不同的实现方式执行不同的操作（例如报错或者自动重试）。 乐观锁在Java中是通过使用无锁编程来实现，最常采用的是CAS算法，Java原子类中的递增操作就通过CAS自旋实现的。 根据从上面的概念描述我们可以发现： 悲观锁适合写操作多的场景，先加锁可以保证写操作时数据正确。 乐观锁适合读操作多的场景，不加锁的特点能够使其读操作的性能大幅提升。 光说概念有些抽象，我们来看下乐观锁和悲观锁的调用方式示例： 12345678910111213141516 ------------------------- 悲观锁的调用方式 ------------------------- synchronizedpublic synchronized void testMethod() &#123; 操作同步资源&#125; ReentrantLockprivate ReentrantLock lock &#x3D; new ReentrantLock(); 需要保证多个线程使用的是同一个锁public void modifyPublicResources() &#123; lock.lock(); 操作同步资源 lock.unlock();&#125; ------------------------- 乐观锁的调用方式 -------------------------private AtomicInteger atomicInteger &#x3D; new AtomicInteger(); 需要保证多个线程使用的是同一个AtomicIntegeratomicInteger.incrementAndGet(); 执行自增1 通过调用方式示例，我们可以发现悲观锁基本都是在显式的锁定之后再操作同步资源，而乐观锁则直接去操作同步资源。那么，为何乐观锁能够做到不锁定同步资源也可以正确的实现线程同步呢？我们通过介绍乐观锁的主要实现方式 “CAS” 的技术原理来为大家解惑。 CAS全称 Compare And Swap（比较与交换），是一种无锁算法。在不使用锁（没有线程被阻塞）的情况下实现多线程之间的变量同步。java.util.concurrent包中的原子类就是通过CAS来实现了乐观锁。 CAS算法涉及到三个操作数： 需要读写的内存值 V。 进行比较的值 A。 要写入的新值 B。 当且仅当 V 的值等于 A 时，CAS通过原子方式用新值B来更新V的值（“比较+更新”整体是一个原子操作），否则不会执行任何操作。一般情况下，“更新”是一个不断重试的操作。 之前提到java.util.concurrent包中的原子类，就是通过CAS来实现了乐观锁，那么我们进入原子类AtomicInteger的源码，看一下AtomicInteger的定义： 根据定义我们可以看出各属性的作用： unsafe： 获取并操作内存的数据。 valueOffset： 存储value在AtomicInteger中的偏移量。 value： 存储AtomicInteger的int值，该属性需要借助volatile关键字保证其在线程间是可见的。 接下来，我们查看AtomicInteger的自增函数incrementAndGet()的源码时，发现自增函数底层调用的是unsafe.getAndAddInt()。但是由于JDK本身只有Unsafe.class，只通过class文件中的参数名，并不能很好的了解方法的作用，所以我们通过OpenJDK 8 来查看Unsafe的源码： 123456789101112131415161718192021222324 ------------------------- JDK 8 ------------------------- AtomicInteger 自增方法public final int incrementAndGet() &#123; return unsafe.getAndAddInt(this, valueOffset, 1) + 1;&#125; Unsafe.classpublic final int getAndAddInt(Object var1, long var2, int var4) &#123; int var5; do &#123; var5 &#x3D; this.getIntVolatile(var1, var2); &#125; while(!this.compareAndSwapInt(var1, var2, var5, var5 + var4)); return var5;&#125; ------------------------- OpenJDK 8 ------------------------- Unsafe.javapublic final int getAndAddInt(Object o, long offset, int delta) &#123; int v; do &#123; v &#x3D; getIntVolatile(o, offset); &#125; while (!compareAndSwapInt(o, offset, v, v + delta)); return v;&#125; 根据OpenJDK 8的源码我们可以看出，getAndAddInt()循环获取给定对象o中的偏移量处的值v，然后判断内存值是否等于v。如果相等则将内存值设置为 v + delta，否则返回false，继续循环进行重试，直到设置成功才能退出循环，并且将旧值返回。整个“比较+更新”操作封装在compareAndSwapInt()中，在JNI里是借助于一个CPU指令完成的，属于原子操作，可以保证多个线程都能够看到同一个变量的修改值。 后续JDK通过CPU的cmpxchg指令，去比较寄存器中的 A 和 内存中的值 V。如果相等，就把要写入的新值 B 存入内存中。如果不相等，就将内存值 V 赋值给寄存器中的值 A。然后通过Java代码中的while循环再次调用cmpxchg指令进行重试，直到设置成功为止。 CAS虽然很高效，但是它也存在三大问题，这里也简单说一下： ABA问题。CAS需要在操作值的时候检查内存值是否发生变化，没有发生变化才会更新内存值。但是如果内存值原来是A，后来变成了B，然后又变成了A，那么CAS进行检查时会发现值没有发生变化，但是实际上是有变化的。ABA问题的解决思路就是在变量前面添加版本号，每次变量更新的时候都把版本号加一，这样变化过程就从“A－B－A”变成了“1A－2B－3A”。 JDK从1.5开始提供了AtomicStampedReference类来解决ABA问题，具体操作封装在compareAndSet()中。compareAndSet()首先检查当前引用和当前标志与预期引用和预期标志是否相等，如果都相等，则以原子方式将引用值和标志的值设置为给定的更新值。 循环时间长开销大。CAS操作如果长时间不成功，会导致其一直自旋，给CPU带来非常大的开销。 只能保证一个共享变量的原子操作。对一个共享变量执行操作时，CAS能够保证原子操作，但是对多个共享变量操作时，CAS是无法保证操作的原子性的。 Java从1.5开始JDK提供了AtomicReference类来保证引用对象之间的原子性，可以把多个变量放在一个对象里来进行CAS操作。 2. 自旋锁 VS 适应性自旋锁在介绍自旋锁前，我们需要介绍一些前提知识来帮助大家明白自旋锁的概念。 阻塞或唤醒一个Java线程需要操作系统切换CPU状态来完成，这种状态转换需要耗费处理器时间。如果同步代码块中的内容过于简单，状态转换消耗的时间有可能比用户代码执行的时间还要长。 在许多场景中，同步资源的锁定时间很短，为了这一小段时间去切换线程，线程挂起和恢复现场的花费可能会让系统得不偿失。如果物理机器有多个处理器，能够让两个或以上的线程同时并行执行，我们就可以让后面那个请求锁的线程不放弃CPU的执行时间，看看持有锁的线程是否很快就会释放锁。 而为了让当前线程“稍等一下”，我们需让当前线程进行自旋，如果在自旋完成后前面锁定同步资源的线程已经释放了锁，那么当前线程就可以不必阻塞而是直接获取同步资源，从而避免切换线程的开销。这就是自旋锁。 自旋锁本身是有缺点的，它不能代替阻塞。自旋等待虽然避免了线程切换的开销，但它要占用处理器时间。如果锁被占用的时间很短，自旋等待的效果就会非常好。反之，如果锁被占用的时间很长，那么自旋的线程只会白浪费处理器资源。所以，自旋等待的时间必须要有一定的限度，如果自旋超过了限定次数（默认是10次，可以使用-XXPreBlockSpin来更改）没有成功获得锁，就应当挂起线程。 自旋锁的实现原理同样也是CAS，AtomicInteger中调用unsafe进行自增操作的源码中的do-while循环就是一个自旋操作，如果修改数值失败则通过循环来执行自旋，直至修改成功。 自旋锁在JDK1.4.2中引入，使用-XX+UseSpinning来开启。JDK 6中变为默认开启，并且引入了自适应的自旋锁（适应性自旋锁）。 自适应意味着自旋的时间（次数）不再固定，而是由前一次在同一个锁上的自旋时间及锁的拥有者的状态来决定。如果在同一个锁对象上，自旋等待刚刚成功获得过锁，并且持有锁的线程正在运行中，那么虚拟机就会认为这次自旋也是很有可能再次成功，进而它将允许自旋等待持续相对更长的时间。如果对于某个锁，自旋很少成功获得过，那在以后尝试获取这个锁时将可能省略掉自旋过程，直接阻塞线程，避免浪费处理器资源。 在自旋锁中 另有三种常见的锁形式TicketLock、CLHlock和MCSlock，本文中仅做名词介绍，不做深入讲解，感兴趣的同学可以自行查阅相关资料。 3. 无锁 VS 偏向锁 VS 轻量级锁 VS 重量级锁这四种锁是指锁的状态，专门针对synchronized的。在介绍这四种锁状态之前还需要介绍一些额外的知识。 首先为什么Synchronized能实现线程同步？ 在回答这个问题之前我们需要了解两个重要的概念：“Java对象头”、“Monitor”。 Java对象头synchronized是悲观锁，在操作同步资源之前需要给同步资源先加锁，这把锁就是存在Java对象头里的，而Java对象头又是什么呢？ 我们以Hotspot虚拟机为例，Hotspot的对象头主要包括两部分数据：Mark Word（标记字段）、Klass Pointer（类型指针）。 Mark Word：默认存储对象的HashCode，分代年龄和锁标志位信息。这些信息都是与对象自身定义无关的数据，所以Mark Word被设计成一个非固定的数据结构以便在极小的空间内存存储尽量多的数据。它会根据对象的状态复用自己的存储空间，也就是说在运行期间Mark Word里存储的数据会随着锁标志位的变化而变化。 Klass Point：对象指向它的类元数据的指针，虚拟机通过这个指针来确定这个对象是哪个类的实例。 MonitorMonitor可以理解为一个同步工具或一种同步机制，通常被描述为一个对象。每一个Java对象就有一把看不见的锁，称为内部锁或者Monitor锁。 Monitor是线程私有的数据结构，每一个线程都有一个可用monitor record列表，同时还有一个全局的可用列表。每一个被锁住的对象都会和一个monitor关联，同时monitor中有一个Owner字段存放拥有该锁的线程的唯一标识，表示该锁被这个线程占用。 现在话题回到synchronized，synchronized通过Monitor来实现线程同步，Monitor是依赖于底层的操作系统的Mutex Lock（互斥锁）来实现的线程同步。 如同我们在自旋锁中提到的“阻塞或唤醒一个Java线程需要操作系统切换CPU状态来完成，这种状态转换需要耗费处理器时间。如果同步代码块中的内容过于简单，状态转换消耗的时间有可能比用户代码执行的时间还要长”。这种方式就是synchronized最初实现同步的方式，这就是JDK 6之前synchronized效率低的原因。这种依赖于操作系统Mutex Lock所实现的锁我们称之为“重量级锁”，JDK 6中为了减少获得锁和释放锁带来的性能消耗，引入了“偏向锁”和“轻量级锁”。 所以目前锁一共有4种状态，级别从低到高依次是：无锁、偏向锁、轻量级锁和重量级锁。锁状态只能升级不能降级。 通过上面的介绍，我们对synchronized的加锁机制以及相关知识有了一个了解，那么下面我们给出四种锁状态对应的的Mark Word内容，然后再分别讲解四种锁状态的思路以及特点： 锁状态 存储内容 存储内容 无锁 对象的hashCode、对象分代年龄、是否是偏向锁（0） 01 偏向锁 偏向线程ID、偏向时间戳、对象分代年龄、是否是偏向锁（1） 01 轻量级锁 指向栈中锁记录的指针 00 重量级锁 指向互斥量（重量级锁）的指针 10 无锁 无锁没有对资源进行锁定，所有的线程都能访问并修改同一个资源，但同时只有一个线程能修改成功。 无锁的特点就是修改操作在循环内进行，线程会不断的尝试修改共享资源。如果没有冲突就修改成功并退出，否则就会继续循环尝试。如果有多个线程修改同一个值，必定会有一个线程能修改成功，而其他修改失败的线程会不断重试直到修改成功。上面我们介绍的CAS原理及应用即是无锁的实现。无锁无法全面代替有锁，但无锁在某些场合下的性能是非常高的。 偏向锁 偏向锁是指一段同步代码一直被一个线程所访问，那么该线程会自动获取锁，降低获取锁的代价。 在大多数情况下，锁总是由同一线程多次获得，不存在多线程竞争，所以出现了偏向锁。其目标就是在只有一个线程执行同步代码块时能够提高性能。 当一个线程访问同步代码块并获取锁时，会在Mark Word里存储锁偏向的线程ID。在线程进入和退出同步块时不再通过CAS操作来加锁和解锁，而是检测Mark Word里是否存储着指向当前线程的偏向锁。引入偏向锁是为了在无多线程竞争的情况下尽量减少不必要的轻量级锁执行路径，因为轻量级锁的获取及释放依赖多次CAS原子指令，而偏向锁只需要在置换ThreadID的时候依赖一次CAS原子指令即可。 偏向锁只有遇到其他线程尝试竞争偏向锁时，持有偏向锁的线程才会释放锁，线程不会主动释放偏向锁。偏向锁的撤销，需要等待全局安全点（在这个时间点上没有字节码正在执行），它会首先暂停拥有偏向锁的线程，判断锁对象是否处于被锁定状态。撤销偏向锁后恢复到无锁（标志位为“01”）或轻量级锁（标志位为“00”）的状态。 偏向锁在JDK 6及以后的JVM里是默认启用的。可以通过JVM参数关闭偏向锁：-XX-UseBiasedLocking=false，关闭之后程序默认会进入轻量级锁状态。 轻量级锁 是指当锁是偏向锁的时候，被另外的线程所访问，偏向锁就会升级为轻量级锁，其他线程会通过自旋的形式尝试获取锁，不会阻塞，从而提高性能。 在代码进入同步块的时候，如果同步对象锁状态为无锁状态（锁标志位为“01”状态，是否为偏向锁为“0”），虚拟机首先将在当前线程的栈帧中建立一个名为锁记录（Lock Record）的空间，用于存储锁对象目前的Mark Word的拷贝，然后拷贝对象头中的Mark Word复制到锁记录中。 拷贝成功后，虚拟机将使用CAS操作尝试将对象的Mark Word更新为指向Lock Record的指针，并将Lock Record里的owner指针指向对象的Mark Word。 如果这个更新动作成功了，那么这个线程就拥有了该对象的锁，并且对象Mark Word的锁标志位设置为“00”，表示此对象处于轻量级锁定状态。 如果轻量级锁的更新操作失败了，虚拟机首先会检查对象的Mark Word是否指向当前线程的栈帧，如果是就说明当前线程已经拥有了这个对象的锁，那就可以直接进入同步块继续执行，否则说明多个线程竞争锁。 若当前只有一个等待线程，则该线程通过自旋进行等待。但是当自旋超过一定的次数，或者一个线程在持有锁，一个在自旋，又有第三个来访时，轻量级锁升级为重量级锁。 重量级锁 升级为重量级锁时，锁标志的状态值变为“10”，此时Mark Word中存储的是指向重量级锁的指针，此时等待锁的线程都会进入阻塞状态。 整体的锁状态升级流程如下： 综上，偏向锁通过对比Mark Word解决加锁问题，避免执行CAS操作。而轻量级锁是通过用CAS操作和自旋来解决加锁问题，避免线程阻塞和唤醒而影响性能。重量级锁是将除了拥有锁的线程以外的线程都阻塞。 4. 公平锁 VS 非公平锁公平锁是指多个线程按照申请锁的顺序来获取锁，线程直接进入队列中排队，队列中的第一个线程才能获得锁。公平锁的优点是等待锁的线程不会饿死。缺点是整体吞吐效率相对非公平锁要低，等待队列中除第一个线程以外的所有线程都会阻塞，CPU唤醒阻塞线程的开销比非公平锁大。 非公平锁是多个线程加锁时直接尝试获取锁，获取不到才会到等待队列的队尾等待。但如果此时锁刚好可用，那么这个线程可以无需阻塞直接获取到锁，所以非公平锁有可能出现后申请锁的线程先获取锁的场景。非公平锁的优点是可以减少唤起线程的开销，整体的吞吐效率高，因为线程有几率不阻塞直接获得锁，CPU不必唤醒所有线程。缺点是处于等待队列中的线程可能会饿死，或者等很久才会获得锁。 直接用语言描述可能有点抽象，这里作者用从别处看到的一个例子来讲述一下公平锁和非公平锁。 如上图所示，假设有一口水井，有管理员看守，管理员有一把锁，只有拿到锁的人才能够打水，打完水要把锁还给管理员。每个过来打水的人都要管理员的允许并拿到锁之后才能去打水，如果前面有人正在打水，那么这个想要打水的人就必须排队。管理员会查看下一个要去打水的人是不是队伍里排最前面的人，如果是的话，才会给你锁让你去打水；如果你不是排第一的人，就必须去队尾排队，这就是公平锁。 但是对于非公平锁，管理员对打水的人没有要求。即使等待队伍里有排队等待的人，但如果在上一个人刚打完水把锁还给管理员而且管理员还没有允许等待队伍里下一个人去打水时，刚好来了一个插队的人，这个插队的人是可以直接从管理员那里拿到锁去打水，不需要排队，原本排队等待的人只能继续等待。如下图所示： 接下来我们通过ReentrantLock的源码来讲解公平锁和非公平锁。 根据代码可知，ReentrantLock里面有一个内部类Sync，Sync继承AQS（AbstractQueuedSynchronizer），添加锁和释放锁的大部分操作实际上都是在Sync中实现的。它有公平锁FairSync和非公平锁NonfairSync两个子类。ReentrantLock默认使用非公平锁，也可以通过构造器来显示的指定使用公平锁。 下面我们来看一下公平锁与非公平锁的加锁方法的源码 通过上图中的源代码对比，我们可以明显的看出公平锁与非公平锁的lock()方法唯一的区别就在于公平锁在获取同步状态时多了一个限制条件：hasQueuedPredecessors()。 再进入hasQueuedPredecessors()，可以看到该方法主要做一件事情：主要是判断当前线程是否位于同步队列中的第一个。如果是则返回true，否则返回false。 综上，公平锁就是通过同步队列来实现多个线程按照申请锁的顺序来获取锁，从而实现公平的特性。非公平锁加锁时不考虑排队等待问题，直接尝试获取锁，所以存在后申请却先获得锁的情况。 5. 可重入锁 VS 非可重入锁可重入锁又名递归锁，是指在同一个线程在外层方法获取锁的时候，再进入该线程的内层方法会自动获取锁（前提锁对象得是同一个对象或者class），不会因为之前已经获取过还没释放而阻塞。Java中ReentrantLock和synchronized都是可重入锁，可重入锁的一个优点是可一定程度避免死锁。下面用示例代码来进行分析： 12345678910public class Widget &#123; public synchronized void doSomething() &#123; System.out.println(方法1执行...); doOthers(); &#125; public synchronized void doOthers() &#123; System.out.println(方法2执行...); &#125;&#125; 在上面的代码中，类中的两个方法都是被内置锁synchronized修饰的，doSomething()方法中调用doOthers()方法。因为内置锁是可重入的，所以同一个线程在调用doOthers()时可以直接获得当前对象的锁，进入doOthers()进行操作。 如果是一个不可重入锁，那么当前线程在调用doOthers()之前需要将执行doSomething()时获取当前对象的锁释放掉，实际上该对象锁已被当前线程所持有，且无法释放。所以此时会出现死锁。 而为什么可重入锁就可以在嵌套调用时可以自动获得锁呢？我们通过图示和源码来分别解析一下。 还是打水的例子，有多个人在排队打水，此时管理员允许锁和同一个人的多个水桶绑定。这个人用多个水桶打水时，第一个水桶和锁绑定并打完水之后，第二个水桶也可以直接和锁绑定并开始打水，所有的水桶都打完水之后打水人才会将锁还给管理员。这个人的所有打水流程都能够成功执行，后续等待的人也能够打到水。这就是可重入锁。 但如果是非可重入锁的话，此时管理员只允许锁和同一个人的一个水桶绑定。第一个水桶和锁绑定打完水之后并不会释放锁，导致第二个水桶不能和锁绑定也无法打水。当前线程出现死锁，整个等待队列中的所有线程都无法被唤醒。 之前我们说过ReentrantLock和synchronized都是重入锁，那么我们通过重入锁ReentrantLock以及非可重入锁NonReentrantLock的源码来对比分析一下为什么非可重入锁在重复调用同步资源时会出现死锁。 首先ReentrantLock和NonReentrantLock都继承父类AQS，其父类AQS中维护了一个同步状态status来计数重入次数，status初始值为0。 当线程尝试获取锁时，可重入锁先尝试获取并更新status值，如果status == 0表示没有其他线程在执行同步代码，则把status置为1，当前线程开始执行。如果status != 0，则判断当前线程是否是获取到这个锁的线程，如果是的话执行status+1，且当前线程可以再次获取锁。而非可重入锁是直接去获取并尝试更新当前status的值，如果status != 0的话会导致其获取锁失败，当前线程阻塞。 释放锁时，可重入锁同样先获取当前status的值，在当前线程是持有锁的线程的前提下。如果status-1 == 0，则表示当前线程所有重复获取锁的操作都已经执行完毕，然后该线程才会真正释放锁。而非可重入锁则是在确定当前线程是持有锁的线程之后，直接将status置为0，将锁释放。 6. 独享锁 VS 共享锁独享锁和共享锁同样是一种概念。我们先介绍一下具体的概念，然后通过ReentrantLock和ReentrantReadWriteLock的源码来介绍独享锁和共享锁。 独享锁也叫排他锁，是指该锁一次只能被一个线程所持有。如果线程T对数据A加上排它锁后，则其他线程不能再对A加任何类型的锁。获得排它锁的线程即能读数据又能修改数据。JDK中的synchronized和JUC中Lock的实现类就是互斥锁。 共享锁是指该锁可被多个线程所持有。如果线程T对数据A加上共享锁后，则其他线程只能对A再加共享锁，不能加排它锁。获得共享锁的线程只能读数据，不能修改数据。 独享锁与共享锁也是通过AQS来实现的，通过实现不同的方法，来实现独享或者共享。 下图为ReentrantReadWriteLock的部分源码： 我们看到ReentrantReadWriteLock有两把锁：ReadLock和WriteLock，由词知意，一个读锁一个写锁，合称“读写锁”。再进一步观察可以发现ReadLock和WriteLock是靠内部类Sync实现的锁。Sync是AQS的一个子类，这种结构在CountDownLatch、ReentrantLock、Semaphore里面也都存在。 在ReentrantReadWriteLock里面，读锁和写锁的锁主体都是Sync，但读锁和写锁的加锁方式不一样。读锁是共享锁，写锁是独享锁。读锁的共享锁可保证并发读非常高效，而读写、写读、写写的过程互斥，因为读锁和写锁是分离的。所以ReentrantReadWriteLock的并发性相比一般的互斥锁有了很大提升。 那读锁和写锁的具体加锁方式有什么区别呢？在了解源码之前我们需要回顾一下其他知识。 在最开始提及AQS的时候我们也提到了state字段（int类型，32位），该字段用来描述有多少线程获持有锁。 在独享锁中这个值通常是0或者1（如果是重入锁的话state值就是重入的次数），在共享锁中state就是持有锁的数量。但是在ReentrantReadWriteLock中有读、写两把锁，所以需要在一个整型变量state上分别描述读锁和写锁的数量（或者也可以叫状态）。于是将state变量“按位切割”切分成了两个部分，高16位表示读锁状态（读锁个数），低16位表示写锁状态（写锁个数）。如下图所示： 了解了概念之后我们再来看代码，先看写锁的加锁源码： 12345678910111213141516171819protected final boolean tryAcquire(int acquires) &#123; Thread current &#x3D; Thread.currentThread(); int c &#x3D; getState(); 取到当前锁的个数 int w &#x3D; exclusiveCount(c); 取写锁的个数w if (c !&#x3D; 0) &#123; 如果已经有线程持有了锁(c!&#x3D;0) (Note if c !&#x3D; 0 and w &#x3D;&#x3D; 0 then shared count !&#x3D; 0) if (w &#x3D;&#x3D; 0 current !&#x3D; getExclusiveOwnerThread()) 如果写线程数（w）为0（换言之存在读锁） 或者持有锁的线程不是当前线程就返回失败 return false; if (w + exclusiveCount(acquires) MAX_COUNT) 如果写入锁的数量大于最大数（65535，2的16次方-1）就抛出一个Error。 throw new Error(Maximum lock count exceeded); Reentrant acquire setState(c + acquires); return true; &#125; if (writerShouldBlock() !compareAndSetState(c, c + acquires)) 如果当且写线程数为0，并且当前线程需要阻塞那么就返回失败；或者如果通过CAS增加写线程数失败也返回失败。 return false; setExclusiveOwnerThread(current); 如果c&#x3D;0，w&#x3D;0或者c0，w0（重入），则设置当前线程或锁的拥有者 return true;&#125; 这段代码首先取到当前锁的个数c，然后再通过c来获取写锁的个数w。因为写锁是低16位，所以取低16位的最大值与当前的c做与运算（ int w = exclusiveCount©; ），高16位和0与运算后是0，剩下的就是低位运算的值，同时也是持有写锁的线程数目。 在取到写锁线程的数目后，首先判断是否已经有线程持有了锁。如果已经有线程持有了锁(c!=0)，则查看当前写锁线程的数目，如果写线程数为0（即此时存在读锁）或者持有锁的线程不是当前线程就返回失败（涉及到公平锁和非公平锁的实现）。 如果写入锁的数量大于最大数（65535，2的16次方-1）就抛出一个Error。 如果当且写线程数为0（那么读线程也应该为0，因为上面已经处理c!=0的情况），并且当前线程需要阻塞那么就返回失败；如果通过CAS增加写线程数失败也返回失败。 如果c=0,w=0或者c0,w0（重入），则设置当前线程或锁的拥有者，返回成功！ tryAcquire()除了重入条件（当前线程为获取了写锁的线程）之外，增加了一个读锁是否存在的判断。如果存在读锁，则写锁不能被获取，原因在于：必须确保写锁的操作对读锁可见，如果允许读锁在已被获取的情况下对写锁的获取，那么正在运行的其他读线程就无法感知到当前写线程的操作。 因此，只有等待其他读线程都释放了读锁，写锁才能被当前线程获取，而写锁一旦被获取，则其他读写线程的后续访问均被阻塞。写锁的释放与ReentrantLock的释放过程基本类似，每次释放均减少写状态，当写状态为0时表示写锁已被释放，然后等待的读写线程才能够继续访问读写锁，同时前次写线程的修改对后续的读写线程可见。 接着是读锁的代码： 123456789101112131415161718192021222324252627protected final int tryAcquireShared(int unused) &#123; Thread current &#x3D; Thread.currentThread(); int c &#x3D; getState(); if (exclusiveCount(c) !&#x3D; 0 &amp;&amp; getExclusiveOwnerThread() !&#x3D; current) return -1; 如果其他线程已经获取了写锁，则当前线程获取读锁失败，进入等待状态 int r &#x3D; sharedCount(c); if (!readerShouldBlock() &amp;&amp; r MAX_COUNT &amp;&amp; compareAndSetState(c, c + SHARED_UNIT)) &#123; if (r &#x3D;&#x3D; 0) &#123; firstReader &#x3D; current; firstReaderHoldCount &#x3D; 1; &#125; else if (firstReader &#x3D;&#x3D; current) &#123; firstReaderHoldCount++; &#125; else &#123; HoldCounter rh &#x3D; cachedHoldCounter; if (rh &#x3D;&#x3D; null rh.tid !&#x3D; getThreadId(current)) cachedHoldCounter &#x3D; rh &#x3D; readHolds.get(); else if (rh.count &#x3D;&#x3D; 0) readHolds.set(rh); rh.count++; &#125; return 1; &#125; return fullTryAcquireShared(current);&#125; 可以看到在tryAcquireShared(int unused)方法中，如果其他线程已经获取了写锁，则当前线程获取读锁失败，进入等待状态。如果当前线程获取了写锁或者写锁未被获取，则当前线程（线程安全，依靠CAS保证）增加读状态，成功获取读锁。读锁的每次释放（线程安全的，可能有多个读线程同时释放读锁）均减少读状态，减少的值是“116”。所以读写锁才能实现读读的过程共享，而读写、写读、写写的过程互斥。 此时，我们再回头看一下互斥锁ReentrantLock中公平锁和非公平锁的加锁源码： 我们发现在ReentrantLock虽然有公平锁和非公平锁两种，但是它们添加的都是独享锁。根据源码所示，当某一个线程调用lock方法获取锁时，如果同步资源没有被其他线程锁住，那么当前线程在使用CAS更新state成功后就会成功抢占该资源。而如果公共资源被占用且不是被当前线程占用，那么就会加锁失败。所以可以确定ReentrantLock无论读操作还是写操作，添加的锁都是都是独享锁。 结语本文Java中常用的锁以及常见的锁的概念进行了基本介绍，并从源码以及实际应用的角度进行了对比分析。限于篇幅以及个人水平，没有在本篇文章中对所有内容进行深层次的讲解。 其实Java本身已经对锁本身进行了良好的封装，降低了研发同学在平时工作中的使用难度。但是研发同学也需要熟悉锁的底层原理，不同场景下选择最适合的锁。而且源码中的思路都是非常好的思路，也是值得大家去学习和借鉴的。 参考资料 《Java并发编程艺术》 Java中的锁 Java CAS 原理剖析 Java并发——关键字synchronized解析 Java synchronized原理总结 聊聊并发（二）——Java SE1.6中的Synchronized 深入理解读写锁—ReadWriteLock源码分析 【JUC】JDK1.8源码分析之ReentrantReadWriteLock Java多线程（十）之ReentrantReadWriteLock深入分析 Java–读写锁的实现原理 作者简介 家琪，美团点评后端工程师。2017 年加入美团点评，负责美团点评境内度假的业务开发。","categories":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/categories/Java/"},{"name":"面试","slug":"面试","permalink":"http://yoursite.com/categories/%E9%9D%A2%E8%AF%95/"},{"name":"锁","slug":"锁","permalink":"http://yoursite.com/categories/%E9%94%81/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/tags/Java/"},{"name":"面试","slug":"面试","permalink":"http://yoursite.com/tags/%E9%9D%A2%E8%AF%95/"},{"name":"锁","slug":"锁","permalink":"http://yoursite.com/tags/%E9%94%81/"}]}]}